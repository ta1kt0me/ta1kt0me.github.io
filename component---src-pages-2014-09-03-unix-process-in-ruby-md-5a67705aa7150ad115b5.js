(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{Bl7J:function(e,t,n){"use strict";var r=n("dwav"),a=n("q1tI"),b=n.n(a),i=n("Wbzz"),l=function(e){var t=e.siteTitle;return b.a.createElement("header",{style:{background:"white",marginBottom:"1.45rem"}},b.a.createElement("div",{style:{margin:"0 auto",maxWidth:960,padding:"1.45rem 1.0875rem"}},b.a.createElement("h1",{style:{margin:0}},b.a.createElement(i.Link,{to:"/",style:{color:"black",textDecoration:"none"}},t))))};l.defaultProps={siteTitle:""};var c=l;n("8ypT"),t.a=function(e){var t=e.children,n=r.data;return b.a.createElement(b.a.Fragment,null,b.a.createElement(c,{siteTitle:n.site.siteMetadata.title}),b.a.createElement("div",{style:{margin:"0 auto",maxWidth:960,padding:"0 1.0875rem 1.45rem"}},b.a.createElement("main",null,t),b.a.createElement("footer",null,"© ",(new Date).getFullYear(),", Built with"," ",b.a.createElement("a",{href:"https://www.gatsbyjs.org"},"Gatsby"),"by ",n.site.siteMetadata.author)))}},CGAj:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return b})),n.d(t,"default",(function(){return c}));n("rGqo"),n("yt8O"),n("Btvt"),n("RW0V"),n("91GP"),n("q1tI");var r=n("7ljp"),a=n("Bl7J");var b={},i={_frontmatter:b},l=a.a;function c(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,r,a={},b=Object.keys(e);for(r=0;r<b.length;r++)n=b[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,["components"]);return Object(r.b)(l,Object.assign({},i,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"積読消化シリーズです。",Object(r.b)("br",{parentName:"p"}),"\n",Object(r.b)("a",Object.assign({parentName:"p"},{href:"http://tatsu-zine.com/books/naruhounix"}),"なるほどUnixプロセス ― Rubyで学ぶUnixの基礎"),Object(r.b)("br",{parentName:"p"}),"\n","UnixでのパイプをRubyで表すとどうなるか。"),Object(r.b)("h1",null,"Rubyで扱うパイプ"),Object(r.b)("h2",null,"パイプとは"),Object(r.b)("p",null,"パイプとは、「単方向のデータの流れ」です。",Object(r.b)("br",{parentName:"p"}),"\n","パイプでは、２つのプロセス(A,B)で、ストリームを介して、一方通行に通信します。",Object(r.b)("br",{parentName:"p"}),"\n","(ストリームは最後の方に補足します。データを溜めておく場所のイメージ)"),Object(r.b)("h2",null,"単一プロセスでのパイプ"),Object(r.b)("p",null,"一つのプロセスでの、パイプを表現すると以下の通りです。"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-rb"}),'p IO.pipe #=> [#<IO:fd 7>, #<IO:fd 8>]\nreader, writer = IO.pipe\n# reader => #<IO:fd 7>\n# writer => #<IO:fd 8>\n\nwriter.write("書き込みました。")\nwriter.close\nputs reader.read # =>書き込みました。\n')),Object(r.b)("p",null,"reader(A)、writer(B)とした場合、",Object(r.b)("inlineCode",{parentName:"p"},"B => A"),"というデータの流れは可能ですが、",Object(r.b)("inlineCode",{parentName:"p"},"A => B"),"はできません。",Object(r.b)("br",{parentName:"p"}),"\n",Object(r.b)("inlineCode",{parentName:"p"},"writer.write"),"でストリームに情報を書き込みます。",Object(r.b)("br",{parentName:"p"}),"\n",Object(r.b)("inlineCode",{parentName:"p"},"reader.read"),"でストリームに書き込まれた情報を読み込みます。  "),Object(r.b)("h3",null,"メモ"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"reader.read"),"の前に、",Object(r.b)("inlineCode",{parentName:"li"},"writer.close"),"をする",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"reader.read"),"は区切り文字が見つかるまでストリームを読み込み続けます"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"writer.close"),"することで、ストリームへの書き込みが終了させ、区切り文字を設定します"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"writer.close"),"で閉じたストリームを更新することはできない")),Object(r.b)("h2",null,"親子プロセスでのパイプ"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-rb"}),'reader, writer = IO.pipe\n# reader => #<IO:fd 7>\n# writer => #<IO:fd 8>\n\n# forkにより子プロセスを生成\nfork do\n  reader.close\n  10.times do\n    writer.write "Another one bite the dust\\n"\n  end\nend\n\nwriter.close\nprint reader.read\n# => Another one bite the dust\n# Another one bite the dust\n# Another one bite the dust\n# Another one bite the dust\n# Another one bite the dust\n# Another one bite the dust\n# Another one bite the dust\n# Another one bite the dust\n# Another one bite the dust\n# Another one bite the dust\n')),Object(r.b)("p",null,"親プロセス、子プロセスでは、それぞれ使用しないIOインスタンスをcloseしています。",Object(r.b)("br",{parentName:"p"}),"\n","これは、子プロセスが親のファイルディクリプタを複製して利用するためです。",Object(r.b)("br",{parentName:"p"}),"\n","ファイルディスクリプタというのは、ストリームの出入り口をイメージすると分かりやすいかもしれません。",Object(r.b)("br",{parentName:"p"}),"\n","writerやreaderでwrite/readするためのデータの取り出し口ですね。  "),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"親プロセスでは、write処理は行わないため、",Object(r.b)("inlineCode",{parentName:"li"},"writer.close"),"をします。  "),Object(r.b)("li",{parentName:"ul"},"forkした子プロセスでは、read処理は行わないため、",Object(r.b)("inlineCode",{parentName:"li"},"reader.close"),"をします。",Object(r.b)("br",{parentName:"li"}),"これで、利用しないファイルディクリプタに影響を与えなくなります。")),Object(r.b)("h3",null,"親子プロセス両方でreader.close"),Object(r.b)("p",null,"forkした子プロセスがwriteする前に、親プロセスで",Object(r.b)("inlineCode",{parentName:"p"},"reader.close"),"をすると、どうなるでしょうか。"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-rb"}),'reader, writer = IO.pipe\n\nfork do\n  reader.close\n  10.times do\n    writer.write "Another one bite the dust\\n"\n    # => `write\': Broken pipe (Errno::EPIPE)が発生\n  end\nend\n\nreader.close # この行を追加\nwriter.close\nprint reader.read\n')),Object(r.b)("p",null,"親子でreader.closeをすると、書き込んだ情報の出力先がなくなります。",Object(r.b)("br",{parentName:"p"}),"\n","そのため、子プロセスで書き込みをするとエラーが発生します。"),Object(r.b)("h2",null,"補足:ストリーム"),Object(r.b)("p",null,"スラッシュドットの以下の記事がイメージしやすかったです。\n",Object(r.b)("a",Object.assign({parentName:"p"},{href:"http://slashdot.jp/journal/160355/TCP%E3%81%A8UDP%E3%81%AE%E9%81%95%E3%81%84"}),"gatekeeperの日記： TCPとUDPの違い")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"ストリーム型というのは１個のデーターをためておく場所（ストリーム）があって、\nストリームの性質としては最初に入れたデーターが最初に出てくる。（要はFIFOだな）\n...\nそれがどういうことになるかというと、ストリーム型では何回かに分けて書き込んだデーターを一気に読み込んだり、\n一気に読み込んだり、 逆に一度に書き込んだデーターを細切れで読み出したりできる。\nつまり、読み書きの境界はストリームに入った時点で保存されない。")),Object(r.b)("p",null,"ストリームはデータを溜めておく場所で、明示的に終了したよって宣言しないと、データの区切りが分からないものなんですね。",Object(r.b)("br",{parentName:"p"}),"\n",Object(r.b)("inlineCode",{parentName:"p"},"close"),"することで、データの境界を設定します。",Object(r.b)("br",{parentName:"p"}),"\n","それまでは好きなだけ",Object(r.b)("inlineCode",{parentName:"p"},"write"),"でデータを溜め込みます。",Object(r.b)("br",{parentName:"p"}),"\n","しかし、",Object(r.b)("inlineCode",{parentName:"p"},"read"),"するためには、",Object(r.b)("inlineCode",{parentName:"p"},"close"),"でデータの区切りを宣言しないといけません。",Object(r.b)("br",{parentName:"p"}),"\n","宣言しない限り",Object(r.b)("inlineCode",{parentName:"p"},"read"),"でのデータの読み込み処理は完了しないんですね。"))}c.isMDXComponent=!0},dwav:function(e){e.exports=JSON.parse('{"data":{"site":{"siteMetadata":{"title":"jangajan.com","author":"@ta1kt0me"}}}}')}}]);
//# sourceMappingURL=component---src-pages-2014-09-03-unix-process-in-ruby-md-5a67705aa7150ad115b5.js.map