{"version":3,"sources":["webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./src/pages/2014-10-05-bower-and-rails-on-heroku.md"],"names":["Header","siteTitle","style","background","marginBottom","margin","maxWidth","padding","to","color","textDecoration","defaultProps","Layout","children","data","site","siteMetadata","title","Date","getFullYear","href","author","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"6IAIMA,EAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OACb,4BACEC,MAAO,CACLC,WAAW,QACXC,aAAa,YAGf,yBACEF,MAAO,CACLG,OAAO,SACPC,SAAU,IACVC,QAAQ,sBAGV,wBAAIL,MAAO,CAAEG,OAAQ,IACnB,kBAAC,OAAD,CACEG,GAAG,IACHN,MAAO,CACLO,MAAM,QACNC,eAAe,SAGhBT,OAWXD,EAAOW,aAAe,CACpBV,UAAU,IAGGD,Q,UCWAY,IAtCA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACVC,EAAI,OAWV,OACE,oCACE,kBAAC,EAAD,CAAQb,UAAWa,EAAKC,KAAKC,aAAaC,QAC1C,yBACEf,MAAO,CACLG,OAAO,SACPC,SAAU,IACVC,QAAQ,wBAGV,8BAAOM,GACP,sCACK,IAAIK,MAAOC,cADhB,mBAGE,uBAAGC,KAAK,4BAAR,UAHF,MAIMN,EAAKC,KAAKC,aAAaK,Y,sNCnC9B,IAAMC,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iGACA,8BACA,sBACE,kBAAIC,WAAW,MAAf,gBACA,kBAAIA,WAAW,MAAf,eACA,kBAAIA,WAAW,MAAf,cACA,kBAAIA,WAAW,MAAf,gCAEF,sEAIA,8EACA,+BAAc,+BAAGA,WAAW,KAAQ,CAChC,KAAQ,0CADE,OAAd,SAGA,qCACA,uBAAK,kCAAMA,WAAW,OAAU,IAA3B,oWAYL,sCACA,iEACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,cACb,WAAc,aACd,cAAc,IAHb,gCAML,yCACA,6CACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,wBAIL,+DACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBACb,WAAc,WACd,YAAY,IAHX,+EASL,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBACb,WAAc,aACd,cAAc,IAHb,0FAWL,kDACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,oBAIL,kCACA,2DACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,cACb,WAAc,UACd,SAAW,IAHV,sHASL,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,cACb,WAAc,WACd,UAAY,IAHX,wCAML,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,cACb,WAAc,oCACd,qCAAqC,IAHpC,0EAQL,+DACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,cACb,WAAc,gCACd,iCAAiC,IAHhC,iGAML,wCACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,cACb,WAAc,uCACd,wCAAwC,IAHvC,0CAQL,8BACA,8CACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,oDAML,qCACA,qBAAG,0BAAYA,WAAW,KAAvB,eAAH,sDAAiH,kBAAIA,WAAW,MAAhI,2DAEA,0CACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,2TAcL,8BAAa,0BAAYA,WAAW,KAAvB,iCAAb,mBACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,cACb,WAAc,gCACd,iCAAiC,IAHhC,uGAML,4FAKJJ,EAAWK,gBAAiB,G","file":"component---src-pages-2014-10-05-bower-and-rails-on-heroku-md-5f27503af3e4617a39d5.js","sourcesContent":["import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: `white`,\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `black`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n          author\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: 960,\n          padding: `0 1.0875rem 1.45rem`,\n        }}\n      >\n        <main>{children}</main>\n        <footer>\n          © {new Date().getFullYear()}, Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n          by {data.site.siteMetadata.author}\n        </footer>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jangajan.com/jangajan.com/src/components/layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`RailsアプリケーションでJavascriptプラグインの管理をgemに依存したくないなと思ったので、bowerなるものを試してみました。  `}</p>\n    <p>{`環境です。`}</p>\n    <ul>\n      <li parentName=\"ul\">{`bower 1.3.12`}</li>\n      <li parentName=\"ul\">{`rails 4.1.6`}</li>\n      <li parentName=\"ul\">{`ruby 2.1.2`}</li>\n      <li parentName=\"ul\">{`heroku-buildpack-ruby-bower`}</li>\n    </ul>\n    <p>{`今回は使いませんでしたが、bower-railsというgemの説明も最後に追記しています。`}</p>\n    {\n      /* more */\n    }\n    <h1>{`Rails + bower + heroku + heroku-buildpack-ruby-bower`}</h1>\n    <p>{`参考にしたのは`}<a parentName=\"p\" {...{\n        \"href\": \"https://gist.github.com/afeld/5704079\"\n      }}>{`こちら`}</a>{`です。  `}</p>\n    <h2>{`herokuに設定追加`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`heroku create app_name\n\nbundle exec rake secret RAILS_ENV=production\n=> 2d9dc90XXXXXXXXXXXXX...\n\n# rake secretの結果を値として設定\nheroku config:add SECRET_KEY_BASE=2d9dc90XXXXXXXXXXXXX...\n\nheroku run bundle exec rake RAILS_ENV=production db:migrate\n\nheroku config:set BUILDPACK_URL='git://github.com/qnyp/heroku-buildpack-ruby-bower.git#run-bower' \n`}</code></pre>\n    <h2>{`.gitignore修正`}</h2>\n    <p>{`bowerでコンポーネントをインストールするパスを管理対象外に設定しておきます。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\",\n        \"metastring\": \".gitignore\",\n        \".gitignore\": true\n      }}>{`/vendor/assets/components\n`}</code></pre>\n    <h2>{`bowerでコンポーネント追加`}</h2>\n    <p>{`npmでbowerをインストールします。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`npm install bower\n`}</code></pre>\n    <p>{`続いてRailsアプリケーションのルートパスでbowerの設定を追加します。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\",\n        \"metastring\": \".bowerrc\",\n        \".bowerrc\": true\n      }}>{`{\n  \"directory\": \"vendor/assets/components\",\n  \"json\": \"bower.json\"\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\",\n        \"metastring\": \"bower.json\",\n        \"bower.json\": true\n      }}>{`{\n  \"name\": \"my application\",\n  \"dependencies\": {\n    \"moment\": \"latest\"\n  }\n}\n`}</code></pre>\n    <p>{`依存関係のあるコンポーネントをインストールします。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`bower install\n`}</code></pre>\n    <h2>{`Railsの設定`}</h2>\n    <p>{`お好みでGemファイル追加(このあたりはbowerと関係ないですね)`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\",\n        \"metastring\": \"Gemfile\",\n        \"Gemfile\": true\n      }}>{`# このあたりはお好みで\ngem 'unicorn', '~> 4.8.3'\ngem 'pg', group: :production\ngem 'rails_12factor', group: :production\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\",\n        \"metastring\": \"Procfile\",\n        \"Procfile\": true\n      }}>{`web: bundle exec unicorn -p $PORT\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\",\n        \"metastring\": \"config/environments/production.rb\",\n        \"config/environments/production.rb\": true\n      }}>{`Rails.application.configure do\n  config.assets.compile = true\nend\n`}</code></pre>\n    <p>{`bowerでインストールしたコンポーネントをassetsのパスに追加します。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\",\n        \"metastring\": \"config/initializers/assets.rb\",\n        \"config/initializers/assets.rb\": true\n      }}>{`Rails.application.config.assets.paths << Rails.root.join('vendor', 'assets', 'components')\n`}</code></pre>\n    <h2>{`コンポーネントの読み込み設定`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\",\n        \"metastring\": \"app/assets/javascript/application.js\",\n        \"app/assets/javascript/application.js\": true\n      }}>{`...\n//= require moment/moment\n...\n`}</code></pre>\n    <h2>{`公開設定`}</h2>\n    <p>{`最後に修正をherokuにpushします。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`git add .\ngit commit\ngit push heroku master\n`}</code></pre>\n    <h1>{`bower-rails`}</h1>\n    <p><inlineCode parentName=\"p\">{`bower-rails`}</inlineCode>{`というgemがあったのですが、herokuへのデプロイのところで色々はまったので、今回は見送りました。`}<br parentName=\"p\"></br>{`\n`}{`ローカルで試す分にはこのGemは非常に使いやすかったので、環境によっては導入すると良さそうです。  `}</p>\n    <p>{`こちらの基本的な使い方は以下です。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`# Bowerfile作成\n# rails g bower_rails:initialize json とすることで、bower.jsonを作成することも可能\nbundle exec rails g bower_rails:initialize\n=> アプリケーションルートに、Bowerfileが作成される\n\n# Bowerfileの編集\necho \"asset 'moment'\" >> Bowerjson\n\n# 依存関係の解決\nbundle exec rake bower:install\n=> vnedor/assets/bower_componentsにコンポーネントをインストール\n`}</code></pre>\n    <p>{`上記に加え、`}<inlineCode parentName=\"p\">{`config/initializers/assets.rb`}</inlineCode>{`を修正することで利用できます。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\",\n        \"metastring\": \"config/initializers/assets.rb\",\n        \"config/initializers/assets.rb\": true\n      }}>{`Rails.application.config.assets.paths << Rails.root.join('vendor', 'assets', 'bower_components')\n`}</code></pre>\n    <p>{`BowerfileがGemfileのように簡単な形式で書けて、bower.jsonを動的に生成してくれるので、使いやすいですね。  `}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}