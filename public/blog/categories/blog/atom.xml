<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Blog | JanGaJan.com]]></title>
  <link href="http://jangajan.com/blog/categories/blog/atom.xml" rel="self"/>
  <link href="http://jangajan.com/"/>
  <updated>2015-01-22T00:29:54+09:00</updated>
  <id>http://jangajan.com/</id>
  <author>
    <name><![CDATA[talkto_me]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[独自ドメイン設定]]></title>
    <link href="http://jangajan.com/blog/2014/05/08/get-original-domain/"/>
    <updated>2014-05-08T00:00:00+09:00</updated>
    <id>http://jangajan.com/blog/2014/05/08/get-original-domain</id>
    <content type="html"><![CDATA[<h1>独自ドメイン設定の道程</h1>

<p>せっかくなので独自ドメインでも設定してみよう。<br/>
そうすれば否が応でも書かずにはいられないはず。<br/>
有料だもの。現金な人間です。</p>

<p>手順としてはこんな感じでした。</p>

<!-- more -->


<ol>
<li>独自ドメイン取得(お名前.com)</li>
<li>cloudflareで独自ドメインとherokuを紐付け</li>
<li>herokuに独自ドメイン設定</li>
<li>おまけ:google analyticsの設定</li>
</ol>


<hr />

<h1>独自ドメイン取得</h1>

<p>お名前.comで独自ドメイン購入。<br/>
最近は.tokyoやら.redやらあるんですね。<br/>
.comにしました。<br/>
あらかじめ候補探しておきましょう。<br/>
大体は使われています。
悩んでいると日が暮れます。</p>

<hr />

<h1>cloudflare独自ドメインとheroku連携</h1>

<p>wwwつけると入力手間だな〜っていう理由でルートドメインはしたくない。<br/>
たまたま<a href="http://blog.jnito.com/entry/2014/05/04/090537">こちらの記事</a>を見かけまして。<br/>
cloudflareを利用することにしました。<br/>
用途はブログを公開するだけだし、SSL利用するまでもなかったので無料プランで試してみました。<br/>
使い切れてないですが、設定だけでもできたの良し。目的達成。<br/>
設定完了後、whoisコマンドのName Serverの値がcloudflare用に変わります。<br/>
反映されるのに待ちます。</p>

<hr />

<h1>herokuに独自ドメイン設定</h1>

<p>herokuアプリのSettingsのDomainsに独自ドメインを追加。<br/>
これしないと、herokuの404画面が出てくる。</p>

<hr />

<h1>google analyticsの設定</h1>

<p>トラッキング情報のトラッキングコードを<em>google-analytics.htmlにコピペ。<br/>
</em>config.ymlを以下の通り変更
<code>yaml
  analytics:
+    google: false
+    google: true</code></p>

<p>夜明けに寝て夕暮れ時に目覚めても反映されてませんでした。<br/>
気長に待ちましょう。</p>

<p>どれも長い。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jekyllでブログを作ってみた]]></title>
    <link href="http://jangajan.com/blog/2014/04/20/setup-jekyll-blog/"/>
    <updated>2014-04-20T00:00:00+09:00</updated>
    <id>http://jangajan.com/blog/2014/04/20/setup-jekyll-blog</id>
    <content type="html"><![CDATA[<p>JekyllとHerokuを使ってBlogを作成しました。<br/>
サーバーにはUnicornを利用します。<br/>
githubはprivate repositoryが有料なので、bitbucketを使用。<br/>
せっかくなのでCIツールとして、werckerをお試しで。<br/>
よくよく考えるとHeroku使うんならどっちも要らないがさておき。</p>

<!-- more -->


<hr />

<h1>事前準備</h1>

<h2>アカウント作成</h2>

<ol>
<li>heroku</li>
<li>bitbucket(ついでにrepositoryも作成)</li>
<li>wercker</li>
</ol>


<h1>jekyllインストール</h1>

<p>jekyllのgemをインストールします。<br/>
テンプレートとして、<a href="https://github.com/kippt/jekyll-incorporated.git">jekyll-incorporated</a>を使ってみます。<br/>
なかなかいい感じにデザインしてくれる。</p>

<p>{% highlight bash %}</p>

<blockquote><p>gem install jekyll
git clone <a href="https://github.com/kippt/jekyll-incorporated.git">https://github.com/kippt/jekyll-incorporated.git</a> blog
cd blog
git branch myblog
git checkout myblog
{% endhighlight %}</p></blockquote>

<hr />

<h1>環境設定</h1>

<p>環境用のファイルを作成。<br/>
heroku、wercker用の設定ファイルと、jekyllのmarkdownの設定をします。</p>

<p>{% highlight text %}
blog
├── Gemfile      # 必要なGemを追加
├── Gemfile.lock
├── Procfile     # heroku用
├── _config.yml
├── config.ru    # heroku用
├── unicorn.rb   # heroku用
&hellip;
└── wercker.yml  # wercker用{% endhighlight %}</p>

<h2>Gemfile</h2>

<p>{% highlight ruby %}
+ gem &lsquo;rack-jekyll&rsquo;
+ gem &lsquo;unicorn&rsquo;{% endhighlight %}</p>

<h2>Procfile</h2>

<p>{% highlight ruby %}
+ web: bundle exec unicorn -p $PORT -c ./unicorn.rb{% endhighlight %}</p>

<h2>_config.yml</h2>

<pre><code class="yaml">- exclude:     []
+ exclude:     ["vendor"]
- markdown:      maruku
+ markdown:      redcarpet
+ redcarpet:
+     extensions: ["no_intra_emphasis"
+                  ,"fenced_code_blocks"
+                  ,"autolink"
+                  ,"tables"
+                  ,"with_toc_data"]
</code></pre>

<h2>config.ru</h2>

<pre><code class="ruby">+ require "bundler/setup"
+ Bundler.require(:default)
+ run Rack::Jekyll.new(:destination =&gt; '_site')
</code></pre>

<h2>unicorn.rb</h2>

<pre><code class="ruby">+ worker_processes 1
+ timeout 30
+ preload_app true
</code></pre>

<h2>wercker.yml</h2>

<p>indentは半角スペース2つじゃないと怒られる。<br/>
<a href="http://devcenter.wercker.com/articles/werckeryml/validate.html">ここ</a>でフォーマットのチェックができて便利ですね。</p>

<p>{% highlight yaml %}
+ box: wercker/ruby
+ build:
+   steps:
+     - bundle-install
+     - script:
+         name: echo ruby information
+         code: |
+             echo &ldquo;ruby version $(ruby &ndash;version) running!&rdquo;
+             echo &ldquo;from location $(which ruby)&rdquo;
+             echo -p &ldquo;gem list: $(gem list)&rdquo;
+ deploy:
+   steps:
+   - heroku-deploy{% endhighlight %}</p>

<hr />

<h1>Remote Repositoryにpush</h1>

<p>ここまでの設定を保存します。
実際はちまちまコミットしちゃいました。<br/>
ついでにherokuでアプリ作成。</p>

<p>{% highlight bash %}</p>

<blockquote><p>bundle install
git remote add bitbucket git@bitbucket.org:xxxx/jekyllblog.git
git add .
git commit -m &lsquo;initial commit for myblog&rsquo;</p>

<h1>bitbucketにpush</h1>

<p>git push bitbucket myblog</p>

<h1>herokuに専用アプリ作成</h1>

<p>heroku create myblog{% endhighlight %}</p></blockquote>

<p>ちなみに、ここでherokuにpushして、<code>heroku open</code>すれば確認できる。<br/>
やっぱりこっちの方が楽なんじゃ&hellip;</p>

<hr />

<h1>wercker</h1>

<p>いよいよwercker試してみます。</p>

<h2>Add App</h2>

<p>ここでは作業対象となるリポジトリを設定します。<br/>
(<a href="https://app.wercker.com/#applications/create">ADD APPLICATION</a>)</p>

<h3>Choose a Git provider</h3>

<p><em>bitbucket</em>を選択</p>

<h3>Select a repository</h3>

<p>pushしたbranchを選択</p>

<h3>Add werckerbot</h3>

<p><em>read</em>権限だけつけて許可する</p>

<h3>Setup your wercker.yml</h3>

<p>準備済み！</p>

<h2>My Apps</h2>

<p>Add Appで登録したAppsを選択します。</p>

<h3>Settings</h3>

<p><em>Deploy targets</em>でHeroku APIキーの登録します。<br/>
<em>Deploy target name</em>にheroku createしたアプリ名を設定します。</p>

<h3>Builds</h3>

<p>Build Passが通ったら、<em>Deploy to</em>から<strong>Settings</strong>に設定したアプリ名を選択します。</p>

<hr />

<h1>動作確認</h1>

<p>成功していればDeploysのデプロイ結果のURLからアクセス可能です。
(あるいは<code>heroku open</code>)</p>
]]></content>
  </entry>
  
</feed>
