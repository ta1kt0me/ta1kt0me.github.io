<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | JanGaJan.com]]></title>
  <link href="http://jangajan.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://jangajan.com/"/>
  <updated>2014-10-28T06:35:51+09:00</updated>
  <id>http://jangajan.com/</id>
  <author>
    <name><![CDATA[talkto_me]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rubyでメソッドを定義しているクラスを調べたい]]></title>
    <link href="http://jangajan.com/blog/2014/10/28/which-of-the-class-dose-have-the-method/"/>
    <updated>2014-10-28T05:55:25+09:00</updated>
    <id>http://jangajan.com/blog/2014/10/28/which-of-the-class-dose-have-the-method</id>
    <content type="html"><![CDATA[<p>メソッドを定義していくクラスを探る方法です。</p>

<!-- more -->


<h1>定義しているClassを知りたい</h1>

<p>クラス名だけを知りたいのであれば<code>Method#owner</code>を利用します。</p>

<pre><code class="rb"># singleton method
String.method(:try_convert).owner
=&gt; #&lt;Class:String&gt;

# instance method
"s".method(:method_missing).owner
=&gt; BasicObject
</code></pre>

<h1>もうちょっと詳しい情報が知りたい</h1>

<p><code>Method#inspect</code>を使うともう少し詳しい情報を取得できます。
といってもそんなに大きく変わりません。</p>

<pre><code class="rb"># singleton method
String.method(:try_convert).inspect
=&gt; "#&lt;Method: String.try_convert&gt;"

# instance method
"s".method(:method_missing).inspect
=&gt; "#&lt;Method: String(BasicObject)#method_missing&gt;"
</code></pre>

<p>当たり前の話ですが、特異メソッド(クラスメソッド、singleton method)は継承されないですね。
どいうことかというと、DateTimeクラスでは、Dateクラスの得意メソッドを呼び出せない、ということに気付かされました。
クラスメソッドに対してownerとかするの意味ねぇ。</p>

<h1>定義している場所を知りたい</h1>

<p>1.9以降(1.9.3?)では<code>Method#source_location</code>というメソッドで、メソッドの定義された具体的な場所の情報が分かります。
ただし、取得できるのはrubyで定義されたものに限るようです。
(ネイティブで定義されているメソッドの場合nilになる)</p>

<pre><code class="rb"># singleton method
ActiveRecord::Base.method(:where).source_location
=&gt; ["#{APP_ROOT}/vendor/bundle/ruby/2.0.0/gems/activerecord-4.0.2/lib/active_record/querying.rb", 7]

# instance method
"".method(:blank?).source_location
=&gt; ["#{APP_ROOT}/vendor/bundle/ruby/2.0.0/gems/activesupport-4.0.2/lib/active_support/core_ext/object/blank.rb", 92]

# ネイティブで定義されたメソッドはnilを返す
"s".method(:method_missing).source_location
=&gt; nil
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[メモ : Array#each_with_objectの簡単な使い方]]></title>
    <link href="http://jangajan.com/blog/2014/10/27/each-with-object-memo/"/>
    <updated>2014-10-27T18:50:07+09:00</updated>
    <id>http://jangajan.com/blog/2014/10/27/each-with-object-memo</id>
    <content type="html"><![CDATA[<p>each_with_objectの簡単な使い方。
使い方は気をつけないといけないですね。</p>

<!-- more -->


<pre><code class="rb">[1,2,3].each_with_object(n=[]){|v| n &lt;&lt; v + 5}
=&gt; [6, 7, 8]
# nを初期化しないで処理
[1,2,3].each_with_object(n){|v| n &lt;&lt; v + 5}
=&gt; [6, 7, 8, 6, 7, 8]
[1,2,3].each_with_object(n){|v| n &lt;&lt; v + 5}
=&gt; [6, 7, 8, 6, 7, 8, 6, 7, 8]
# nをeach_with_objectで初期化
[1,2,3].each_with_object(n=[]){|v| n &lt;&lt; v + 5}
=&gt; [6, 7, 8]
# nをeach_with_objectの前に宣言
n = [10]
=&gt; [10]
[1,2,3].each_with_object(n){|v| n &lt;&lt; v + 5}
=&gt; [10, 6, 7, 8]
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyのThreadを利用したWebサーバーを作る]]></title>
    <link href="http://jangajan.com/blog/2014/09/07/unix-thread-socket-server-in-ruby/"/>
    <updated>2014-09-07T03:15:15+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/07/unix-thread-socket-server-in-ruby</id>
    <content type="html"><![CDATA[<p>積読消化シリーズの派生です。<br/>
<a href="http://tatsu-zine.com/books/naruhounix">なるほどUnixプロセス ― Rubyで学ぶUnixの基礎</a><br/>
processをforkして動くWebサーバーをThreadで試してみます。</p>

<!-- more -->


<h1>Threadの簡単な使い方</h1>

<p>まずはThreadの簡単な使い方です。<br/>
一部違いはあるものの、書き方はProcessのfork処理と大きく差はありませんね。</p>

<pre><code class="rb">t1 = Thread.start {
   puts "スレッド1 id : #{Thread.current}"
   sleep 1
}

# t1が終わるまではメインスレッドが待ちになる
t1.join
puts "メインスレッド id : #{Thread.current}"
</code></pre>

<ul>
<li>Thread.start{&hellip;}とすると、新しいThreadを生成してブロックを実行します。</li>
<li>メインスレッドが終了すると、Threadも終了します。</li>
<li>Thread#joinを実行すると、対象のThreadの処理が終了するまで待ちます。</li>
</ul>


<p>ちなみに、Threadはメインスレッドと同じProcessで実行されます。<br/>
そのため、<code>ps</code>でrubyのプロセスを確認すると一つしかありません。</p>

<h1>Threadローカルな変数</h1>

<p>処理プロセスが同じということは、Thread内の処理で変数は共有されることになりますね。<br/>
Threadローカルにするためには、Thread.startの引数に渡します。</p>

<pre><code class="rb">access_count = 0
t1 = Thread.start(access_count) {|ac|
   puts "スレッド1 id : #{Thread.current} #{ac += 1}" =&gt; 1
   sleep 1
}
t1.join
puts "メインスレッド id : #{Thread.current} #{access_count += 1}" =&gt; 1
</code></pre>

<h1>複数Threadを待ちたい</h1>

<p>Thread#joinは特定のThreadを待ちます。<br/>
Webサーバーの例では複数のProcessを管理していました。<br/>
同様のことをThreadで実行するには、<code>ThreadsWait</code>を使います。</p>

<pre><code class="rb">require 'thwait'
worker_threads = []
5.times {
  worker_threads &lt;&lt; Thread.start {
     puts "スレッド1 id : #{Thread.current} "
     sleep 1
  }
}
# ThreadsWait.all_waitsで全てのThreadの処理終了を待つ
ThreadsWait.all_waits(worker_threads)
puts "メインスレッド id : #{Thread.current} #{access_count += 1}" =&gt; 1
</code></pre>

<h1>複数Threadでリクエストを処理するWebサーバー</h1>

<p>それでは上記を踏まえて、複数Threadで処理するWebサーバーを書いてみます。</p>

<pre><code class="rb">#!/usr/bin/env ruby

require 'socket'
require 'time'
require 'thwait'

socket = TCPServer.open '127.0.0.1', 8080

access_count = 0

worker_threads = []
5.times {
  # access_countはThreadローカルにする
  worker_threads &lt;&lt; Thread.start(access_count){|ac|
    # threadの処理
    loop {
      response_body = "Hello Browser! #{ac += 1}"
      connection = socket.accept
      connection.puts ['HTTP/1.1 200 OK',
                     "Date: #{Time.now.httpdate}",
                     'Server: Ruby',
                     'Content-Type: text/html; charset=utf-8',
                     "Content-Length: #{response_body.length}\r\n\r\n"].join("\r\n")
      connection.puts response_body
      connection.close
    }
  }
}

# メインスレッドを待ちにする
ThreadsWait.all_waits(worker_threads)
</code></pre>

<p>実際のところ、<code>socket</code>を複数Threadで共有した場合どうなるか、とかは調査する必要がありますね。<br/>
ただ、Threadで置き換えることもできたということで。<br/>
これでも一応動きます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyのProcessを利用したWebサーバーを作る]]></title>
    <link href="http://jangajan.com/blog/2014/09/05/unix-process-socket-server-in-ruby/"/>
    <updated>2014-09-05T19:08:20+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/05/unix-process-socket-server-in-ruby</id>
    <content type="html"><![CDATA[<p>積読消化シリーズです。<br/>
<a href="http://tatsu-zine.com/books/naruhounix">なるほどUnixプロセス ― Rubyで学ぶUnixの基礎</a><br/>
簡単なWebサーバーを作ります。</p>

<ul>
<li>telnetでアクセスするWebサーバー</li>
<li>ブラウザでアクセスするWebサーバー</li>
<li>forkしたProcessでリクエストを処理するWebサーバー</li>
</ul>


<!-- more -->


<h1>telnetでアクセスするWebサーバー</h1>

<p>まずはtelnetでアクセスするためのシンプルなWebサーバーを用意します。</p>

<pre><code class="rb">#!/usr/bin/env ruby

require 'socket'

# 127.0.0.1(localhost)で8080ポートで立ち上げる
socket = TCPServer.open '127.0.0.1', 8080

loop {
  connection = socket.accept
  connection.puts 'Hello Readers!'
  connection.close
}
</code></pre>

<p>サーバーを起動し、ターミナルを立ち上げて、telnetでアクセスしてみます。</p>

<pre><code class="sh">telnet 127.0.0.1 8080
=&gt; Hello Readers!
</code></pre>

<p>ただし、このままだとブラウザで<code>http://127.0.0.1:8080</code>にアクセスできません。<br/>
次はブラウザでアクセスできるように修正します。</p>

<h1>ブラウザでアクセスするWebサーバー</h1>

<pre><code class="rb">#!/usr/bin/env ruby

require 'socket'
require 'time'

socket = TCPServer.open '127.0.0.1', 8080

loop {
  connection = socket.accept
  # response headerを設定
  connection.puts ['HTTP/1.1 200 OK',
                   "Date: #{Time.now.httpdate}",
                   'Server: Ruby',
                   'Content-Type: text/html; charset=utf-8',
                   "Content-Length: #{response_body.length}\r\n\r\n"].join("\r\n")
  # response bodyを設定
  connection.puts 'Hello Readers!'
  connection.close
}
</code></pre>

<p>レスポンスのヘッダー情報を追加しました。<br/>
ヘッダーとボディは改行<code>\r\n</code>で区切ります。</p>

<p>これでブラウザでアクセスできるようになりました。</p>

<h1>forkしたProcessでリクエストを処理するWebサーバー</h1>

<p>続いては、アクセスを子プロセスで処理するように変更します。</p>

<pre><code class="rb">#!/usr/bin/env ruby                           
require 'socket'
require 'time'

socket = TCPServer.open '127.0.0.1', 8080

worker_pid = fork do
  # 子プロセスで処理
  loop {
    response_body = 'Hello Browser!'
    connection = socket.accept
    connection.puts ['HTTP/1.1 200 OK',
                   "Date: #{Time.now.httpdate}",
                   'Server: Ruby',
                   'Content-Type: text/html; charset=utf-8',
                   "Content-Length: #{response_body.length}\r\n\r\n"].join("\r\n")
    connection.puts response_body
    connection.close
  }
end

# Signalを受け取ったらprocessをkillする
[:INT, :QUIT].each do |signal|
  Signal.trap(signal) {
    Process.kill(signal, worker_pid)
  }
end

# 親プロセスの処理を待ちにする
Process.waitpid worker_pid
</code></pre>

<p>forkで子プロセスを生成し、リクエストを子プロセスで処理しています。<br/>
親プロセスは子プロセスが処理が完了するまでwaitします。<br/>
(子プロセスはloop処理を行っているため、シグナルを受け取るまでは生き続けます)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UnixのSocketをRubyで扱う]]></title>
    <link href="http://jangajan.com/blog/2014/09/04/unix-process-socket-in-ruby/"/>
    <updated>2014-09-04T03:20:37+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/04/unix-process-socket-in-ruby</id>
    <content type="html"><![CDATA[<p>積読消化シリーズです。<br/>
<a href="http://tatsu-zine.com/books/naruhounix">なるほどUnixプロセス ― Rubyで学ぶUnixの基礎</a><br/>
プロセス間通信を、昨日はpipe、今日はUnixソケットのところです。</p>

<!-- more -->


<h1>Rubyのプロセス間通信でメッセージ（データグラム）を使う</h1>

<p>データの通信にストリームではなく、メッセージ（データグラム）を利用したい場合、UNIXソケットを使います。</p>

<h2>メッセージ</h2>

<p>昨日の最後にも載せた記事に説明があります。<br/>
メッセージを利用する場合は、１通信が１メッセージとなるため、データのデリミタが不要です。<br/>
(close処理が不要になる)</p>

<p><a href="http://slashdot.jp/journal/160355/TCP%E3%81%A8UDP%E3%81%AE%E9%81%95%E3%81%84">gatekeeperの日記： TCPとUDPの違い</a></p>

<blockquote><p>ところがデータグラム型ではメッセージ単位なのでメッセージの境界が保存されていて、
読み込みと書き込みは常にペアでなければいけない。</p></blockquote>

<p>なお、パイプでは、メッセージは使えません。</p>

<h2>Unixソケット</h2>

<p>Unixソケットは、ソケットを利用したプロセス間通信の方法の一つです。<br/>
メッセージを利用するためにはパイプではなく、Unixソケットでないといけません。<br/>
pipeではできなかったデータの双方向の通信ができます。</p>

<h2>サンプル</h2>

<pre><code class="rb">require 'socket'

# :DGRAMはメッセージ（データグラム）の利用を宣言
child_socket, parent_socket = Socket.pair(:UNIX, :DGRAM, 0)
maxlen = 1000 # メッセージのMaxサイズ
fork do
  # 子プロセスで使用しないsocketを閉じる
  parent_socket.close
  # 対となるSocketからのメッセージの通知を待つ
  instruction = child_socket.recv(maxlen)
  # 対となるSocketへメッセージ送信
  child_socket.send("#{instruction} accomplished!", 0)  
end

# 親プロセスで使用しないsocketを閉じる
child_socket.close
# 対となるSocketへメッセージ送信
parent_socket.send("Heavy lifting", 0)
# 対となるSocketからのメッセージの通知を待って表示する
$stdout.puts parent_socket.recv(maxlen)
# =&gt;Parent_Socket accomplished!
</code></pre>

<p><code>child_socket</code>と<code>parent_socket</code>でそれぞれ、メッセージをやり取りしています。</p>
]]></content>
  </entry>
  
</feed>
