<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby-on-rails | JanGaJan.com]]></title>
  <link href="http://jangajan.com/blog/categories/ruby-on-rails/atom.xml" rel="self"/>
  <link href="http://jangajan.com/"/>
  <updated>2015-03-07T01:18:19+09:00</updated>
  <id>http://jangajan.com/</id>
  <author>
    <name><![CDATA[talkto_me]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[STIを試す]]></title>
    <link href="http://jangajan.com/blog/2015/03/06/try-sti/"/>
    <updated>2015-03-06T05:43:15+09:00</updated>
    <id>http://jangajan.com/blog/2015/03/06/try-sti</id>
    <content type="html"><![CDATA[<h1>Single Table Inheritance(STI)とは</h1>

<p>単一テーブル継承というデザインパターンです。テーブルベースの継承階層を表現しています。Ruby同様、継承元は一つのテーブルだけです。<br/>
<a href="http://www.martinfowler.com/eaaCatalog/singleTableInheritance.html">こちら</a>に具体的なイメージがあります。<br/>
早速RailsでSTIをどうやるのか調べてみます。</p>

<!-- more -->


<h1>環境</h1>

<table>
<thead>
<tr>
<th style="text-align:left;">tool</th>
<th style="text-align:right;">version</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">ruby</td>
<td style="text-align:right;">2.2.0</td>
</tr>
<tr>
<td style="text-align:left;">rails</td>
<td style="text-align:right;">4.2.0</td>
</tr>
</tbody>
</table>


<h1>試す</h1>

<p>まずは準備をします。</p>

<pre><code class="sh">$ bundle exec rails new sti_type --no-test-framework --skip-bundle
$ bundle exec rails g model user name:string age:integer type:string
$ bundle exec rake db:migrate
</code></pre>

<p>RailsでのSTIではmodelの <code>type</code> というカラムが重要な役割を果たします。</p>

<pre><code class="rb app/models/guest.rb">class Guest &lt; User; end
</code></pre>

<pre><code class="rb app/models/host.rb">class Host &lt; User; end
</code></pre>

<p>継承ツリーとしてはこんな感じになります。</p>

<pre><code>ActiveRecord::Base
        |
       User
   _____|_____
  |           |
Guest        Host
</code></pre>

<p>これで一通りの準備が整いました。 <code>rails console</code> で動作を確認してみます。</p>

<pre><code class="rb">$ bundle exec rails c
&gt; Guest.create(name: 'Mark', age: 18)
&gt; Host.create(name: 'Yamada', age: 50)

&gt; pp User.all
[#&lt;Guest:0x007f84c1279a00
  id: 1,
  name: "Mark",
  age: 18,
  type: "Guest",
  created_at: Thu, 05 Mar 2015 19:43:24 UTC +00:00,
  updated_at: Thu, 05 Mar 2015 19:43:24 UTC +00:00&gt;,
 #&lt;Host:0x007f84c1279870
  id: 2,
  name: "Yamada",
  age: 50,
  type: "Host",
  created_at: Thu, 05 Mar 2015 19:44:02 UTC +00:00,
  updated_at: Thu, 05 Mar 2015 19:44:02 UTC +00:00&gt;]

&gt; pp Guest.all
[#&lt;Guest:0x007f84c2b54b10
  id: 1,
  name: "Mark",
  age: 18,
  type: "Guest",
  created_at: Thu, 05 Mar 2015 19:43:24 UTC +00:00,
  updated_at: Thu, 05 Mar 2015 19:43:24 UTC +00:00&gt;]
</code></pre>

<p><code>type</code> に、自分のクラス名がGuestだったら&#8217;Guest&#8217;と入ります。 <code>Guest</code> だけの属性を集めたい場合は <code>Guest.all</code> とすることで取得できます。</p>

<h1><code>type</code>以外のカラムにクラス情報を格納したい</h1>

<p>なにがしかの理由で <code>type</code> は使えない場合、 <code>self.inheritance_column</code> を使うことで、別のカラムをクラス名を格納するカラムに指定することができます。
例えば、 <code>role</code> というカラムを使いたい場合です。</p>

<h2>準備</h2>

<p>汚いですが前のサンプルをそのまま使います。<br/>
<code>role</code>というカラムを追加します。</p>

<pre><code>$ bundle exec rails g migration AddRoleToUser
</code></pre>

<pre><code class="rb db/migrate/20150305201347_add_role_to_user.rb">class AddRoleToUser &lt; ActiveRecord::Migration
  def change
    add_column :users, :role, :string
  end
end
</code></pre>

<p>データを綺麗にしたいのでDB作り直します。
<code>sh
$ bundle exec rake db:setup
$ bundle exec rake db:migrate
</code></p>

<p>大事なのはここだけです。 <code>self.inheritance_column</code> に <code>role</code> を指定します。</p>

<pre><code class="rb app/models/user.rb">class User &lt; ActiveRecord::Base
  self.inheritance_column = :role
end
</code></pre>

<h2>確認</h2>

<pre><code class="rb ">&gt; Guest.create(name: 'Bob', age: 1000)
&gt; Host.create(name: 'Tanaka', age: 100)
&gt; pp User.all
[#&lt;Guest:0x007fe248c19c60
  id: 3,
  name: "Bob",
  age: 1000,
  type: nil,
  created_at: Thu, 05 Mar 2015 20:23:55 UTC +00:00,
  updated_at: Thu, 05 Mar 2015 20:23:55 UTC +00:00,
  role: "Guest"&gt;,
 #&lt;Host:0x007fe248c19ad0
  id: 4,
  name: "Tanaka",
  age: 100,
  type: nil,
  created_at: Thu, 05 Mar 2015 20:24:10 UTC +00:00,
  updated_at: Thu, 05 Mar 2015 20:24:10 UTC +00:00,
  role: "Host"&gt;]
</code></pre>

<p><code>type</code> ではなく、 <code>role</code> を使用していることが確認できました。</p>

<h1>注意点</h1>

<p>注意しなければいけなそうな点は、こんな感じでしょうか。</p>

<ul>
<li>子クラス(<code>Guest</code> や <code>Host</code>)ごとに特別のカラムが欲しい場合、 <code>users</code> に追加する必要があり、<code>nil</code>を許容しなければいけない

<ul>
<li><code>Guest</code> で使うが <code>Host</code> では使用しないケースがあるから</li>
</ul>
</li>
<li>子クラスごとに、カラムの型を変えることはできない</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gem Reading - Dotenv]]></title>
    <link href="http://jangajan.com/blog/2015/02/16/gem-reading-dotenv/"/>
    <updated>2015-02-16T17:27:40+09:00</updated>
    <id>http://jangajan.com/blog/2015/02/16/gem-reading-dotenv</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/bkeepers/dotenv">dotenv</a>というGemを知ったので覗いてみました。</p>

<!-- more -->


<h1>about dotevn</h1>

<p>読む前にどんなものか簡単に確認。</p>

<h2>これなに？</h2>

<p>環境変数 ENV をファイル管理できるGemです。<a href="http://qiita.com/closer/items/f8d8ba00ae86d7051764">こちら</a>の記事が参考になりました。</p>

<h2>どう使うの？</h2>

<pre><code class="rb Gemfile"># 後でbundle install
gem 'dotenv'
</code></pre>

<p>デフォルトでは<code>.env</code>というファイルの中に、
<code>yml .env
HOGE=1
FUGA=2
</code>
と書いて、<code>.env</code>を読み込むための命令 <code>Dotenv.load</code> を実行すると、 <code>ENV['HOGE']</code> が <code>1</code> を返すようになります。環境変数をわざわざexportコマンドを使ったり、<code>.zshrc</code>といった設定ファイルに書かなくても使えるようになります。<br/>
fixtureを見た感じ<code>=</code>じゃなくて、YAMLっぽく<code>:</code>も使えそう。</p>

<h1>読んでみる</h1>

<h2>2つのGem</h2>

<p>このGemからは2つのGemを利用できます。</p>

<pre><code class="ruby Gemfile">source 'https://rubygems.org'
gemspec :name =&gt; 'dotenv'
gemspec :name =&gt; 'dotenv-rails'
</code></pre>

<p>gemspecファイルも2つあった。<br/>
<code>dotenv</code>というGemはこの機能のベース部分。<code>dotenv-rails</code>というGemは、Railsを利用するときに、<code>dotenv</code>を自動で有効にしてくれるラッパーです。それと、このGemにはCLIのスクリプトも包含しています。</p>

<h2>dotenv.rb</h2>

<p>ここが外部から呼び出すインターフェースのメソッド(load, load!, overload)を定義しています。<code>module Dotenv extend self</code>として、これらをmoduleの特異メソッドにしています。<br/>
環境変数を定義するファイルをこのメソッドの引数として渡せばいいが、引数なしの場合は <code>.env</code> がデフォルト値となります。</p>

<p>まだ分かっていないのですが、 <code>instrument</code> というメソッドは、 <code>Active Support Instrumentation</code> という機能を使っている。  この機能はRails限定。</p>

<p><code>reduce</code>が使われているんだけど、<code>inject</code> とどう使い分けするのかなって疑問に思ったら<a href="http://magazine.rubyist.net/?0038-MapAndCollect#l4">こんな記事</a>がありました。smalltalkとlispの考え方の違いか〜&hellip;実際にはaliasだから使う人の好みが出そう。</p>

<h2>environment.rb</h2>

<p><code>Dotenv::Environment</code>は<code>Hash</code>の子クラス。<code>.env</code>内のkey,value情報を自身に格納して、<code>apply</code> or <code>apply!</code> を呼び出すことで<code>ENV</code>に設定している。<code>apply</code>メソッドの呼び出しは、<code>dotenv.rb</code>で行っている。<code>Dotenv::Environment</code>の<code>initialize</code>の一部として<code>.env</code>の読み込みとパースをやってる。</p>

<h2>parse.rb</h2>

<p>大事なのは<code>call</code>メソッド。ここで<code>.env</code>の内容がパースされる。正規表現弱いんでこのあたりは宿題&hellip;orz<br/>
<code>@@substitutions</code>というクラス変数があるんだけどここには<code>Substitutions</code>のnamespaceにあるクラスの配列が入ってる。<code>.env</code>のvalueに設定できるものとして、</p>

<ol>
<li>コマンドの出力結果</li>
<li>変数展開</li>
</ol>


<p>がある。
1 は <code>Dotenv::Substitutions::Command</code>で処理し、2 は<code>Dotenv::Substitutions::Variable</code>で処理する。  あー、実際にはそうなるように値を設定しているのかな？</p>

<p>Substitutions.constants のところでクラス名が定数だということがわかった。</p>

<h2>rails.rb</h2>

<p>デフォルトでは、<code>before_configuration</code>のときに、<code>.env</code>を読み込む。<code>dotenv</code>と違い、ファイル名は<code>.env.local</code>,<code>.env.#{Rails.env}</code>もデフォルトで読み込み対象となる。</p>

<p>それと、上述の<code>Active Support Instrumentation</code>をspringによるファイル変更時のENV再設定に利用しているっぽい。この通知の仕組み？をもうちょっと掘り下げてみようかな。</p>

<h1>終わりに</h1>

<p>英語が堪能は方は<a href="http://blog.mah-lab.com/2014/08/15/dotenv/">こちら</a>が参考になるかも。全然内容が頭の中に入ってこなかったのでもっとリスニング練習しよう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsのexists?とfind_byはどっちが早いのか]]></title>
    <link href="http://jangajan.com/blog/2014/11/10/exists-or-find-by-in-rails/"/>
    <updated>2014-11-10T16:01:44+09:00</updated>
    <id>http://jangajan.com/blog/2014/11/10/exists-or-find-by-in-rails</id>
    <content type="html"><![CDATA[<p>Railsで特定するレコードが存在するかbooleanで取得したい時、</p>

<ol>
<li>Table.exists?(a: id)</li>
<li>!!Table.find_by(a: id)</li>
</ol>


<p>いずれのやり方のほうが処理が早いか計測してみました。</p>

<!-- more -->


<h1>ケース</h1>

<p>環境は、<code>Rails 4.1.7</code>と<code>ruby 2.1.4</code>です。</p>

<ul>
<li>1万件のレコードがあるVoteテーブルに対して、voting_user_idを検索条件に指定して該当するレコードがあるか確認する。</li>
<li>Vote.voting_user_idにはIndexをつける</li>
<li>1万回問い合わせした時間で比較</li>
</ul>


<p>1の場合、<code>Vote.exists?(voting_user_id: 1098)</code><br/>
2の場合、<code>!!Vote.find_by(voting_user_id: 1098)</code></p>

<p>となります。</p>

<h1>計測</h1>

<p>計測してみました。Databaseはsqlite3です。</p>

<pre><code class="rb"># 1.exists?のケース
Benchmark.realtime { 10000.times {|e|Vote.exists?(voting_user_id: 1098)}}
# SQL: SELECT  1 AS one FROM "votes"  WHERE "votes"."voting_user_id" = 1098 LIMIT 1
# =&gt; 6.658646

# 2.find_byのケース
Benchmark.realtime { 10000.times {|e|!!Vote.find_by(voting_user_id: 1098)}}
# SQL: SELECT  "votes".* FROM "votes"  WHERE "votes"."voting_user_id" = 1098 LIMIT 1
# =&gt; 5.506756
</code></pre>

<p>find_byのほうが早いんですね。取得結果の情報が多い分、find_byのほうがメモリは食ってそうなので、遅いかなと思ったら想像と逆の結果でした。</p>

<h1>Postgresqlで試してみる</h1>

<p>アプリをHeroku+Postgresqlで動かす機会が多いので、ローカルのPostgresqlで試してみます。</p>

<pre><code class="rb"># 1.exists?のケース
Benchmark.realtime { 10000.times {|e|Vote.exists?(voting_user_id: 1098)}}
# SQL: SELECT  1 AS one FROM "votes"  WHERE "votes"."voting_user_id" = 1098 LIMIT 1
# =&gt; 9.905989

# 2.find_byのケース
Benchmark.realtime { 10000.times {|e|!!Vote.find_by(voting_user_id: 1098)}}
# SQL: SELECT  "votes".* FROM "votes"  WHERE "votes"."voting_user_id" = 1098 LIMIT 1
# =&gt; 7.289921
</code></pre>

<p>やっぱり、find_byの方が早いのかー。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[herokuで動くRailsアプリケーションにNew Relicを入れる]]></title>
    <link href="http://jangajan.com/blog/2014/10/20/use-new-relic-in-rails4-at-heroku/"/>
    <updated>2014-10-20T15:30:52+09:00</updated>
    <id>http://jangajan.com/blog/2014/10/20/use-new-relic-in-rails4-at-heroku</id>
    <content type="html"><![CDATA[<p>Rails4アプリにNew Relicを入れます。<br/>
herokuで動かす場合はadd-onとかの設定が必要でした。</p>

<p><a href="https://docs.newrelic.com/docs/agents/ruby-agent/installation-configuration/ruby-agent-installation">New Relicの本家</a>と<a href="https://devcenter.heroku.com/articles/newrelic#ruby-configuration">herokuのNew Relicの適用ページ</a>が参考になります。</p>

<!-- more -->


<p>New Relicへの登録をすませると、手順ページが表示されていきます。</p>

<h1>New Relicの設定</h1>

<h2>Choose your language</h2>

<p>言語をRubyに選択します。</p>

<h2>Get your license key</h2>

<p>Generate license keyを単にクリックするだけです。<br/>
これで、newrelic.ymlをダウンロードできます。</p>

<h2>Install the New Relic agent with bundler</h2>

<p>Gemfileの修正と、gemのインストールを実行します。</p>

<h2>Download newrelic.yml</h2>

<p>license keyを生成すると、Donwload the newrelic.yml fileが有効になりますので、クリックしてファイルを取得します。
その後、<code>${APP_ROOT}/config/newrelic.yml</code>にダウンロードしたファイルを配置します。</p>

<h2>アプリ名の設定</h2>

<p>newrelic.ymlにアプリ名を設定します。</p>

<pre><code class="yaml config/newrelic.yml">common: &amp;default_settings
...
  app_name: #{アプリケーション名}
...
</code></pre>

<h2>Postgles</h2>

<p>postgresqlの場合は特殊な設定が必要になります。
なくても動きますが,New Relicの一部機能は動作しません。</p>

<pre><code class="yaml config/newrelic.yml">common: &amp;default_settings
  transaction_tracer:
    explain_enabled: false
</code></pre>

<h2>ローカルで確認</h2>

<p>この状態でローカルで確認できます。<br/>
ローカルがPostgresqlでなければ直前の対応は不要かもしれません。</p>

<p><a href="http://localhost:3000/newrelic">http://localhost:3000/newrelic</a></p>

<h1>herokuの設定</h1>

<p>herokuではadd-onでnew relicと連携します。</p>

<h2>Add-onの設定</h2>

<p>add-on追加のためにはクレジットカードの情報が必須です。
(無料プランがあります)</p>

<p><a href="https://addons.heroku.com/newrelic">New RelicのAdd-onページ</a>から設定を有効にしてください。</p>

<h2>環境変数の設定</h2>

<p><code>heroku config</code>で設定を変更。</p>

<pre><code class="sh">heroku config:set NEW_RELIC_APP_NAME="各自のアプリケーション名"
heroku config:set RACK_ENV=production
</code></pre>

<h2>本番で確認</h2>

<p>このままherokuへのpushが成功した後、数分してからNew Relicにアクセスすれば接続確認できます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Factorygirlの読み込みでエラー]]></title>
    <link href="http://jangajan.com/blog/2014/10/08/require-rspec/"/>
    <updated>2014-10-08T14:19:07+09:00</updated>
    <id>http://jangajan.com/blog/2014/10/08/require-rspec</id>
    <content type="html"><![CDATA[<p>パーフェクトRuby on Rails の7章のFactoryGirlを省略するところ(リスト7.12)で<code>uninitialized constant FactoryGirl (NameError)</code>が発生しました。</p>

<!-- more -->


<p><code>factory_girl_rails</code>を読み込んであげればおーけーです。</p>

<pre><code class="rb spec/spec_helper.rb">require 'factory_girl_rails'

RSpec.configure do |config|
  config.include FactoryGirl::Syntax::Methods
end
</code></pre>
]]></content>
  </entry>
  
</feed>
