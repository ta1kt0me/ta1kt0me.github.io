<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby-on-rails | JanGaJan.com]]></title>
  <link href="http://jangajan.com/blog/categories/ruby-on-rails/atom.xml" rel="self"/>
  <link href="http://jangajan.com/"/>
  <updated>2014-10-15T14:44:18+09:00</updated>
  <id>http://jangajan.com/</id>
  <author>
    <name><![CDATA[talkto_me]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Factorygirlの読み込みでエラー]]></title>
    <link href="http://jangajan.com/blog/2014/10/08/require-rspec/"/>
    <updated>2014-10-08T14:19:07+09:00</updated>
    <id>http://jangajan.com/blog/2014/10/08/require-rspec</id>
    <content type="html"><![CDATA[<p>パーフェクトRuby on Rails の7章のFactoryGirlを省略するところ(リスト7.12)で<code>uninitialized constant FactoryGirl (NameError)</code>が発生しました。</p>

<!-- more -->


<p><code>factory_girl_rails</code>を読み込んであげればおーけーです。</p>

<pre><code class="rb spec/spec_helper.rb">require 'factory_girl_rails'

RSpec.configure do |config|
  config.include FactoryGirl::Syntax::Methods
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails4.1でherokuへのデプロイに失敗(Missing `secret_key_base`)]]></title>
    <link href="http://jangajan.com/blog/2014/10/05/secrets-dot-yml-on-heroku-in-rails4-dot-1/"/>
    <updated>2014-10-05T01:14:13+09:00</updated>
    <id>http://jangajan.com/blog/2014/10/05/secrets-dot-yml-on-heroku-in-rails4-dot-1</id>
    <content type="html"><![CDATA[<p>Rails4.1でherokuへのデプロイに失敗(Missing <code>secret_key_base</code>)</p>

<p>Rails4.1から<code>secrets.yml</code>がサポートされました。<br/>
これの扱いが良くわかっていなかったため、heroku push後、以下のエラーが発生してアプリ起動に失敗しました。</p>

<blockquote><p>app error: Missing <code>secret_key_base</code> for &lsquo;production&rsquo; environment, set this value in <code>config/secrets.yml</code> (RuntimeError)</p></blockquote>

<!-- more -->


<h1>解決策</h1>

<p>ちなみに、heroku create済みです。</p>

<h2>secrets.ymlをgitで管理する</h2>

<p><code>.gitignore</code>に<code>/config/secrets.yml</code>を含めてしまっている場合は、削除してください。<br/>
その後、git管理化におくため、commitします。</p>

<p>productionの<code>secret_key_base</code>は環境変数から取得するようになっているため、herokuの環境変数に<code>SECRET_KEY_BASE</code>を設定する必要があります。</p>

<h2>環境変数SECRET_KEY_BASEを設定する</h2>

<p>やり方が２通りあります。</p>

<h3>heroku_secretsを使う</h3>

<p>この方法では、<a href="https://github.com/alexpeattie/heroku_secrets">heroku_secrets</a>というgemを利用することでherokuコマンドを打つ必要はありません。</p>

<h4>gemのインストール</h4>

<p>Gemfileにgemを追加して、bundle updateを実行します。</p>

<pre><code class="rb Gemfile">gem 'heroku_secrets', github: 'alexpeattie/heroku_secrets'
</code></pre>

<h4>rakeコマンドを実行</h4>

<p>その後、rakeコマンドを実行します。</p>

<pre><code class="sh">bundle exec rake heroku:secrets[app-name] RAILS_ENV=production
</code></pre>

<p>もう一つの方も作業量としては変わらなそうですね。</p>

<h3>heroku configで環境変数を設定する</h3>

<p>この方法では、heroku config:add で環境変数を直接設定します。</p>

<h4>設定値を作成する</h4>

<p>環境変数に設定する値を取得します。</p>

<pre><code class="sh">bundle exec rake secret RAILS_ENV=production
</code></pre>

<h4>herokuの環境変数を設定する</h4>

<p>上記の実行結果を値とした環境変数(SECRET_KEY_BASE)を設定します。</p>

<pre><code class="sh">heroku config:add SECRET_KEY_BASE=rake secretの実行結果
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails4でacts-as-taggable-on Gemを使う]]></title>
    <link href="http://jangajan.com/blog/2014/10/04/acts-as-taggable-on-in-rails/"/>
    <updated>2014-10-04T03:40:31+09:00</updated>
    <id>http://jangajan.com/blog/2014/10/04/acts-as-taggable-on-in-rails</id>
    <content type="html"><![CDATA[<p>ユーザーに紐づくタスクに、タグ付けをするという機能を実現する方法です。<br/>
<code>acts-as-taggable-on</code>というgemを利用することで簡単(苦戦した&hellip;)にタグ機能は実現できるそうです。<br/>
なんとかできたっぽい&hellip;</p>

<p>環境は、こんな感じです。</p>

<ul>
<li>Rails 4.1.6</li>
<li>ruby 2.1.2p95</li>
<li>acts-as-taggable-on 3.4.2</li>
</ul>


<p>Githubの<a href="https://github.com/mbleigh/acts-as-taggable-on#tag-ownership">README</a>を参考にしました</p>

<!-- more -->


<h1>Model</h1>

<p>そもそもリレーション関係の設定でハマりましたが、これで良さそうです。<br/>
関係としては<code>user 1-n task</code>となり、taskにタグを設定します。<br/>
タグは、userごとに別々に管理します。</p>

<pre><code class="rb app/models/user.rb">class User &lt; ActiveRecord::Base
  acts_as_tagger
  has_many :tasks, dependent: :destroy
  ...
end
</code></pre>

<pre><code class="rb app/models/task.rb">class Task &lt; ActiveRecord::Base
  acts_as_taggable
  belongs_to :user
  ...
end
</code></pre>

<h1>View</h1>

<p>タグのところだけピックアップ。<br/>
（簡単なサンプル作れば良かった）  <br/>
画面表示するController内のメソッドで、選択可能なタグを<code>@user_tags</code>に入れています。<br/>
タグは複数選択可能にするため、checkboxを利用しました。<br/>
checkbox生成でrailsの仕組みを利用しようとしたのですが、以下の2点を実現しようとしてうまいやり方が見つからなかった&hellip;</p>

<ul>
<li>labelでクリック連携</li>
<li>valueの値をタグの名前</li>
</ul>


<p>form_for内に記述します。</p>

<pre><code class="haml app/views/tasks/_form.html.haml">/ @user_tagsはcontrollerで配列で設定 ex) =&gt; ["tag1", "tag2"]
- @user_tags.each do |tag|
  / tagを複数選択可能にするため、checkboxを利用
  %input{id:"tag-#{tag}" ,name:'task[tag_list][]', type:'checkbox',value:"#{tag}"}
  %label{for:"tag-#{tag}"}
    %span.task-tag
      = "#{tag}"
</code></pre>

<p>タグ付けよりもrailsでcheckbox使うところに時間とられた&hellip;宿題ですね。</p>

<h1>Controller</h1>

<p>リクエストのtask[tag_list]という値の中に、タグが含まれます。<br/>
<code>permit</code>で、配列をチェックしたい場合は、<code>tag_list: []</code>と指定してあげる必要がありました。</p>

<pre><code class="rb app/controllers/tasks_controller.rb">class TasksController &lt; ApplicationController
  ...
  def create
    # current_user =&gt; User.find(session[:user_id])
    @task = current_user.tasks.build(task_params)
    @task.user = current_user
    # tagの設定処理 :withには'tag1, tag2'という形式の文字列を設定することでタグを登録できる
    current_user.tag(@task, :with =&gt; @task.tag_list.join(', '), :on =&gt; :tags)
    if @task.save
      # 成功処理
    else
      # 失敗処理
    end
  end
  ...

  private
  def task_params
    params.require(:task).permit(
      # tag_list: []を指定することで、checkboxの複数の値を配列にして、tag_listに設定可能になる
      :id, :name, :deadline, tag_list: []
    )
  end
end
</code></pre>

<p>もしかしたらもっといいやり方があるかもしれません。<br/>
気をつける場所はいくつかあるものの、意外と簡単かも。</p>

<h1>補足</h1>

<h2>ユーザーが設定しているタグの一覧を取得する</h2>

<pre><code class="rb">@user_tags = current_user.owned_tag_list
=&gt; ["tag1", "tag2"]
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ページ単位のjavascriptにcontent_forを使う]]></title>
    <link href="http://jangajan.com/blog/2014/09/27/content-for/"/>
    <updated>2014-09-27T04:14:07+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/27/content-for</id>
    <content type="html"><![CDATA[<p>ページ単位で特定のjavascriptを実行させたい時に、content_forを使えばいいんだね、という結論でした。</p>

<!-- more -->


<h1>javascriptをページごとのファイルに書けない理由</h1>

<p>そもそもbootstrapで作成したコンテンツにこんな記載がありました。
hamlでyatiのテーマを適用しています。</p>

<pre><code class="haml app/views/layouts/application.html.haml">/ ...ページ最下部
      = yield
/
  Javascripts
  \==================================================
/ Placed at the end of the document so the pages load faster
= javascript_include_tag "yeti"
= yield(:page_javascript) if content_for?(:page_javascript)
</code></pre>

<p>各ページのコンテンツは、<code>= yield</code>に埋め込まれます。<br/>
しかし、<code>= javascript_include_tag "yeti"</code>という処理でJavascriptの定義を追加するため、各ページのhamlにjavascriptを書くとjQueryの処理が動きません。<br/>
そこで、<code>= yield(:page_javascript) if content_for?(:page_javascript)</code>を利用します。</p>

<h1>content_forの使い方</h1>

<p>各ページのhamlの下部でcontent_forを利用することにより、application.html.hamlの<code>= yield(:page_javascript) if...</code>のところに出力されます。</p>

<pre><code class="haml app/views/tasks/new.html.haml">- content_for :page_javascript do
  :javascript
    jQuery('#datetimepicker').datetimepicker();
</code></pre>

<p>なので、ページごとのjavascriptは<code>content_for :page_javascript</code>を利用して書くようにしましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsでbootswitchのテーマを適用したらActionView::Template::Error]]></title>
    <link href="http://jangajan.com/blog/2014/09/26/include-css-error-in-rails/"/>
    <updated>2014-09-26T16:49:11+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/26/include-css-error-in-rails</id>
    <content type="html"><![CDATA[<p>bootswitch適用時に発生したActionView::Template::Errorの解消方法です。</p>

<!-- more -->


<h1>bootswatch適用</h1>

<p>以下のようにbootswatchを適用しました。</p>

<pre><code class="rb Gemfile">...
gem 'twitter-bootswatch-rails'
gem 'twitter-bootswatch-rails-helpers'
gem 'therubyracer'
</code></pre>

<p>今回はyetiを適用しています。<br/>
テンプレートエンジンはslimを使っています。</p>

<pre><code class="sh">bundle exec rails g bootswatch:install yeti
bundle exec rails g bootswatch:import yeti
bundle exec rails g bootswatch:layout yeti
mv app/views/layouts/yeti.html.slim app/views/layouts/application.html.slim
</code></pre>

<p>最後のmvでテンプレートファイルの入れ替えを行っています。</p>

<h1>ActionView::Template::Errorエラー</h1>

<p>ここで<code>rails s</code>すると、以下のエラーが発生しました。</p>

<pre><code>ActionView::Template::Error (Asset filtered out and will not be served: add `Rails.application.config.assets.precompile += %w( yeti.css )` to `config/initializers/assets.rb` and restart your server):
     9:     / Le HTML5 shim, for IE6-8 support of HTML elements
    10:     /[if lt IE 9]
    11:       = javascript_include_tag "http://html5shim.googlecode.com/svn/trunk/html5.js"
    12:     = stylesheet_link_tag "yeti", :media =&gt; "all"
    13:     = yield(:page_stylesheet) if content_for?(:page_stylesheet)
    14: 
    15: 
  app/views/layouts/application.html.slim:12:in `_app_views_layouts_application_html_slim__3298097478580668215_70163995513140'


  Rendered vendor/bundle/ruby/2.1.0/gems/actionpack-4.1.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (1.0ms)
  Rendered vendor/bundle/ruby/2.1.0/gems/actionpack-4.1.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (1.0ms)
  Rendered vendor/bundle/ruby/2.1.0/gems/actionpack-4.1.6/lib/action_dispatch/middleware/templates/rescues/template_error.html.erb within rescues/layout (15.5ms)
</code></pre>

<p>テンプレートファイルの12行目、ちょうどyetinテーマのcssのところですね。<br/>
どうやら、呼び込みたいassetsファイルがちゃんとprecompileされていないらしい。<br/>
追加したいなら、<code>config/initializers/assets.rb</code>にこんな感じに追加しろぼけってエラーメッセージ優しい。</p>

<h1>エラー解消</h1>

<p>そんなわけでこんな感じで修正。</p>

<pre><code class="rb config/initializers/assets.rb">Rails.application.config.assets.precompile += %w( yeti.css yeti.js )
</code></pre>

<p>yeti.jsも同じエラーが出たのであわせて解消。<br/>
これで<code>rails s</code>したらスタイル代わった。やった。</p>
]]></content>
  </entry>
  
</feed>
