<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[JanGaJan.com]]></title>
  <link href="http://jangajan.com/atom.xml" rel="self"/>
  <link href="http://jangajan.com/"/>
  <updated>2014-11-16T22:51:00+09:00</updated>
  <id>http://jangajan.com/</id>
  <author>
    <name><![CDATA[talkto_me]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Railsのexists?とfind_byはどっちが早いのか]]></title>
    <link href="http://jangajan.com/blog/2014/11/10/exists-or-find-by-in-rails/"/>
    <updated>2014-11-10T16:01:44+09:00</updated>
    <id>http://jangajan.com/blog/2014/11/10/exists-or-find-by-in-rails</id>
    <content type="html"><![CDATA[<p>Railsで特定するレコードが存在するかbooleanで取得したい時、</p>

<ol>
<li>Table.exists?(a: id)</li>
<li>!!Table.find_by(a: id)</li>
</ol>


<p>いずれのやり方のほうが処理が早いか計測してみました。</p>

<!-- more -->


<h1>ケース</h1>

<p>環境は、<code>Rails 4.1.7</code>と<code>ruby 2.1.4</code>です。</p>

<ul>
<li>1万件のレコードがあるVoteテーブルに対して、voting_user_idを検索条件に指定して該当するレコードがあるか確認する。</li>
<li>Vote.voting_user_idにはIndexをつける</li>
<li>1万回問い合わせした時間で比較</li>
</ul>


<p>1の場合、<code>Vote.exists?(voting_user_id: 1098)</code><br/>
2の場合、<code>!!Vote.find_by(voting_user_id: 1098)</code></p>

<p>となります。</p>

<h1>計測</h1>

<p>計測してみました。Databaseはsqlite3です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># 1.exists?のケース</span>
</span><span class='line'><span class="no">Benchmark</span><span class="o">.</span><span class="n">realtime</span> <span class="p">{</span> <span class="mi">10000</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span><span class="o">|</span><span class="n">e</span><span class="o">|</span><span class="no">Vote</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="ss">voting_user_id</span><span class="p">:</span> <span class="mi">1098</span><span class="p">)}}</span>
</span><span class='line'><span class="c1"># SQL: SELECT  1 AS one FROM &quot;votes&quot;  WHERE &quot;votes&quot;.&quot;voting_user_id&quot; = 1098 LIMIT 1</span>
</span><span class='line'><span class="c1"># =&gt; 6.658646</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 2.find_byのケース</span>
</span><span class='line'><span class="no">Benchmark</span><span class="o">.</span><span class="n">realtime</span> <span class="p">{</span> <span class="mi">10000</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span><span class="o">|</span><span class="n">e</span><span class="o">|!!</span><span class="no">Vote</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="ss">voting_user_id</span><span class="p">:</span> <span class="mi">1098</span><span class="p">)}}</span>
</span><span class='line'><span class="c1"># SQL: SELECT  &quot;votes&quot;.* FROM &quot;votes&quot;  WHERE &quot;votes&quot;.&quot;voting_user_id&quot; = 1098 LIMIT 1</span>
</span><span class='line'><span class="c1"># =&gt; 5.506756</span>
</span></code></pre></td></tr></table></div></figure>


<p>find_byのほうが早いんですね。取得結果の情報が多い分、find_byのほうがメモリは食ってそうなので、遅いかなと思ったら想像と逆の結果でした。</p>

<h1>Postgresqlで試してみる</h1>

<p>アプリをHeroku+Postgresqlで動かす機会が多いので、ローカルのPostgresqlで試してみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># 1.exists?のケース</span>
</span><span class='line'><span class="no">Benchmark</span><span class="o">.</span><span class="n">realtime</span> <span class="p">{</span> <span class="mi">10000</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span><span class="o">|</span><span class="n">e</span><span class="o">|</span><span class="no">Vote</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="ss">voting_user_id</span><span class="p">:</span> <span class="mi">1098</span><span class="p">)}}</span>
</span><span class='line'><span class="c1"># SQL: SELECT  1 AS one FROM &quot;votes&quot;  WHERE &quot;votes&quot;.&quot;voting_user_id&quot; = 1098 LIMIT 1</span>
</span><span class='line'><span class="c1"># =&gt; 9.905989</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 2.find_byのケース</span>
</span><span class='line'><span class="no">Benchmark</span><span class="o">.</span><span class="n">realtime</span> <span class="p">{</span> <span class="mi">10000</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span><span class="o">|</span><span class="n">e</span><span class="o">|!!</span><span class="no">Vote</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="ss">voting_user_id</span><span class="p">:</span> <span class="mi">1098</span><span class="p">)}}</span>
</span><span class='line'><span class="c1"># SQL: SELECT  &quot;votes&quot;.* FROM &quot;votes&quot;  WHERE &quot;votes&quot;.&quot;voting_user_id&quot; = 1098 LIMIT 1</span>
</span><span class='line'><span class="c1"># =&gt; 7.289921</span>
</span></code></pre></td></tr></table></div></figure>


<p>やっぱり、find_byの方が早いのかー。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text 3でEvernoteを使う]]></title>
    <link href="http://jangajan.com/blog/2014/11/03/evernote-with-st3/"/>
    <updated>2014-11-03T22:19:35+09:00</updated>
    <id>http://jangajan.com/blog/2014/11/03/evernote-with-st3</id>
    <content type="html"><![CDATA[<p>Sublime Text 3 を Evernoteのクライアントにする方法です。
以前にも試したのですが、使いやすいPackageがなかったので、見つかって嬉しい。</p>

<!-- more -->


<p>evernoteのアカウントを持っていることが前提です。</p>

<h1>必要なPackage</h1>

<p><a href="https://sublime.wbond.net/packages/Evernote">Evernote</a></p>

<h1>初期設定</h1>

<h2>Token生成</h2>

<p>Command Paletteから<code>Evernote Settings:Reconfigure Authorization</code>を選択。<br/>
ブラウザが起動して、EvernoteのDeveloper Tokensページが開くので、Tokenを作る。<br/>
生成した<code>Developer Token</code>と<code>NoteStore URL</code>を設定ファイルに書き込む。</p>

<h2>Evernote設定ファイル作成</h2>

<p>Command Paletteから<code>Evernote Settings: User</code>を選択。</p>

<figure class='code'><figcaption><span>Evernote.sublime-settings</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;noteStoreUrl&quot;</span><span class="p">:</span> <span class="s2">&quot;生成したNoteStore URL&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;token&quot;</span><span class="p">:</span> <span class="s2">&quot;生成したDeveloper Token&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上でSublime Textでの設定は完了。</p>

<h1>新規メモ作成</h1>

<ol>
<li>新規ノートを作成
Command Paletteから<code>Evernote:  New empty note</code>を選択。<br/>
<code>title</code>と<code>notebook</code>と<code>tags</code>を入力。
このままでは保存されません。</li>
<li>ノートを保存
Command Paletteから<code>Evernote:Send to Evernote as new note</code>を選択。<br/>
これでevernoteに保存されます。
たまに、tokenを聞かれることがありますので、その時は、上のtokenを入力する必要があります。</li>
</ol>


<h1>ノートを探す</h1>

<p>とりわけ使いやすそうだったもの。
Command Paletteから入力します。</p>

<ul>
<li>Evernote:Open Evernote Note

<ul>
<li>notebook > titleから使いたいノートを検索</li>
</ul>
</li>
<li>Evernote:List recent notes

<ul>
<li>最近使ったノートを表示</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text3にMarkdown環境を作る]]></title>
    <link href="http://jangajan.com/blog/2014/11/03/markdown-plugin-st3/"/>
    <updated>2014-11-03T19:23:45+09:00</updated>
    <id>http://jangajan.com/blog/2014/11/03/markdown-plugin-st3</id>
    <content type="html"><![CDATA[<p>Sublime Text 3にMarkdownのPluginを入れてみました。</p>

<!-- more -->


<h1>Package</h1>

<p>導入したPackageは次の通り。<br/>
使いながら減らしていくかも。</p>

<h2><a href="https://sublime.wbond.net/packages/Markdown%20Extended">Markdown Extended</a></h2>

<h2><a href="https://sublime.wbond.net/packages/MarkdownCodeBlockWrapper">MarkdownCodeBlockWrapper</a></h2>

<h2><a href="https://sublime.wbond.net/packages/MarkdownEditing">MarkdownEditing</a></h2>

<h2><a href="https://sublime.wbond.net/packages/MarkdownTOC">MarkdownTOC</a></h2>

<h2><a href="https://sublime.wbond.net/packages/OmniMarkupPreviewer">OmniMarkupPreviewer</a></h2>

<h2><a href="https://sublime.wbond.net/packages/Table%20Editor">Table Editor</a></h2>

<h1>Preference</h1>

<p>Markdownのみに適用したい設定の仕方。<br/>
SyntaxをMarkdownに設定した状態で、Command Paletteから<code>Prefrences: Alignment File Settings Syntax Specific User</code>を選択。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;enable_table_editor&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;extensions&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;mdown&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;txt&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;md&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;markdown&quot;</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;tab_size&quot;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;translate_tabs_to_spaces&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;trim_trailing_white_space_on_save&quot;</span><span class="p">:</span> <span class="kc">false</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Key-Binding</h1>

<p><code>markdown</code>と<code>md</code>といったMarkdownの拡張子(syntax)の時のみキーバインドを設定する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>    <span class="err">//</span> <span class="err">Shift+enterで末尾に&#39;</span>  <span class="err">\n&#39;を入れる</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;keys&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;shift+enter&quot;</span><span class="p">],</span> <span class="nt">&quot;command&quot;</span><span class="p">:</span> <span class="s2">&quot;insert_snippet&quot;</span><span class="p">,</span> <span class="nt">&quot;args&quot;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;contents&quot;</span><span class="p">:</span> <span class="s2">&quot;  \n&quot;</span> <span class="p">},</span> <span class="nt">&quot;context&quot;</span><span class="p">:</span> <span class="p">[{</span> <span class="nt">&quot;key&quot;</span><span class="p">:</span> <span class="s2">&quot;selector&quot;</span><span class="p">,</span> <span class="nt">&quot;operator&quot;</span><span class="p">:</span> <span class="s2">&quot;equal&quot;</span><span class="p">,</span> <span class="nt">&quot;operand&quot;</span><span class="p">:</span> <span class="s2">&quot;text.html.markdown, text.html.md&quot;</span> <span class="p">}]},</span>
</span><span class='line'>    <span class="err">//</span> <span class="err">alt+lで&#39;</span><span class="p">[</span><span class="err">title</span><span class="p">]</span><span class="err">(http://)&#39;を挿入する</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;keys&quot;</span><span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;alt+l&quot;</span> <span class="p">],</span> <span class="nt">&quot;command&quot;</span><span class="p">:</span> <span class="s2">&quot;insert_snippet&quot;</span><span class="p">,</span> <span class="nt">&quot;args&quot;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;contents&quot;</span><span class="p">:</span> <span class="s2">&quot;[title](http://)&quot;</span><span class="p">},</span> <span class="nt">&quot;context&quot;</span><span class="p">:</span> <span class="p">[{</span> <span class="nt">&quot;key&quot;</span><span class="p">:</span> <span class="s2">&quot;selector&quot;</span><span class="p">,</span> <span class="nt">&quot;operator&quot;</span><span class="p">:</span> <span class="s2">&quot;equal&quot;</span><span class="p">,</span> <span class="nt">&quot;operand&quot;</span><span class="p">:</span> <span class="s2">&quot;text.html.markdown, text.html.md&quot;</span> <span class="p">}]}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About MetaNight]]></title>
    <link href="http://jangajan.com/blog/2014/11/02/about-meta-night/"/>
    <updated>2014-11-02T22:11:20+09:00</updated>
    <id>http://jangajan.com/blog/2014/11/02/about-meta-night</id>
    <content type="html"><![CDATA[<p><a href="http://e-g-d.doorkeeper.jp/events/16300">MetaNight</a>という<a href="http://www.amazon.co.jp/gp/product/B00N9I0RMQ/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00N9I0RMQ&amp;linkCode=as2&amp;tag=pochan0919-22">Metaprogramming Ruby 2</a>の読書会の内容です。<br/>
※リンク先は第1回目の内容となります。イベントページから最近の情報にアクセスしてみてください</p>

<p><a href="http://www.amazon.co.jp/gp/product/B00N9I0RMQ/ref=as_li_ss_il?ie=UTF8&camp=247&creative=7399&creativeASIN=B00N9I0RMQ&linkCode=as2&tag=pochan0919-22"><img border="0" src="http://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B00N9I0RMQ&Format=_SL250_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=pochan0919-22" ></a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=pochan0919-22&l=as2&o=9&a=B00N9I0RMQ" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<!-- more -->


<h1>MetaNightについて</h1>

<h2>イベント概要</h2>

<p>英語の技術書を読むことを目的とした「エイゴ・ギジュツショ・ドクショカイ」というdoorkeeperのコミュニティによる、meta programming ruby 2の読書会です。</p>

<p>技術(主にRuby)と英語がテーマです。<br/>
少人数で、雑談混じりでワイワイやってます。<br/>
1回目のペースだと読み終わるのは２年後かなぁ&hellip;</p>

<h2>参加すると嬉しい人</h2>

<ul>
<li>興味を出させたい人・興味がある人</li>
<li>メタプログラミングを教えたい人・学びたい人</li>
<li>英語を教えたい人・学びたい人</li>
</ul>


<p>興味がある方からのdoorkeeperへコメントやtwitter(<a href="https://twitter.com/talkto_me">@talkto_me</a>)へのダイレクトメッセージお待ちしてます。</p>

<h2>スキルレベル</h2>

<ul>
<li>英語

<ul>
<li>調べながら読めるぐらい</li>
</ul>
</li>
<li>技術

<ul>
<li>Metaprogramming Ruby 2を読みたい人ならどなたでも</li>
</ul>
</li>
</ul>


<p>英語も技術も、わからないところは話し合いの時間に解決すればいいです。<br/>
そのための読書会ですので、怖がらずに。</p>

<h2>参加するために必要なもの</h2>

<ul>
<li>(忘れずに)doorkeeperへの参加申込</li>
<li>meta programming ruby 2とそれを読める機械

<ul>
<li><a href="http://www.amazon.co.jp/gp/product/B00N9I0RMQ/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00N9I0RMQ&amp;linkCode=as2&amp;tag=pochan0919-22">kindle</a></li>
<li><a href="https://pragprog.com/book/ppmetr2/metaprogramming-ruby-2">epub</a></li>
</ul>
</li>
<li>読む時間を設けるので、前もって読んでくる必要はないです。読んでくるのは自由です。</li>
<li>ビールやコーヒー1杯分の小銭</li>
<li>勢い</li>
</ul>


<h2>参加したいけど不安な方へ</h2>

<p>何かあれば気軽に連絡ください。</p>

<h3>英語が不安</h3>

<p>iBook使うと辞書引きやすくて楽です。<br/>
分かりづらい場合なんかは共有時間に確認したりします。</p>

<h3>Rubyがわからない</h3>

<p>メタプログラミングなので、基本的なところは分かっておく必要があります。<br/>
ドットインストールでのRubyの収録をチラ見しておくと良いです。
もし、この収録の内容がわからなくても一緒に話しながら少しずつ理解していきましょう。</p>

<h2>その他</h2>

<p>Metaprogramming Ruby 2を買うときに使えるクーポン。<br/>
いつまで使えるかはわかりませんが10月20日時点では使えてます。</p>

<blockquote class="twitter-tweet" lang="en"><p>And a special treat for twitter readers: save 30% on all ebooks we publish, use coupon &quot;adalovelaceday&quot; in honor of Ada Lovelace”</p>&mdash; PragmaticProgrammers (@pragprog) <a href="https://twitter.com/pragprog/status/522034588965957633">October 14, 2014</a></blockquote>


<p> <script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MetaNight 第1回を開催しました]]></title>
    <link href="http://jangajan.com/blog/2014/11/01/e-g-d-meta-night-1st/"/>
    <updated>2014-11-01T01:42:36+09:00</updated>
    <id>http://jangajan.com/blog/2014/11/01/e-g-d-meta-night-1st</id>
    <content type="html"><![CDATA[<p><a href="http://e-g-d.doorkeeper.jp/events/16300">MetaNight</a>という<a href="http://www.amazon.co.jp/gp/product/B00N9I0RMQ/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00N9I0RMQ&amp;linkCode=as2&amp;tag=pochan0919-22">Metaprogramming Ruby 2</a>の読書会の第１回目を開催しました。</p>

<p><a href="http://www.amazon.co.jp/gp/product/B00N9I0RMQ/ref=as_li_ss_il?ie=UTF8&camp=247&creative=7399&creativeASIN=B00N9I0RMQ&linkCode=as2&tag=pochan0919-22"><img border="0" src="http://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B00N9I0RMQ&Format=_SL250_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=pochan0919-22" ></a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=pochan0919-22&l=as2&o=9&a=B00N9I0RMQ" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<!-- more -->


<p>イベント概要については、<a href="http://jangajan.com/blog/2014/11/02/about-meta-night/">About MetaNight</a>をご覧ください。</p>

<p>第一回目。このイベント自体は @tkymtk さんの発案による共同運営という形で開催しました。<br/>
↓のコンセプトでやっているので気が向いたら遊びにきてください。</p>

<h2>コンセプト</h2>

<p><strong>英語の技術書を楽しく読む！</strong></p>

<p>技術書読むのって結構精神削られますよね&hellip;<br/>
しかも英語とか&hellip;</p>

<p>けど、英語、ちょっと読めるようになりたいしなぁ&hellip;<br/>
と、くすぶっている方にはピッタリです。<br/>
(自分がそんな感じ)</p>

<p>後、黙々と読むだけではなくって、話したいです。(超大事。雑談楽しい)<br/>
英語か技術どっちか片方にで興味がある人がいたら話したいのでぜひ。<br/>
一応公用語は日本語です。安心してください。</p>

<hr />

<p>以下、本日の振り返り。<br/>
写真とっておけばよかった&hellip;</p>

<h1>第1回</h1>

<p>3名での開催でした。</p>

<h2>進め方</h2>

<p>情報共有にはTrelloを使いました。<br/>
読みながら気になった点があればカードを作成し、共有時間に見直しました。</p>

<p>時間的的には、4:6で共有もとい雑談時間の方がやや多め。<br/>
今回は手探り感満載で２つの方法を試しました。</p>

<h3>1. 読む時間決めて、黙々と読む。</h3>

<p>まずはこのやり方で始めました。<br/>
時間を決めて参加者それぞれで読み進める。<br/>
時間がきたら気になったところをそれぞれ話してく。</p>

<h3>2. どこまで読むか決めて、読み終わったら共有</h3>

<p>1のやり方で進めると先に進みすぎたりした時に前の内容が抜け落ちたりするという提案があったので、この方法を試す事にしました。<br/>
遅い人（僕です）のペースにあわせてもらって読み進めました。<br/>
結果的に同じ範囲で気になる点を話し合えたので、こちらのスタイルの方で続ける事に。</p>

<h2>進捗・内容</h2>

<p><code>I. Metaprogramming Ruby のchapter1</code>が終わりました。</p>

<p>映画オタクのBobは自分の作った映画データベースアプリに鼻高々でいた。<br/>
しかし、そのプライドは経験豊富な同僚のBillによってものの一瞬で粉砕された。<br/>
DBのテーブルやカラムに依存した17行のコードは、たったの2行のActiveRecord::Baseを拡張しただけのclass定義に成り代わり、しかもDBに依存しないコードに置き換えられたのだ。<br/>
強力なメタ・プログラミングの威力に圧倒されたBobは、これから長くて短い一週間を過ごす事になる。<br/>
しかし、恐れる事は無い。メタ・プログラミングはGuruのみが支配する黒魔術の世界ではないのだ。<br/>
Bill同様、あなたも少しずつメタ・プログラミングの世界に魅了されていく事になるであろう。</p>

<h2>反省・感想</h2>

<ul>
<li>使った店がお洒落</li>
<li>ハロウィンで客が少なかったおかげなのか、優雅なソファーでくつろげた</li>
<li>楽しくて延長して3時間やってしまった</li>
<li>実は2時間経ったら、店員からドリンク催促があったんです</li>
<li>Noと言えない</li>
<li>一緒にやる人がいると、自分で読み流しているところに気がつける(2回目の超大事)</li>
<li>自分で書く時に前置詞の使い方が難しい</li>
<li>そんな人たち向けにおすすめを紹介してもらった！ <a href="http://www.amazon.co.jp/gp/product/4890855270/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=4890855270&linkCode=as2&tag=pochan0919-22">一億人の英文法 ――すべての日本人に贈る「話すため」の英文法（東進ブックス）</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=pochan0919-22&l=as2&o=9&a=4890855270" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li>Trelloでの共有が便利</li>
<li>カードのクローズとかのやり方は次回までの課題</li>
<li>Hangoutも使えるようにしたい</li>
<li>英語の微妙なニュアンスを日本語で落とし込むのが難しい(知恵が欲しい)</li>
<li>いきなりActiveRecordかよ</li>
<li>悟りを開ければGuru</li>
<li>ダイヤルMってなんなんだろう</li>
<li>頻繁に使われるruntime</li>
<li>yangとyin。英語じゃないじゃん、そりゃ辞書に無いわ。</li>
<li>ghost townとmarket、C++とRuby</li>
<li>introspection、stick、entrench、derive、at one&rsquo;s disposal、nagging、a bolt-on power feature、自分一人じゃニュアンス掴めなかった</li>
<li>おすすめ！ <a href="http://gilesbowkett.blogspot.jp/2007/11/why-i-program-in-ruby-and-maybe-why-you.html">http://gilesbowkett.blogspot.jp/2007/11/why-i-program-in-ruby-and-maybe-why-you.html</a></li>
<li>忘れないように、2週間間隔で開催できるといいな</li>
</ul>


<h1>最後に</h1>

<p>見出しぐらい英語でかけるようになりたい<br/>
今月中に第2回を開く</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyでメソッドを定義しているクラスを調べたい]]></title>
    <link href="http://jangajan.com/blog/2014/10/28/which-of-the-class-dose-have-the-method/"/>
    <updated>2014-10-28T05:55:25+09:00</updated>
    <id>http://jangajan.com/blog/2014/10/28/which-of-the-class-dose-have-the-method</id>
    <content type="html"><![CDATA[<p>メソッドを定義していくクラスを探る方法です。</p>

<!-- more -->


<h1>定義しているClassを知りたい</h1>

<p>クラス名だけを知りたいのであれば<code>Method#owner</code>を利用します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># singleton method</span>
</span><span class='line'><span class="nb">String</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="ss">:try_convert</span><span class="p">)</span><span class="o">.</span><span class="n">owner</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Class:String&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># instance method</span>
</span><span class='line'><span class="s2">&quot;s&quot;</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="ss">:method_missing</span><span class="p">)</span><span class="o">.</span><span class="n">owner</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">BasicObject</span>
</span></code></pre></td></tr></table></div></figure>


<h1>もうちょっと詳しい情報が知りたい</h1>

<p><code>Method#inspect</code>を使うともう少し詳しい情報を取得できます。
といってもそんなに大きく変わりません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># singleton method</span>
</span><span class='line'><span class="nb">String</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="ss">:try_convert</span><span class="p">)</span><span class="o">.</span><span class="n">inspect</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;#&lt;Method: String.try_convert&gt;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># instance method</span>
</span><span class='line'><span class="s2">&quot;s&quot;</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="ss">:method_missing</span><span class="p">)</span><span class="o">.</span><span class="n">inspect</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;#&lt;Method: String(BasicObject)#method_missing&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>当たり前の話ですが、特異メソッド(クラスメソッド、singleton method)は継承されないですね。
どいうことかというと、DateTimeクラスでは、Dateクラスの得意メソッドを呼び出せない、ということに気付かされました。
クラスメソッドに対してownerとかするの意味ねぇ。</p>

<h1>定義している場所を知りたい</h1>

<p>1.9以降(1.9.3?)では<code>Method#source_location</code>というメソッドで、メソッドの定義された具体的な場所の情報が分かります。
ただし、取得できるのはrubyで定義されたものに限るようです。
(ネイティブで定義されているメソッドの場合nilになる)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># singleton method</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="ss">:where</span><span class="p">)</span><span class="o">.</span><span class="n">source_location</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="no">APP_ROOT</span><span class="si">}</span><span class="s2">/vendor/bundle/ruby/2.0.0/gems/activerecord-4.0.2/lib/active_record/querying.rb&quot;</span><span class="p">,</span> <span class="mi">7</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># instance method</span>
</span><span class='line'><span class="s2">&quot;&quot;</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="ss">:blank?</span><span class="p">)</span><span class="o">.</span><span class="n">source_location</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="no">APP_ROOT</span><span class="si">}</span><span class="s2">/vendor/bundle/ruby/2.0.0/gems/activesupport-4.0.2/lib/active_support/core_ext/object/blank.rb&quot;</span><span class="p">,</span> <span class="mi">92</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># ネイティブで定義されたメソッドはnilを返す</span>
</span><span class='line'><span class="s2">&quot;s&quot;</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="ss">:method_missing</span><span class="p">)</span><span class="o">.</span><span class="n">source_location</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[メモ : Array#each_with_objectの簡単な使い方]]></title>
    <link href="http://jangajan.com/blog/2014/10/27/each-with-object-memo/"/>
    <updated>2014-10-27T18:50:07+09:00</updated>
    <id>http://jangajan.com/blog/2014/10/27/each-with-object-memo</id>
    <content type="html"><![CDATA[<p>each_with_objectの簡単な使い方。
使い方は気をつけないといけないですね。</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">each_with_object</span><span class="p">(</span><span class="n">n</span><span class="o">=[]</span><span class="p">){</span><span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="n">n</span> <span class="o">&lt;&lt;</span> <span class="n">v</span> <span class="o">+</span> <span class="mi">5</span><span class="p">}</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="o">]</span>
</span><span class='line'><span class="c1"># nを初期化しないで処理</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">each_with_object</span><span class="p">(</span><span class="n">n</span><span class="p">){</span><span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="n">n</span> <span class="o">&lt;&lt;</span> <span class="n">v</span> <span class="o">+</span> <span class="mi">5</span><span class="p">}</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">each_with_object</span><span class="p">(</span><span class="n">n</span><span class="p">){</span><span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="n">n</span> <span class="o">&lt;&lt;</span> <span class="n">v</span> <span class="o">+</span> <span class="mi">5</span><span class="p">}</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="o">]</span>
</span><span class='line'><span class="c1"># nをeach_with_objectで初期化</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">each_with_object</span><span class="p">(</span><span class="n">n</span><span class="o">=[]</span><span class="p">){</span><span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="n">n</span> <span class="o">&lt;&lt;</span> <span class="n">v</span> <span class="o">+</span> <span class="mi">5</span><span class="p">}</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="o">]</span>
</span><span class='line'><span class="c1"># nをeach_with_objectの前に宣言</span>
</span><span class='line'><span class="n">n</span> <span class="o">=</span> <span class="o">[</span><span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">each_with_object</span><span class="p">(</span><span class="n">n</span><span class="p">){</span><span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="n">n</span> <span class="o">&lt;&lt;</span> <span class="n">v</span> <span class="o">+</span> <span class="mi">5</span><span class="p">}</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[herokuで動くRailsアプリケーションにNew Relicを入れる]]></title>
    <link href="http://jangajan.com/blog/2014/10/20/use-new-relic-in-rails4-at-heroku/"/>
    <updated>2014-10-20T15:30:52+09:00</updated>
    <id>http://jangajan.com/blog/2014/10/20/use-new-relic-in-rails4-at-heroku</id>
    <content type="html"><![CDATA[<p>Rails4アプリにNew Relicを入れます。<br/>
herokuで動かす場合はadd-onとかの設定が必要でした。</p>

<p><a href="https://docs.newrelic.com/docs/agents/ruby-agent/installation-configuration/ruby-agent-installation">New Relicの本家</a>と<a href="https://devcenter.heroku.com/articles/newrelic#ruby-configuration">herokuのNew Relicの適用ページ</a>が参考になります。</p>

<!-- more -->


<p>New Relicへの登録をすませると、手順ページが表示されていきます。</p>

<h1>New Relicの設定</h1>

<h2>Choose your language</h2>

<p>言語をRubyに選択します。</p>

<h2>Get your license key</h2>

<p>Generate license keyを単にクリックするだけです。<br/>
これで、newrelic.ymlをダウンロードできます。</p>

<h2>Install the New Relic agent with bundler</h2>

<p>Gemfileの修正と、gemのインストールを実行します。</p>

<h2>Download newrelic.yml</h2>

<p>license keyを生成すると、Donwload the newrelic.yml fileが有効になりますので、クリックしてファイルを取得します。
その後、<code>${APP_ROOT}/config/newrelic.yml</code>にダウンロードしたファイルを配置します。</p>

<h2>アプリ名の設定</h2>

<p>newrelic.ymlにアプリ名を設定します。</p>

<figure class='code'><figcaption><span>config/newrelic.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">common</span><span class="p-Indicator">:</span> <span class="nl">&amp;default_settings</span>
</span><span class='line'><span class="nn">...</span>
</span><span class='line'>  <span class="l-Scalar-Plain">app_name</span><span class="p-Indicator">:</span> <span class="c1">#{アプリケーション名}</span>
</span><span class='line'><span class="nn">...</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Postgles</h2>

<p>postgresqlの場合は特殊な設定が必要になります。
なくても動きますが,New Relicの一部機能は動作しません。</p>

<figure class='code'><figcaption><span>config/newrelic.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">common</span><span class="p-Indicator">:</span> <span class="nl">&amp;default_settings</span>
</span><span class='line'>  <span class="l-Scalar-Plain">transaction_tracer</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">explain_enabled</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ローカルで確認</h2>

<p>この状態でローカルで確認できます。<br/>
ローカルがPostgresqlでなければ直前の対応は不要かもしれません。</p>

<p><a href="http://localhost:3000/newrelic">http://localhost:3000/newrelic</a></p>

<h1>herokuの設定</h1>

<p>herokuではadd-onでnew relicと連携します。</p>

<h2>Add-onの設定</h2>

<p>add-on追加のためにはクレジットカードの情報が必須です。
(無料プランがあります)</p>

<p><a href="https://addons.heroku.com/newrelic">New RelicのAdd-onページ</a>から設定を有効にしてください。</p>

<h2>環境変数の設定</h2>

<p><code>heroku config</code>で設定を変更。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>heroku config:set <span class="nv">NEW_RELIC_APP_NAME</span><span class="o">=</span><span class="s2">&quot;各自のアプリケーション名&quot;</span>
</span><span class='line'>heroku config:set <span class="nv">RACK_ENV</span><span class="o">=</span>production
</span></code></pre></td></tr></table></div></figure>


<h2>本番で確認</h2>

<p>このままherokuへのpushが成功した後、数分してからNew Relicにアクセスすれば接続確認できます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rspecメモ]]></title>
    <link href="http://jangajan.com/blog/2014/10/14/rspec-memo/"/>
    <updated>2014-10-14T18:00:00+09:00</updated>
    <id>http://jangajan.com/blog/2014/10/14/rspec-memo</id>
    <content type="html"><![CDATA[<p>rspecの学習中です。</p>

<!-- more -->


<h1>rspecのワークショップ</h1>

<p>以下のチュートリアルでrspecの学習をした時のメモです。</p>

<p><a href="http://d.hatena.ne.jp/t-wada/20100228/p1">http://d.hatena.ne.jp/t-wada/20100228/p1</a>  <br/>
<a href="http://qiita.com/jnchito/items/624f6d5023c279046a1c">http://qiita.com/jnchito/items/624f6d5023c279046a1c</a></p>

<h1>describeとcontextとit</h1>

<ul>
<li><code>describe</code>は対象を説明</li>
<li><code>context</code>は状況を説明</li>
<li><code>it</code>は試験内容を説明</li>
<li><code>it</code>内に具体的な試験を記述</li>
<li><code>it</code>の引数の説明を省略しても試験内容をrspecが判断して仕様記述を組み立てる</li>
<li>読みやすさ次第で<code>it</code>の文字列引数を使うことを推奨</li>
<li>内容を確認したい時は、<code>rspec -fd specfile</code></li>
</ul>


<h1>beforeにテスト実行前処理を記述</h1>

<ul>
<li><code>before</code>の引数のデフォルトは<code>:each</code></li>
</ul>


<h1>subjectでブロックの評価結果がit内のshouldのレシーバになる</h1>

<ul>
<li>明示的に<code>it</code>内で<code>subject</code>メソッドを利用することで、<code>subject</code>ブロックの評価結果を使うことができる</li>
</ul>


<h1><code>shared_examples</code>と<code>it_behaves_like</code></h1>

<ul>
<li><code>shared_examples_for 'キー名' do ~ end</code>とするとブロック内の処理を<code>it_should_behave_like 'キー名'</code>で呼び出してテストできる</li>
<li>ただし、キー名は全てのテストで重複しないように注意する</li>
</ul>


<h1>predicateマッチャ</h1>

<ul>
<li><code>expect(xxx).to eq false -&gt; expect(xxx).not_to be_empty</code></li>
</ul>


<h1>rspec3で標準から外れた機能</h1>

<ul>
<li><code>its</code>メソッドは<code>rspec-its gem</code>で提供</li>
<li>have マッチャ

<ul>
<li>サイズのチェックをテストしやすくするマッチャ(ただし、rspec3ではgemに外出しされた)</li>
<li>have マッチャを使った場合、 <code>have(n).item</code> と <code>have(n).items</code> は互いに置換可能

<ul>
<li>nの値により自然な形にするのがいい</li>
</ul>
</li>
<li>have(n).named_collection記法でもかける

<ul>
<li><code>it {is_expected.to have(n).xxx }</code></li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Factorygirlの読み込みでエラー]]></title>
    <link href="http://jangajan.com/blog/2014/10/08/require-rspec/"/>
    <updated>2014-10-08T14:19:07+09:00</updated>
    <id>http://jangajan.com/blog/2014/10/08/require-rspec</id>
    <content type="html"><![CDATA[<p>パーフェクトRuby on Rails の7章のFactoryGirlを省略するところ(リスト7.12)で<code>uninitialized constant FactoryGirl (NameError)</code>が発生しました。</p>

<!-- more -->


<p><code>factory_girl_rails</code>を読み込んであげればおーけーです。</p>

<figure class='code'><figcaption><span>spec/spec_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;factory_girl_rails&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">include</span> <span class="no">FactoryGirl</span><span class="o">::</span><span class="no">Syntax</span><span class="o">::</span><span class="no">Methods</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TodoGrowというアプリを作りました]]></title>
    <link href="http://jangajan.com/blog/2014/10/06/todogrow/"/>
    <updated>2014-10-06T20:35:42+09:00</updated>
    <id>http://jangajan.com/blog/2014/10/06/todogrow</id>
    <content type="html"><![CDATA[<p><a href="http://todogrow.herokuapp.com/">TodoGrow</a>というアプリを作りました。</p>

<!-- more -->


<p>パーフェクトRuby on Railsの内容を実践してみようと思い、Todoアプリを作りました。<br/>
個人でアプリを作っておくと何かと便利そうだったので。</p>

<p>bootstrapを利用しているので、スマホでアクセスしても使えます。<br/>
(若干日付入力のところでもたつくかも)</p>

<h1>TodoGrow</h1>

<p>トドが育つ、という意味で名付けました。<br/>
トドというのは、これ以上成長しないボラの最終形態のことですね。<br/>
Todoアプリは世の中に山ほどありふれていて成熟している領域の一つです。<br/>
成熟状態とトドをかけて、まだまだ成長できるんじゃない？という意味合いを込めました。</p>

<p>使いどころとしては、</p>

<ul>
<li>タスクが１列、期限順に並んでいる

<ul>
<li>人が一度にできるのは一つだけ</li>
<li>期限未設定が先頭になるのは、期限決めなきゃ行けないから</li>
</ul>
</li>
<li>期限が近づいてきたらタイトルの色を変える</li>
<li>Googleカレンダーに保存ボタン設置</li>
</ul>


<p>個人で試しに使うぐらいのアプリなので、自分が使いたいなって思う機能だけです。</p>

<h1>開発期間</h1>

<p>開発期間は大体9日、残り2日でherokuへのアップで大体2週間ぐらいでしょうか。<br/>
(環境でハマってました&hellip;)</p>

<h1>今後の展望etc</h1>

<p>入力がタスク名と期限だけだったり、タグが削除できない、名称変更できない等、まだ機能的に至らないところもあったり、見た目が貧相だったり、作るだけ作ったのでテスト１行もないとか問題山積みですが、使用感などフィードバックをいただけると嬉しいです。<br/>
今後はWebと連携したモバイル用のアプリも作ってiPhoneでも使えるようにしてみようと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RailsでBowerを使いHerokuにデプロイ]]></title>
    <link href="http://jangajan.com/blog/2014/10/05/bower-and-rails-on-heroku/"/>
    <updated>2014-10-05T22:35:42+09:00</updated>
    <id>http://jangajan.com/blog/2014/10/05/bower-and-rails-on-heroku</id>
    <content type="html"><![CDATA[<p>RailsアプリケーションでJavascriptプラグインの管理をgemに依存したくないなと思ったので、bowerなるものを試してみました。</p>

<p>環境です。</p>

<ul>
<li>bower 1.3.12</li>
<li>rails 4.1.6</li>
<li>ruby 2.1.2</li>
<li>heroku-buildpack-ruby-bower</li>
</ul>


<p>今回は使いませんでしたが、bower-railsというgemの説明も最後に追記しています。</p>

<!-- more -->


<h1>Rails + bower + heroku + heroku-buildpack-ruby-bower</h1>

<p>参考にしたのは<a href="https://gist.github.com/afeld/5704079">こちら</a>です。</p>

<h2>herokuに設定追加</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>heroku create app_name
</span><span class='line'>
</span><span class='line'>bundle exec rake secret RAILS_ENV=production
</span><span class='line'>=&gt; 2d9dc90XXXXXXXXXXXXX...
</span><span class='line'>
</span><span class='line'># rake secretの結果を値として設定
</span><span class='line'>heroku config:add SECRET_KEY_BASE=2d9dc90XXXXXXXXXXXXX...
</span><span class='line'>
</span><span class='line'>heroku run bundle exec rake RAILS_ENV=production db:migrate
</span><span class='line'>
</span><span class='line'>heroku config:set BUILDPACK_URL='git://github.com/qnyp/heroku-buildpack-ruby-bower.git#run-bower' </span></code></pre></td></tr></table></div></figure>


<h2>.gitignore修正</h2>

<p>bowerでコンポーネントをインストールするパスを管理対象外に設定しておきます。</p>

<figure class='code'><figcaption><span>.gitignore</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="sr">/vendor/</span><span class="n">assets</span><span class="o">/</span><span class="n">components</span>
</span></code></pre></td></tr></table></div></figure>


<h2>bowerでコンポーネント追加</h2>

<p>npmでbowerをインストールします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>npm install bower
</span></code></pre></td></tr></table></div></figure>


<p>続いてRailsアプリケーションのルートパスでbowerの設定を追加します。</p>

<figure class='code'><figcaption><span>.bowerrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;directory&quot;</span><span class="p">:</span> <span class="s2">&quot;vendor/assets/components&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;json&quot;</span><span class="p">:</span> <span class="s2">&quot;bower.json&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>bower.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;my application&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;dependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;moment&quot;</span><span class="p">:</span> <span class="s2">&quot;latest&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>依存関係のあるコンポーネントをインストールします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>bower install
</span></code></pre></td></tr></table></div></figure>


<h2>Railsの設定</h2>

<p>お好みでGemファイル追加(このあたりはbowerと関係ないですね)</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># このあたりはお好みで</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;unicorn&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 4.8.3&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;pg&#39;</span><span class="p">,</span> <span class="ss">group</span><span class="p">:</span> <span class="ss">:production</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rails_12factor&#39;</span><span class="p">,</span> <span class="ss">group</span><span class="p">:</span> <span class="ss">:production</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Procfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="ss">web</span><span class="p">:</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">unicorn</span> <span class="o">-</span><span class="nb">p</span> <span class="vg">$PORT</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>config/environments/production.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">compile</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>bowerでインストールしたコンポーネントをassetsのパスに追加します。</p>

<figure class='code'><figcaption><span>config/initializers/assets.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">paths</span> <span class="o">&lt;&lt;</span> <span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;vendor&#39;</span><span class="p">,</span> <span class="s1">&#39;assets&#39;</span><span class="p">,</span> <span class="s1">&#39;components&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>コンポーネントの読み込み設定</h2>

<figure class='code'><figcaption><span>app/assets/javascript/application.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="c1">//= require moment/moment</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<h2>公開設定</h2>

<p>最後に修正をherokuにpushします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git add .
</span><span class='line'>git commit
</span><span class='line'>git push heroku master
</span></code></pre></td></tr></table></div></figure>


<h1>bower-rails</h1>

<p><code>bower-rails</code>というgemがあったのですが、herokuへのデプロイのところで色々はまったので、今回は見送りました。<br/>
ローカルで試す分にはこのGemは非常に使いやすかったので、環境によっては導入すると良さそうです。</p>

<p>こちらの基本的な使い方は以下です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Bowerfile作成</span>
</span><span class='line'><span class="c"># rails g bower_rails:initialize json とすることで、bower.jsonを作成することも可能</span>
</span><span class='line'>bundle <span class="nb">exec </span>rails g bower_rails:initialize
</span><span class='line'><span class="o">=</span>&gt; アプリケーションルートに、Bowerfileが作成される
</span><span class='line'>
</span><span class='line'><span class="c"># Bowerfileの編集</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;asset &#39;moment&#39;&quot;</span> &gt;&gt; Bowerjson
</span><span class='line'>
</span><span class='line'><span class="c"># 依存関係の解決</span>
</span><span class='line'>bundle <span class="nb">exec </span>rake bower:install
</span><span class='line'><span class="o">=</span>&gt; vnedor/assets/bower_componentsにコンポーネントをインストール
</span></code></pre></td></tr></table></div></figure>


<p>上記に加え、<code>config/initializers/assets.rb</code>を修正することで利用できます。</p>

<figure class='code'><figcaption><span>config/initializers/assets.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">paths</span> <span class="o">&lt;&lt;</span> <span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;vendor&#39;</span><span class="p">,</span> <span class="s1">&#39;assets&#39;</span><span class="p">,</span> <span class="s1">&#39;bower_components&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>BowerfileがGemfileのように簡単な形式で書けて、bower.jsonを動的に生成してくれるので、使いやすいですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails4.1でherokuへのデプロイに失敗(Missing `secret_key_base`)]]></title>
    <link href="http://jangajan.com/blog/2014/10/05/secrets-dot-yml-on-heroku-in-rails4-dot-1/"/>
    <updated>2014-10-05T01:14:13+09:00</updated>
    <id>http://jangajan.com/blog/2014/10/05/secrets-dot-yml-on-heroku-in-rails4-dot-1</id>
    <content type="html"><![CDATA[<p>Rails4.1でherokuへのデプロイに失敗(Missing <code>secret_key_base</code>)</p>

<p>Rails4.1から<code>secrets.yml</code>がサポートされました。<br/>
これの扱いが良くわかっていなかったため、heroku push後、以下のエラーが発生してアプリ起動に失敗しました。</p>

<blockquote><p>app error: Missing <code>secret_key_base</code> for &lsquo;production&rsquo; environment, set this value in <code>config/secrets.yml</code> (RuntimeError)</p></blockquote>

<!-- more -->


<h1>解決策</h1>

<p>ちなみに、heroku create済みです。</p>

<h2>secrets.ymlをgitで管理する</h2>

<p><code>.gitignore</code>に<code>/config/secrets.yml</code>を含めてしまっている場合は、削除してください。<br/>
その後、git管理化におくため、commitします。</p>

<p>productionの<code>secret_key_base</code>は環境変数から取得するようになっているため、herokuの環境変数に<code>SECRET_KEY_BASE</code>を設定する必要があります。</p>

<h2>環境変数SECRET_KEY_BASEを設定する</h2>

<p>やり方が２通りあります。</p>

<h3>heroku_secretsを使う</h3>

<p>この方法では、<a href="https://github.com/alexpeattie/heroku_secrets">heroku_secrets</a>というgemを利用することでherokuコマンドを打つ必要はありません。</p>

<h4>gemのインストール</h4>

<p>Gemfileにgemを追加して、bundle updateを実行します。</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">gem</span> <span class="s1">&#39;heroku_secrets&#39;</span><span class="p">,</span> <span class="ss">github</span><span class="p">:</span> <span class="s1">&#39;alexpeattie/heroku_secrets&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>rakeコマンドを実行</h4>

<p>その後、rakeコマンドを実行します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>bundle <span class="nb">exec </span>rake heroku:secrets<span class="o">[</span>app-name<span class="o">]</span> <span class="nv">RAILS_ENV</span><span class="o">=</span>production
</span></code></pre></td></tr></table></div></figure>


<p>もう一つの方も作業量としては変わらなそうですね。</p>

<h3>heroku configで環境変数を設定する</h3>

<p>この方法では、heroku config:add で環境変数を直接設定します。</p>

<h4>設定値を作成する</h4>

<p>環境変数に設定する値を取得します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>bundle <span class="nb">exec </span>rake secret <span class="nv">RAILS_ENV</span><span class="o">=</span>production
</span></code></pre></td></tr></table></div></figure>


<h4>herokuの環境変数を設定する</h4>

<p>上記の実行結果を値とした環境変数(SECRET_KEY_BASE)を設定します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>heroku config:add <span class="nv">SECRET_KEY_BASE</span><span class="o">=</span>rake secretの実行結果
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails4でacts-as-taggable-on Gemを使う]]></title>
    <link href="http://jangajan.com/blog/2014/10/04/acts-as-taggable-on-in-rails/"/>
    <updated>2014-10-04T03:40:31+09:00</updated>
    <id>http://jangajan.com/blog/2014/10/04/acts-as-taggable-on-in-rails</id>
    <content type="html"><![CDATA[<p>ユーザーに紐づくタスクに、タグ付けをするという機能を実現する方法です。<br/>
<code>acts-as-taggable-on</code>というgemを利用することで簡単(苦戦した&hellip;)にタグ機能は実現できるそうです。<br/>
なんとかできたっぽい&hellip;</p>

<p>環境は、こんな感じです。</p>

<ul>
<li>Rails 4.1.6</li>
<li>ruby 2.1.2p95</li>
<li>acts-as-taggable-on 3.4.2</li>
</ul>


<p>Githubの<a href="https://github.com/mbleigh/acts-as-taggable-on#tag-ownership">README</a>を参考にしました</p>

<!-- more -->


<h1>Model</h1>

<p>そもそもリレーション関係の設定でハマりましたが、これで良さそうです。<br/>
関係としては<code>user 1-n task</code>となり、taskにタグを設定します。<br/>
タグは、userごとに別々に管理します。</p>

<figure class='code'><figcaption><span>app/models/user.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">acts_as_tagger</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:tasks</span><span class="p">,</span> <span class="ss">dependent</span><span class="p">:</span> <span class="ss">:destroy</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/models/task.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Task</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">acts_as_taggable</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>View</h1>

<p>タグのところだけピックアップ。<br/>
（簡単なサンプル作れば良かった）  <br/>
画面表示するController内のメソッドで、選択可能なタグを<code>@user_tags</code>に入れています。<br/>
タグは複数選択可能にするため、checkboxを利用しました。<br/>
checkbox生成でrailsの仕組みを利用しようとしたのですが、以下の2点を実現しようとしてうまいやり方が見つからなかった&hellip;</p>

<ul>
<li>labelでクリック連携</li>
<li>valueの値をタグの名前</li>
</ul>


<p>form_for内に記述します。</p>

<figure class='code'><figcaption><span>app/views/tasks/_form.html.haml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="c">/ @user_tagsはcontrollerで配列で設定 ex) =&gt; [&quot;tag1&quot;, &quot;tag2&quot;]</span>
</span><span class='line'><span class="p">-</span> <span class="vi">@user_tags</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">tag</span><span class="o">|</span>
</span><span class='line'>  <span class="c">/ tagを複数選択可能にするため、checkboxを利用</span>
</span><span class='line'>  <span class="nt">%input</span><span class="p">{</span><span class="nb">id</span><span class="ss">:&quot;tag-</span><span class="si">#{</span><span class="n">tag</span><span class="si">}</span>&quot; ,name:&#39;task[tag_list][]&#39;, type:&#39;checkbox&#39;,value:&quot;<span class="si">#{</span><span class="n">tag</span><span class="si">}</span>&quot;}
</span><span class='line'>  <span class="nt">%label</span><span class="p">{</span><span class="k">for</span><span class="ss">:&quot;tag-</span><span class="si">#{</span><span class="n">tag</span><span class="si">}</span>&quot;}
</span><span class='line'>    <span class="nt">%span</span><span class="nc">.task-tag</span>
</span><span class='line'>      <span class="p">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">tag</span><span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>タグ付けよりもrailsでcheckbox使うところに時間とられた&hellip;宿題ですね。</p>

<h1>Controller</h1>

<p>リクエストのtask[tag_list]という値の中に、タグが含まれます。<br/>
<code>permit</code>で、配列をチェックしたい場合は、<code>tag_list: []</code>と指定してあげる必要がありました。</p>

<figure class='code'><figcaption><span>app/controllers/tasks_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">TasksController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="c1"># current_user =&gt; User.find(session[:user_id])</span>
</span><span class='line'>    <span class="vi">@task</span> <span class="o">=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">tasks</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="n">task_params</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@task</span><span class="o">.</span><span class="n">user</span> <span class="o">=</span> <span class="n">current_user</span>
</span><span class='line'>    <span class="c1"># tagの設定処理 :withには&#39;tag1, tag2&#39;という形式の文字列を設定することでタグを登録できる</span>
</span><span class='line'>    <span class="n">current_user</span><span class="o">.</span><span class="n">tag</span><span class="p">(</span><span class="vi">@task</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="vi">@task</span><span class="o">.</span><span class="n">tag_list</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;, &#39;</span><span class="p">),</span> <span class="ss">:on</span> <span class="o">=&gt;</span> <span class="ss">:tags</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@task</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="c1"># 成功処理</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="c1"># 失敗処理</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">task_params</span>
</span><span class='line'>    <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:task</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span>
</span><span class='line'>      <span class="c1"># tag_list: []を指定することで、checkboxの複数の値を配列にして、tag_listに設定可能になる</span>
</span><span class='line'>      <span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:deadline</span><span class="p">,</span> <span class="ss">tag_list</span><span class="p">:</span> <span class="o">[]</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>もしかしたらもっといいやり方があるかもしれません。<br/>
気をつける場所はいくつかあるものの、意外と簡単かも。</p>

<h1>補足</h1>

<h2>ユーザーが設定しているタグの一覧を取得する</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="vi">@user_tags</span> <span class="o">=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">owned_tag_list</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;tag1&quot;</span><span class="p">,</span> <span class="s2">&quot;tag2&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ヘルパーメソッドでHaml::Helpersを使う]]></title>
    <link href="http://jangajan.com/blog/2014/10/03/haml-helper/"/>
    <updated>2014-10-03T03:16:51+09:00</updated>
    <id>http://jangajan.com/blog/2014/10/03/haml-helper</id>
    <content type="html"><![CDATA[<p>HAMLのViewのヘルパーメソッドどう書くのかという話です。<br/>
<a href="http://haml.info/docs/yardoc/Haml/Helpers.html">Module Haml::Helpers</a>を使います。</p>

<!-- more -->


<p>普通にタグを書く分には<code>haml_tag</code>を使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">module</span> <span class="nn">ApplicationHelper</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">alert_close_icon</span>
</span><span class='line'>    <span class="n">haml_tag</span><span class="p">(</span><span class="ss">:button</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s1">&#39;close&#39;</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="s1">&#39;button&#39;</span><span class="p">,</span> <span class="s1">&#39;data-dismiss&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;alert&#39;</span><span class="p">,</span> <span class="s1">&#39;aria-hidden&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;true&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">haml_concat</span> <span class="s1">&#39;&amp;times;&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bootstrap3のモーダル表示（HAMLサンプル）]]></title>
    <link href="http://jangajan.com/blog/2014/09/29/haml-modal-in-bootstrap/"/>
    <updated>2014-09-29T19:50:21+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/29/haml-modal-in-bootstrap</id>
    <content type="html"><![CDATA[<p>bootstrap3でModalウインドウを表示するサンプルです。
サンプルはHAML形式です。</p>

<!-- more -->


<p>呼び出しのボタンで、<code>data-toggle="modal"</code>と<code>data-target="#表示するモーダルのid"</code>を指定します。<br/>
Modalは下のdiv構成で組むことで表示できます。<br/>
<code>#task-modal</code>は呼び出すModalで設定したものを指定します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="c">/ Modalの呼び出し元になるボタン</span>
</span><span class='line'><span class="nt">%button</span><span class="nc">.btn.btn-info.btn-lg.btn-block</span><span class="p">{</span><span class="ss">data</span><span class="p">:</span> <span class="p">{</span><span class="ss">toggle</span><span class="p">:</span> <span class="s1">&#39;modal&#39;</span><span class="p">,</span> <span class="ss">target</span><span class="p">:</span> <span class="s1">&#39;#task-modal&#39;</span><span class="p">}</span>}
</span><span class='line'>  Create Modal Task
</span><span class='line'>
</span><span class='line'>...(略)
</span><span class='line'>
</span><span class='line'><span class="c">/ 表示するModal</span>
</span><span class='line'><span class="nt">%div</span><span class="nc">.modal</span><span class="nf">#task-modal</span>
</span><span class='line'>  <span class="nt">%div</span><span class="nc">.modal-dialog</span>
</span><span class='line'>    <span class="nt">%div</span><span class="nc">.modal-content</span>
</span><span class='line'>      <span class="nt">%div</span><span class="nc">.modal-header</span>
</span><span class='line'>        <span class="nt">%button</span><span class="nc">.close</span><span class="p">{</span><span class="ss">type</span><span class="p">:</span><span class="s1">&#39;button&#39;</span><span class="p">,</span> <span class="ss">data</span><span class="p">:</span> <span class="p">{</span><span class="ss">dismiss</span><span class="p">:</span> <span class="s1">&#39;modal&#39;</span><span class="p">}</span>}
</span><span class='line'>          X
</span><span class='line'>        <span class="nt">%h4</span><span class="nc">.modal-title</span>
</span><span class='line'>          TITLE
</span><span class='line'>      <span class="nt">%div</span><span class="nc">.modal-body</span>
</span><span class='line'>        <span class="nt">%p</span>
</span><span class='line'>          BODY
</span><span class='line'>      <span class="nt">%div</span><span class="nc">.modal-footer</span>
</span><span class='line'>        <span class="nt">%button</span><span class="nc">.btn.btn-primary</span><span class="p">{</span><span class="ss">type</span><span class="p">:</span> <span class="s1">&#39;button&#39;</span><span class="p">}</span>
</span><span class='line'>          Save
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ページ単位のjavascriptにcontent_forを使う]]></title>
    <link href="http://jangajan.com/blog/2014/09/27/content-for/"/>
    <updated>2014-09-27T04:14:07+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/27/content-for</id>
    <content type="html"><![CDATA[<p>ページ単位で特定のjavascriptを実行させたい時に、content_forを使えばいいんだね、という結論でした。</p>

<!-- more -->


<h1>javascriptをページごとのファイルに書けない理由</h1>

<p>そもそもbootstrapで作成したコンテンツにこんな記載がありました。
hamlでyatiのテーマを適用しています。</p>

<figure class='code'><figcaption><span>app/views/layouts/application.html.haml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="c">/ ...ページ最下部</span>
</span><span class='line'>      <span class="c">= yield</span>
</span><span class='line'><span class="c">/</span>
</span><span class='line'>  <span class="c">Javascripts</span>
</span><span class='line'>  <span class="c">\==================================================</span>
</span><span class='line'><span class="c">/ Placed at the end of the document so the pages load faster</span>
</span><span class='line'><span class="p">=</span> <span class="n">javascript_include_tag</span> <span class="s2">&quot;yeti&quot;</span>
</span><span class='line'><span class="p">=</span> <span class="k">yield</span><span class="p">(</span><span class="ss">:page_javascript</span><span class="p">)</span> <span class="k">if</span> <span class="n">content_for?</span><span class="p">(</span><span class="ss">:page_javascript</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>各ページのコンテンツは、<code>= yield</code>に埋め込まれます。<br/>
しかし、<code>= javascript_include_tag "yeti"</code>という処理でJavascriptの定義を追加するため、各ページのhamlにjavascriptを書くとjQueryの処理が動きません。<br/>
そこで、<code>= yield(:page_javascript) if content_for?(:page_javascript)</code>を利用します。</p>

<h1>content_forの使い方</h1>

<p>各ページのhamlの下部でcontent_forを利用することにより、application.html.hamlの<code>= yield(:page_javascript) if...</code>のところに出力されます。</p>

<figure class='code'><figcaption><span>app/views/tasks/new.html.haml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="p">-</span> <span class="n">content_for</span> <span class="ss">:page_javascript</span> <span class="k">do</span>
</span><span class='line'>  <span class="nd">:javascript</span>
</span><span class='line'>    <span class="nd">jQuery(&#39;#datetimepicker&#39;).datetimepicker();</span>
</span></code></pre></td></tr></table></div></figure>


<p>なので、ページごとのjavascriptは<code>content_for :page_javascript</code>を利用して書くようにしましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsでbootswitchのテーマを適用したらActionView::Template::Error]]></title>
    <link href="http://jangajan.com/blog/2014/09/26/include-css-error-in-rails/"/>
    <updated>2014-09-26T16:49:11+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/26/include-css-error-in-rails</id>
    <content type="html"><![CDATA[<p>bootswitch適用時に発生したActionView::Template::Errorの解消方法です。</p>

<!-- more -->


<h1>bootswatch適用</h1>

<p>以下のようにbootswatchを適用しました。</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;twitter-bootswatch-rails&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;twitter-bootswatch-rails-helpers&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;therubyracer&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>今回はyetiを適用しています。<br/>
テンプレートエンジンはslimを使っています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>bundle <span class="nb">exec </span>rails g bootswatch:install yeti
</span><span class='line'>bundle <span class="nb">exec </span>rails g bootswatch:import yeti
</span><span class='line'>bundle <span class="nb">exec </span>rails g bootswatch:layout yeti
</span><span class='line'>mv app/views/layouts/yeti.html.slim app/views/layouts/application.html.slim
</span></code></pre></td></tr></table></div></figure>


<p>最後のmvでテンプレートファイルの入れ替えを行っています。</p>

<h1>ActionView::Template::Errorエラー</h1>

<p>ここで<code>rails s</code>すると、以下のエラーが発生しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ActionView::Template::Error <span class="o">(</span>Asset filtered out and will not be served: add <span class="sb">`</span>Rails.application.config.assets.precompile +<span class="o">=</span> %w<span class="o">(</span> yeti.css <span class="o">)</span><span class="sb">`</span> to <span class="sb">`</span>config/initializers/assets.rb<span class="sb">`</span> and restart your server<span class="o">)</span>:
</span><span class='line'>     9:     / Le HTML5 shim, <span class="k">for</span> IE6-8 support of HTML elements
</span><span class='line'>    10:     /<span class="o">[</span><span class="k">if</span> lt IE 9<span class="o">]</span>
</span><span class='line'>    11:       <span class="o">=</span> javascript_include_tag <span class="s2">&quot;http://html5shim.googlecode.com/svn/trunk/html5.js&quot;</span>
</span><span class='line'>    12:     <span class="o">=</span> stylesheet_link_tag <span class="s2">&quot;yeti&quot;</span>, :media <span class="o">=</span>&gt; <span class="s2">&quot;all&quot;</span>
</span><span class='line'>    13:     <span class="o">=</span> yield<span class="o">(</span>:page_stylesheet<span class="o">)</span> <span class="k">if</span> content_for?<span class="o">(</span>:page_stylesheet<span class="o">)</span>
</span><span class='line'>    14:
</span><span class='line'>    15:
</span><span class='line'>  app/views/layouts/application.html.slim:12:in <span class="sb">`</span>_app_views_layouts_application_html_slim__3298097478580668215_70163995513140<span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  Rendered vendor/bundle/ruby/2.1.0/gems/actionpack-4.1.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb <span class="o">(</span>1.0ms<span class="o">)</span>
</span><span class='line'>  Rendered vendor/bundle/ruby/2.1.0/gems/actionpack-4.1.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb <span class="o">(</span>1.0ms<span class="o">)</span>
</span><span class='line'>  Rendered vendor/bundle/ruby/2.1.0/gems/actionpack-4.1.6/lib/action_dispatch/middleware/templates/rescues/template_error.html.erb within rescues/layout <span class="o">(</span>15.5ms<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>テンプレートファイルの12行目、ちょうどyetinテーマのcssのところですね。<br/>
どうやら、呼び込みたいassetsファイルがちゃんとprecompileされていないらしい。<br/>
追加したいなら、<code>config/initializers/assets.rb</code>にこんな感じに追加しろぼけってエラーメッセージ優しい。</p>

<h1>エラー解消</h1>

<p>そんなわけでこんな感じで修正。</p>

<figure class='code'><figcaption><span>config/initializers/assets.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">precompile</span> <span class="o">+=</span> <span class="sx">%w( yeti.css yeti.js )</span>
</span></code></pre></td></tr></table></div></figure>


<p>yeti.jsも同じエラーが出たのであわせて解消。<br/>
これで<code>rails s</code>したらスタイル代わった。やった。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ForbiddenAttributesErrorが発生]]></title>
    <link href="http://jangajan.com/blog/2014/09/24/forbiddenattributeserror-in-rails/"/>
    <updated>2014-09-24T02:33:27+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/24/forbiddenattributeserror-in-rails</id>
    <content type="html"><![CDATA[<p>Rails4で、ForbiddenAttributesErrorが発生した場合の対応です。</p>

<h1>ActiveModel::ForbiddenAttributesError発生</h1>

<p>次のようなエラーが発生しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ActiveModel::ForbiddenAttributesError <span class="o">(</span>ActiveModel::ForbiddenAttributesError<span class="o">)</span>:
</span><span class='line'>  app/controllers/posts_controller.rb:13:in <span class="sb">`</span>create<span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>13行目が悪さをしているらしい&hellip;</p>

<figure class='code'><figcaption><span>app/controllers/posts_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>  <span class="vi">@feed</span> <span class="o">=</span> <span class="no">Feed</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:post</span><span class="o">]</span><span class="p">)</span> <span class="c1"># 13行目</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>これはmass assignmentの問題を解決するために、Rails4から標準で導入された対応により発生しました。<br/>
mass assignmentとはsubmitしたデータから簡単にModelを作ることができるRailsの仕組みです。<br/>
しかし、意図しないパラメータも含んだ状態でModelが作られるという脆弱性のため、このようなエラーが発生するようになりました。<br/>
mass assignmentの問題とその対策についての詳細な説明は<a href="http://www.willnet.in/48">Rails4.0に含まれる strong_parameters について</a>を参考にしてください。</p>

<h1>対応</h1>

<h2>Model作成に必要なsubmitデータを指定する方法</h2>

<p>Model作成に必要なsubmitデータを明示的に指定し、チェックする方法です。
permitメソッドを使うことで、submitデータを絞り込みます。</p>

<figure class='code'><figcaption><span>app/controllers/posts_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>  <span class="vi">@feed</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">post_params</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kp">private</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">post_params</span>
</span><span class='line'>  <span class="c1"># submitしたデータのうち、Model作成に必要なものを</span>
</span><span class='line'>  <span class="c1"># permitの引数に指定する</span>
</span><span class='line'>  <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:params</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span>
</span><span class='line'>    <span class="ss">:title</span><span class="p">,</span> <span class="ss">:body</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>エラーを発生させない方法</h2>

<p>こちらはmass assignmentの問題を解決していないため、お勧めしません。<br/>
pertmitメソッドを通さず、全てのsubmitデータを利用します。</p>

<figure class='code'><figcaption><span>config/application.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="no">Rails</span><span class="o">::</span><span class="no">Application</span>
</span><span class='line'>    <span class="c1"># デフォルトはfalseに設定されている</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">action_controller</span><span class="o">.</span><span class="n">permit_all_parameters</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>エラー発生場所</h1>

<p><code>ActiveModel::ForbiddenAttributesError</code>は次の処理で発生します。</p>

<ul>
<li>ActiveModel::ForbiddenAttributesProtection#sanitize_for_mass_assignment(attributes)</li>
</ul>


<p>上述のpermitメソッドを実行することで、データはチェック済みの状態になります。<br/>
このチェック済み状態を確認するのが、<code>sanitize_for_mass_assignment</code>の役割です。<br/>
permitメソッドは<code>ActionController::Parameters</code>に定義してあります。</p>

<h1>未チェックのsumitデータがあった場合の対応</h1>

<p>未チェックのsubmitデータがあった場合の挙動をコントロールできます。<br/>
<code>config.action_controller.action_on_unpermitted_parameters</code>を使います。</p>

<h2>エラーにする</h2>

<figure class='code'><figcaption><span>config/application.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="no">Rails</span><span class="o">::</span><span class="no">Application</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">action_controller</span><span class="o">.</span><span class="n">action_on_unpermitted_parameters</span> <span class="o">=</span> <span class="ss">:raise</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ログに出力する</h2>

<figure class='code'><figcaption><span>config/application.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="no">Rails</span><span class="o">::</span><span class="no">Application</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">action_controller</span><span class="o">.</span><span class="n">action_on_unpermitted_parameters</span> <span class="o">=</span> <span class="ss">:log</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>出力結果はこうなります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Unpermitted parameters: hogehoge
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I18nの設定でdatetime_selectの月表示がおかしい]]></title>
    <link href="http://jangajan.com/blog/2014/09/12/perfect-rails-i18n-months/"/>
    <updated>2014-09-12T19:09:36+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/12/perfect-rails-i18n-months</id>
    <content type="html"><![CDATA[<p>前記事に引き続き、i18nの対応です。<br/>
これいっぱいありそう。<br/>
datetime_selectで表示した<code>月</code>欄の表示が妙だ。</p>

<!-- more -->


<h1>ja.ymlにmonth_namesを追加</h1>

<p>翻訳ファイルに<code>month_names</code>を追加しましょう。</p>

<figure class='code'><figcaption><span>config/locals/ja.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">ja</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">date</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">order</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">:year</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">:month</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">:day</span>
</span><span class='line'>    <span class="l-Scalar-Plain">month_names</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">~</span><span class="p-Indicator">,</span> <span class="nv">1月</span><span class="p-Indicator">,</span> <span class="nv">2月</span><span class="p-Indicator">,</span> <span class="nv">3月</span><span class="p-Indicator">,</span> <span class="nv">4月</span><span class="p-Indicator">,</span> <span class="nv">5月</span><span class="p-Indicator">,</span> <span class="nv">6月</span><span class="p-Indicator">,</span> <span class="nv">7月</span><span class="p-Indicator">,</span> <span class="nv">8月</span><span class="p-Indicator">,</span> <span class="nv">9月</span><span class="p-Indicator">,</span> <span class="nv">10月</span><span class="p-Indicator">,</span> <span class="nv">11月</span><span class="p-Indicator">,</span> <span class="nv">12月</span><span class="p-Indicator">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちなみに月表示には省略形も存在します。(JanuaryだとJanとか)<br/>
この時は<code>abbr_month_names</code>というものを使います。<br/>
日本語だとそもそも表記が短いのであまり意味はないと思いますが、思わぬところでエラーが発生したらそちらを疑いましょう。</p>

<p>これもactivesupportにenの設定はありました。<br/>
曜日も同様なんでご注意を。
と思ったら、素晴らしいものがありました。</p>

<ul>
<li><a href="https://github.com/svenfuchs/rails-i18n/blob/master/rails/locale/ja.yml">https://github.com/svenfuchs/rails-i18n/blob/master/rails/locale/ja.yml</a>

<ul>
<li>各言語ごとにあるのでこれベースにするのがいいですね。</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
