<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[JanGaJan.com]]></title>
  <link href="http://jangajan.com/atom.xml" rel="self"/>
  <link href="http://jangajan.com/"/>
  <updated>2014-12-21T20:50:34+09:00</updated>
  <id>http://jangajan.com/</id>
  <author>
    <name><![CDATA[talkto_me]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MetaNight 第4回を開催しました]]></title>
    <link href="http://jangajan.com/blog/2014/12/21/e-g-d-meta-night-4th/"/>
    <updated>2014-12-21T18:25:54+09:00</updated>
    <id>http://jangajan.com/blog/2014/12/21/e-g-d-meta-night-4th</id>
    <content type="html"><![CDATA[<p>イベント概要については、<a href="http://jangajan.com/blog/2014/11/02/about-meta-night/">About MetaNight</a>をご覧ください。</p>

<p><a href="http://e-g-d.doorkeeper.jp/">MetaNight</a>という<a href="http://www.amazon.co.jp/gp/product/B00N9I0RMQ/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00N9I0RMQ&amp;linkCode=as2&amp;tag=pochan0919-22">Metaprogramming Ruby 2</a>の読書会の第４回目を開催しました。</p>

<p><a href="http://www.amazon.co.jp/gp/product/B00N9I0RMQ/ref=as_li_ss_il?ie=UTF8&camp=247&creative=7399&creativeASIN=B00N9I0RMQ&linkCode=as2&tag=pochan0919-22"><img border="0" src="http://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B00N9I0RMQ&Format=_SL250_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=pochan0919-22" ></a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=pochan0919-22&l=as2&o=9&a=B00N9I0RMQ" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<!-- more -->


<h1>活動内容</h1>

<p>Part 1 Chapter2 の Inside the Object ModelからThe Truth About Classesの前までやりました。<br/>
読みながらの意見とかはこちらに載せてあります。<br/>
<a href="https://trello.com/b/djxLBmZ8/metanight-4th">https://trello.com/b/djxLBmZ8/metanight-4th</a></p>

<h1>感想</h1>

<p>PUBLIC HOUSEに行きました。</p>

<h2>inside the object model</h2>

<p>Billがさらっと書いた図がこの部分で言いたいことを全てを象徴しています。オブジェクトとクラス、インスタンス変数とメソッドの関係についてです。<br/>
今回の内容でRubyにおけるオブジェクトとクラスの役割分担や関係性が少しずつ見えてきました。図で視覚的に理解するというのは非常に大事ですね。</p>

<p>立場が変わると、言葉の意味が変わってくるという点も興味深かったです。<br/>
クラスはオブジェクトが呼び出すことのできる<code>メソッド</code>を定義しているけれども、正確には、クラスはオブジェクトが呼び出すことのできる<code>インスタンスメソッド</code>を定義しています。クラスから見た<code>インスタンスメソッド</code>はオブジェクトから見た<code>メソッド</code>となります。<br/>
<a href="https://trello.com/c/5nrd8XoA/36--">メソッドの差分を見てみた</a>で試してみました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">obj</span> <span class="o">=</span> <span class="no">Object</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="no">Object</span><span class="o">.</span><span class="n">instance_methods</span> <span class="o">-</span> <span class="n">obj</span><span class="o">.</span><span class="n">methods</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[]</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">methods</span> <span class="o">-</span> <span class="no">Object</span><span class="o">.</span><span class="n">instance_methods</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[]</span>
</span></code></pre></td></tr></table></div></figure>


<p>となります。ちなみに、比較対象をObject.methodsにすると差分が出てきます。これについては後々出てくると思うのでちょっと置いておきます。</p>

<p>他にも<code>methods</code>や<code>instance_methods</code>のようなオブジェクトの中を参照するコードのことを<code>introspective code</code>と言っているようでしたが、これは一般的な用語なのかな？と疑問に感じたりしました。</p>

<h2>英語</h2>

<ul>
<li>Let’s wrap it all up</li>
</ul>


<p>しっくりきたのは、<code>まとめましょう</code>。</p>

<ul>
<li>OO speak</li>
</ul>


<p>OOはObject-Oriented 慣れないと？？ですね。</p>

<ul>
<li>spring into</li>
</ul>


<p>湧き上がる、という表現に落ち着きました。ないところから自然と生まれる、というニュアンスなのかなぁ&hellip;<br/>
「Instance variables just spring into existence when you assign them a value」というところで使われていた。お洒落な言い回し。</p>

<h2>その他</h2>

<ul>
<li>クラス図っぽい図が出てきたことを皮切りに、UMLやBPMNについて</li>
<li>object_idはメソッドだった(どこかに持っているのかな？そういう疑問は<a href="http://www.amazon.co.jp/gp/product/4274050653/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4274050653&amp;linkCode=as2&amp;tag=pochan0919-22">これ</a>を読んで解決しよう！)</li>
</ul>


<p>第5回は1月にやります！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[よちよち.rbに参加しよう]]></title>
    <link href="http://jangajan.com/blog/2014/12/21/letsjoinyochiyochirb/"/>
    <updated>2014-12-21T06:39:32+09:00</updated>
    <id>http://jangajan.com/blog/2014/12/21/letsjoinyochiyochirb</id>
    <content type="html"><![CDATA[<p><a href="http://www.adventar.org/calendars/582">よちよち.rb Advent Calendar 2014</a> 21日目の記事です。 <br/>
昨日は、記念すべき第50回のmeetupsをtoggetterでまとめた、<a href="http://togetter.com/li/759800">よちよち.rb 第50回 みんなで LT デビューしよう会</a>でした。EMOいLT連投で初めてとは思えないクオリティでした。当の自分は遅刻した上に落ちを接続準備の時に流してしまい、スライド2ページ残しでやりきれなかったという惨い結果でした。次回リベンジしたいです。</p>

<p>今回はよちよち.rbに参加する方法を紹介します。</p>

<p>よちよち.rbでは初参加と、２回目以降の参加では事前準備が少し違います。<br/>
詳しいことはdoorkeeperの申し込み画面に全て書いてあるので<a href="http://yochiyochirb.doorkeeper.jp/events/18523">こちらの「やってきてもらいたいこと」</a>をご覧ください。 <br/>
これはあくまで今時点の最新なので、実際に参加するイベントの記載内容をご覧ください。</p>

<!-- more -->


<h1>初参加パターン</h1>

<h2>事前準備</h2>

<h3>GitHubのアカウントをとる</h3>

<p>まずGitHubのアカウントを取得しましょう。できるならtwitterなど他のWebサービスと同じアカウント名にすると、後々いいことがあります。名前大事。超大事。</p>

<h3>Doorkeeperのアカウントをとる</h3>

<p><a href="https://manage.doorkeeper.jp/user/sign_up">https://manage.doorkeeper.jp/user/sign_up</a></p>

<p>GitHubのアカウントでログインできます！<br/>
できれば、GitHubとfacebookとTwitterは連携しておきましょう。</p>

<h2>よちよち.rbに参加申し込みする</h2>

<p>早速よちよち.rbのイベントページで参加申し込みをしましょう！<br/>
イベントページに行って申し込みボタンを押すと、いくつかアンケートが出てきます。  なにこれわけわからない！と思った方、ちょっと調べてみて、それでもわからなければ素直にその旨を書けば大丈夫です。<br/>
参加して一緒に解決していきましょう。</p>

<h2>自己紹介を書く</h2>

<p>簡単な自己紹介をGistで書きます。</p>

<p><a href="https://gist.github.com/">https://gist.github.com/</a></p>

<p>ここも、GitHubのアカウントでログインしてください。<br/>
Gistは、簡単なメモ帳アプリです。メモごとにURLが作られます。<br/>
<a href="http://tyoshikawa1106.hatenablog.com/entry/2013/04/10/000026">わかりやすい使い方はこちら</a></p>

<p>書式はMarkdownという形式で書きます。<br/>
GitHubには<a href="https://help.github.com/articles/github-flavored-markdown/">専用のMarkdown</a>があります。リンク先は英語ですけどめげないでください。初回だから書式とか気にせずいきましょう。<br/>
下の内容を書きましょう！</p>

<blockquote><p>書いておいてほしい内容</p>

<p>お名前</p>

<p>ご職業</p>

<p>以下のリンクを参考にした Rails 4 と Github に関するあなたのステータス<a href="https://github.com/yochiyochirb/meetups/blob/master/member_status.md">各技術のステータス | よちよち.rb</a></p>

<p>あと、たまに宿題(よくわからなかったりしたらスルー、だけど書いておくと面白いです)</p></blockquote>

<h2>自己紹介をよちよち.rbに共有する</h2>

<p>あと少し!!!<br/>
イベントページにこんな記載があります。</p>

<p><a href="http://gyazo.com/ad27260e7de843e1126b828273904580"><img src="http://i.gyazo.com/ad27260e7de843e1126b828273904580.png" alt="Gyazo" /></a></p>

<p>「できあがったら、GistのURLをこちらへ貼ってください：」の下にあるURLにアクセスしましょう。<br/>
画面の下にコメント欄があるので、Gistの自己紹介のURLを書き込んでCommentボタンを押すと準備完了です。</p>

<p>長くなってしまいましたが、ここまでが初参加パターンです。<br/>
そんなに時間はかからないはずです。</p>

<p>次に行く前に、ちょっと脇道にそれます。</p>

<h3>Git、GitHub、Gistの違い</h3>

<p>ここまでで、Git、GitHub、Gistと似たような名前のものがいくつか出てきました。</p>

<ul>
<li>Git

<ul>
<li>バージョン管理のツール（アプリケーションと置き換えてもらっても大丈夫）</li>
<li>バージョン管理ができるようになると、変更履歴を持つことができます</li>
<li>つまり一つの歴史が生まれます</li>
<li>これがあると、世の中の開発者もとい、サービスの利用者みんなが幸せになれるツールです（怪しい勧誘文句になってしまった）</li>
</ul>
</li>
<li>GitHub

<ul>
<li>Gitをブラウザから使いやすくして便利な機能をいっぱいつけてくれるWebサービス</li>
<li>しかもSNS</li>
<li>それでもって、会社の名前(正式な社名はGitHub, Inc)</li>
<li>これが落ちると、世の中の開発者もとい、サービスの利用者みんなが不幸になります</li>
<li>これが落ちると、Googleキーワード検索の上位(というか一位)に滑り込んできます</li>
<li>アクセスできないと思ったらTwitterで検索しましょう。阿鼻叫喚が聞こえます</li>
</ul>
</li>
<li>Gist

<ul>
<li>GitHub, incが提供するメモ帳です。</li>
<li>もうちょっと正確にいうと、シンプルなsnippets共有アプリです。snippetsというのはコードの断片です。コードには再利用性が高いものがたくさんあります。断片をメモしておくことで、参考にしたいアプリケーションのソースコードを開いてコピペしなくて済むようになります。</li>
<li>Gistに保存しておくことで、他人との共有がスムーズにできたり、ブログへのソースコードの埋め込みが楽になったりします。</li>
<li>別にコードに限らず、ただのメモ帳として使うこともできます。メリットはGitで管理可能なところ。バージョン管理できるので変更履歴とかも把握しやすい!</li>
</ul>
</li>
</ul>


<p>ちなみにGitHub, incはGitの開発にも関わっています。強大です。<br/>
もし、キャラのOctocatグッズが欲しかったら、GitHub storeなるものを利用してみましょう。</p>

<h1>2回目パターン</h1>

<h2>よちよち.rbに参加申し込みする</h2>

<p>初参加と同じ。</p>

<h2>自己紹介を書いて、GitHubでPullRequestを出す</h2>

<p>今度はGistではなく、Githubを利用します。</p>

<ol>
<li>Githubからmeetupsのリポジトリをローカルにcloneする</li>
<li>新しいブランチを作る</li>
<li>自己紹介のファイルを作成</li>
<li>Gitを使ってadd, commitして、GitHubにpush</li>
<li>GitHubでPull Request作って</li>
<li>メンバーからLGTMを2つもらったら</li>
<li>マージする</li>
</ol>


<p>駆け足でいきました。<br/>
ここまで、Meetupsまでにやる必要があります。<br/>
<a href="https://github.com/yochiyochirb/meetups/wiki#how-to-use-github">ここ</a>の<code>How to use Github</code>がすごく役に立ちます。<br/>
わからなければ質問してみましょう。  <br/>
質問することがこのコミュニティの醍醐味でもあります。<br/>
ちなみに(おそらく間違っていないのですが)、今参加している人は皆ここで一度躓いています。</p>

<h1>まとめ</h1>

<p>興味があって参加を考えている方は次回以降のmeetups時に参考にしてください。<br/>
明日はumekumiさんの「初めてLTをやった！」です。お楽しみに！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[localhostのelasticsearchにcurlしたらConnection Refused]]></title>
    <link href="http://jangajan.com/blog/2014/12/16/fail-to-curl-to-elasticsearch/"/>
    <updated>2014-12-16T19:13:11+09:00</updated>
    <id>http://jangajan.com/blog/2014/12/16/fail-to-curl-to-elasticsearch</id>
    <content type="html"><![CDATA[<p>よっしゃ、試してみよう！と思って出鼻をくじかれた話し。</p>

<p>elasticsearch使ってる方多いですよね！今関わっているPJでも使っているので、どんなものか試してみました。ところが起動確認で早速つまづく始末です。</p>

<p>elasticsearchの起動確認するときに、curlを使ってみたらConnection refusedが発生しました。</p>

<!-- more -->


<h1>問題: curlしたらConnection refused</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>elasticsearch -d
</span><span class='line'><span class="nv">$ </span>curl -XPUT <span class="s1">&#39;http://localhost:9200/test/&#39;</span>
</span><span class='line'>curl: <span class="o">(</span>7<span class="o">)</span> Failed to connect to localhost port 9200: Connection refused
</span></code></pre></td></tr></table></div></figure>


<p>!?</p>

<p>解決策は<a href="http://stackoverflow.com/questions/22952676/curl-failed-to-connect-to-localhost-port-80">こちら</a>にありました。</p>

<h1>原因: IPv6使ってる</h1>

<p>hostsファイル内の<code>::1 localhost</code>が有効になっていると、curlがIPv6でアクセスしてしまうらしい。<br/>
何気ないところ見落としてました&hellip;</p>

<h1>解決: IPv4使うようにする</h1>

<p><code>--ipv4</code>オプション使ってやる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>curl --ipv4 -XPUT <span class="s1">&#39;http://localhost:9200/test/&#39;</span>
</span><span class='line'><span class="o">{</span><span class="s2">&quot;acknowledged&quot;</span>:true<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014年反省会]]></title>
    <link href="http://jangajan.com/blog/2014/12/12/reviewing-2014/"/>
    <updated>2014-12-12T02:36:07+09:00</updated>
    <id>http://jangajan.com/blog/2014/12/12/reviewing-2014</id>
    <content type="html"><![CDATA[<p><a href="http://www.adventar.org/calendars/582">よちよち.rb Advent Calendar 2014</a> 12日目の記事です。   <br/>
昨日は、waterlowさんの<a href="http://waterlow2013.hatenablog.com/entry/2014/12/11/125423">私のよちよち.rb活用法</a>、でした。私は初めて参加した勉強会がよちよち.rbだったのですが、&#8217;悩むのOKの場所として&#8217;っていうのは、このコミュニティの大好きなところ一つです。誰かに教えてもらうのではなく、わからないことは声をあげて、一緒に調べて解決していくアプローチ。<br/>
最初は難しかったのですが(特にわからないことを声に出すところ)、誰にでも発言できる雰囲気をうまく作り出していて、また参加したいなって思わせてくれます。</p>

<p>さて、今回は自分なりに2014年を振り返ってみます。</p>

<!-- more -->


<h1>２月に引越し</h1>

<p>引っ越しました。といっても、同じくで前住んでいたところから歩いて30分かからないところです。駅近くなってバス使わなくなった。部屋が広くなった、車の音で起こされることがなくなった、けど家賃は上がった。雪の日に前の家から荷物運んでたのいい思い出です。</p>

<h1>3月に初めて勉強会に参加</h1>

<p>引っ越しのときに積ん読になっていた<a href="http://www.amazon.co.jp/gp/product/4274068579/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4274068579&amp;linkCode=as2&amp;tag=pochan0919-22">7つの言語、7つの世界</a>という良書を発見して、読んでみたらRubyがなんか面白そうということに気が付きました。<br/>
勢いで<a href="http://www.amazon.co.jp/gp/product/4774162876/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4774162876&amp;linkCode=as2&amp;tag=pochan0919-22">WEB+DB PRESSのRubyの特集が組まれていたやつ</a>を買ってみてRuby入れて、よしRailsだ！っていじってみたものの、仕組みが全くわからなかったんですね。何がわからないかわからない状態。一人でやるのちょっとつらそうだなぁと思い、初心者向けのRubyの勉強会を探していると、よちよち.rb 第12回の募集を見つけました。<br/>
参加直前にTutorialをやって追いついたのとか懐かしいです。そういえば、@ohtsuka_t さんとはよちよち同期でした。<br/>
参加して衝撃だったのは、エンジニア以外の参加者がいたこと。プログラミングのバックグラウンドはないけれど、継続参加している方が多かったんです。<br/>
よちよち.rbの魅力やコミュニティの色は、アドベントカレンダーで余すことなく伝えてくれているので是非見てみてください！</p>

<p>この時、4月に浅草でRubyのカンファレンスみたいなのが行われるという話を聞いて早速申し込みました。</p>

<h1>4月に初めてのRubyのカンファレンスに参加</h1>

<p>それで、大江戸Ruby会議04というイベントに参加しました。こういうイベントに参加したことがなかったので、スーツ着ていかないといけないのかと勘ぐってしまいましたが、誰もスーツなんて着ていなかったですね。場違いにならなくてよかった。<br/>
カジュアルそうに見えて、話している内容が濃密でした。今スピーカー眺めたんですけど本当に豪華なイベントでしたね。<br/>
参加してわかったのですが、皆さんRubyへの並々ならない愛を持っているなと感じました。<br/>
参加した後の勢いでブログを立てました。</p>

<h1>5月に初めてiOSのアプリをリリース</h1>

<p>ちょっと脱線して、iphoneアプリを作ってリリースしたのですが、１週間ぐらいしたら、Macが壊れてソースコードが消えました。お蔵入りです。バージョン管理の大切さを学びました。<br/>
よちよちのおかげで少しずつgitの使い方やGitHubの触り方が分かってきたところです。</p>

<h1>6月にGithub Kaigiに参加</h1>

<p>バージョン管理の大切さもわかってきたところでGitHub Kaigiです。Rubyに限らず普段GitHubを使っている人、後Atomのセッションとかありましたね。よくよく思い出してみたら、Github Kaigi、YAPC::Asia Tokyo 2014、Ruby Kaigi全部でGitHubの人の話聞いてる。Githubのおっかけしてる&hellip;</p>

<h1>8月にRailsとGitHubを使った初めてのチーム開発とYAPC::Asia Tokyo 2014に参加</h1>

<p>@katorieさんと@Yuki3738さんの思いつきにより、コミュニティのKajaの選出アプリを作ろうという話が盛り上がりました。多分２週間ぐらいでコミュニティの数名で作りました。大事なのは動くものを作って世の中に出すことをモットーになんとかリリースできました。<br/>
空いている時間を利用した開発やリモートでのコミュニケーションの方法を手探りでやりつつ、なんとか形になるものを作れたのは嬉しかったです。<br/>
ちなみに、月末で退職したのですが、最後の金曜を休みにしてYAPC::Asia Tokyo 2014へ。Rubyのカンファレンスとは違う面白さ、もっと緩くて自由な風潮がありました。<br/>
2015年も行きたいし、最後とアナウンスがあったのは悲しいけれどもし、形態を変えて、例えばPerlじゃなくてプログラミングのカンファレンスとして続くことがあれば、毎年参加したい。そういえばしゅーさんがこっそりスタッフで参加してましたね。</p>

<h1>9月にRubyKaigi 2014のレポート班を担当しました</h1>

<p>やめた直後はほとんど家から出ず、ダラーっと過ごしていました。楽だけどまじでダメになりますね。<br/>
@odailly_jpさんに声をかけていただき、RubyKaigiのレポート班に参加してみました。参加できなかった人は是非次回参加してください。この時の参加のモチベーションや人間関係が今も生きていて、一つの転換期になりました。<br/>
後、Hirobaに参加しました。家族よりも毎日顔合わせている人がいて面白かったです。Hirobaの考え方は素敵ですよね。</p>

<h1>10月、11月はよちよち.rbの外に目を向けてみた</h1>

<p>ホームコミュニティはよちよち.rbですが、Ruby KaigiやHirobaで色々なコミュニティがあることを知り、ニートで時間もあるし外に目を向けてみようと思い、近場の勉強会やカンファレンスに参加しました。(時間に余裕があれば継続して行く)</p>

<ul>
<li>Shibuya.rb</li>
<li>Rustful勉強会</li>
<li>渋谷Ruby会議01</li>
<li>デザインビギナーズ</li>
<li>Nishishinjuku rb</li>
<li>dev morning</li>
<li>Ebisu.rb</li>
<li>TokyuRuby会議07</li>
</ul>


<p>会う人会う人皆凄腕の方々ばかりで恐々としてますが、どこも独特の色を持っていて面白いです。もちろん参加するたびに新しい知見が溢れているので、勇気を出して行ってみると良いと思います。</p>

<h1>読書会を始めた</h1>

<p>レポート班で知り合った@tkymtkに声をかけてもらって一緒に読書会を開くことになりました。metanightというイベントで、meta programming 2の英語版の読書会です。マイペースでやっているので読み終わるのはだいぶ未来だと思います(できれば国内版が出る前に終わらせたい) ただ、焦る必要もないのでお酒飲みながら(私は下戸なのでコーヒーか紅茶飲んでます)雑談して少しずつ読み進めています。<br/>
英語というところで抵抗感ある人は多いかもしれません。ただ、一人じゃ理解できない英語の表現も３人、４人となることで、より理解が深まります。この辺はよちよち.rbに参加したからこそ気付けた効用ですね。Railsの仕組みを知る上でRubyのメタプログラミングの概念は非常に重要ですし。<br/>
興味のある方はぜひぜひ一緒にやりましょう。<a href="http://e-g-d.doorkeeper.jp/events/18487">年内最後の回</a>を12/17(水)にやります。</p>

<h1>12月</h1>

<p>忘年会楽しいですね。まだ半分です。12/20に<a href="http://yochiyochirb.doorkeeper.jp/events/17898">よちよち.rb内でLT大会</a>があります。普段のミートアップとは違い、Rails Tutorialをするわけではないので、よちよち.rbの雰囲気を味わいたい人、参加枠は残っていると思うので、足を運んでみるといいかもしれません。</p>

<h1>まとめ</h1>

<p>バーっと振り返りましたが、3/17によちよち.rbに参加したことがきっかけて今年一年の流れが生まれました。まさか自分が仕事やめるとも、読書会主催するとも、Railsで開発するとも思っていなかった、意識高くなってる感半端ないのでもっと脱力してモチベージョン維持しよう。<br/>
全てはよちよち.rbの仕業ですね。よちよち.rbのせいで人生をRubyに狂わされた方が何名かいます。<br/>
Rubyでのプログラミングは楽しい。ただ単にプログラミングが面白いだけではなく、Rubyをとりまくコミュニティの力がRubyを楽める一つの要因だと思います。今年は本当に色々な人と知り合うことができました。本当にありがとうございました。来年こそ、就職&hellip;</p>

<p>長くなってしまいましたね。最後までくだらいポエム(その上よちよちとは関係無い自分の読書会の宣伝までする厚顔無恥っぷり)にお付き合いいただきありがとうございました。</p>

<h1>次回</h1>

<p>11月に実はもう一つ初めての体験があって、開発合宿をしました。
よちよち.rbのいいところの一つに、良いと思ったものをすぐに取り入れて試してみるという文化があります。（すごく好きなところです） <br/>
実はこれ、YAPC::Asia 2014の@onishiさんのトークで衝撃を受けて、Kajaeruの振り返りのKTPで提案しました。これが実現したことが個人的にはすごく嬉しかったです。色々と準備してくださった@yucao24hoursさん本当に本当にありがとうございました。<br/>
明日は、この時一緒に開発した@highwideさんによる「よちよち合宿でやったこととか？」です(タイトル変わるのかな？)。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rspec3のexpectとallowの違い]]></title>
    <link href="http://jangajan.com/blog/2014/12/08/expect-and-allow-in-rspec/"/>
    <updated>2014-12-08T00:00:35+09:00</updated>
    <id>http://jangajan.com/blog/2014/12/08/expect-and-allow-in-rspec</id>
    <content type="html"><![CDATA[<p><a href="http://www.adventar.org/calendars/582">よちよち.rb Advent Calendar 2014</a> 8日目の記事です。 <br/>
昨日は、bonbon0605さんの<a href="http://genius.hateblo.jp/entry/2014/12/07/093454">2014年に読んだり積んだりした本とその思い出を振り返ります</a>、でした。<br/>
Ruby初学者がワンステップレベルアップする時に参考となる良書を紹介していただきました！</p>

<p>さて、今日はRspecのとあるメソッドから学んだ、mockとstubの違いについて書きます。  mockとstubの違いは、少し前に参加したよちよち.rbで疑問のまま終わってしまっていました。</p>

<!-- more -->


<p>最近になってRubyとRailsの仕事に関わっているのですが、Rspecに苦戦しています。   <br/>
Rspecを使っている時に、次の２つのメソッドに出会いました。</p>

<ul>
<li>allow(object).to receive(:hoge).and_return(&lsquo;fuga&rsquo;)  <a href="https://relishapp.com/rspec/rspec-mocks/v/3-1/docs/basics/allowing-messages">参考</a></li>
<li>expect(object).to receive(:hoge).and_return(&lsquo;fuga&rsquo;) <a href="https://relishapp.com/rspec/rspec-mocks/v/3-1/docs/basics/expecting-messages">参考</a></li>
</ul>


<p>この使い分けを知る過程でstubとmockの違いが自分の中でイメージできてきました。</p>

<p>まずは、上記２つのメソッドの使い方を非常に単純な例に落とし込んでみます。</p>

<p>上記はメソッドはどちらも、<code>object.hoge</code>ってメソッドを呼び出すと、戻り値が<code>fuga</code>となります。<br/>
さて、どう違うのか、試してみます。</p>

<h1>事前準備</h1>

<p>問題を単純化します。(逆にわかりづらいかもしれないし、ソースコード減らしたかったのであまりいい書き方ではありません)<br/>
<code>true</code>と<code>false</code>を返すだけのprivateメソッドとそのラッパーメソッドを用意します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">MockAndStub</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">always_true</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">truthy</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">always_false</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">falsey</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">truthy</span>
</span><span class='line'>    <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">falsey</span>
</span><span class='line'>    <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>それと、テストクラスです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">describe</span> <span class="no">MockAndStub</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:obj</span><span class="p">)</span> <span class="p">{</span> <span class="no">MockAndStub</span><span class="o">.</span><span class="n">new</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># publicメソッドの戻り値が正しいことを確認</span>
</span><span class='line'>  <span class="n">context</span> <span class="s1">&#39;do not use stub and mock&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="p">{</span> <span class="n">expect</span><span class="p">(</span><span class="n">obj</span><span class="o">.</span><span class="n">always_true</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_truthy</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">it</span> <span class="p">{</span> <span class="n">expect</span><span class="p">(</span><span class="n">obj</span><span class="o">.</span><span class="n">always_false</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_falsey</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>準備ができました。まずは<code>allow</code>から見ていきましょう。</p>

<h1>allow(object).to receive(:hoge).and_return(&lsquo;fuga&rsquo;)</h1>

<p><code>allow</code>はstubとして働きます。<br/>
<code>allow</code>を使うと、上述の説明どおり、<code>object.hoge</code>というメソッドを呼び出すと、<code>fuga</code>が返ってきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">context</span> <span class="s1">&#39;use stub&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># 1. fail</span>
</span><span class='line'>    <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="p">{</span> <span class="n">allow</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:truthy</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">it</span> <span class="p">{</span> <span class="n">expect</span><span class="p">(</span><span class="n">obj</span><span class="o">.</span><span class="n">always_true</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_truthy</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># 2. success</span>
</span><span class='line'>    <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="p">{</span> <span class="n">allow</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:falsey</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">it</span> <span class="p">{</span> <span class="n">expect</span><span class="p">(</span><span class="n">obj</span><span class="o">.</span><span class="n">always_false</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_truthy</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">context</span> <span class="s1">&#39;use stub, but not use&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># 3. success</span>
</span><span class='line'>    <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="p">{</span> <span class="n">allow</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:falsey</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">it</span> <span class="p">{</span> <span class="n">expect</span><span class="p">(</span><span class="n">obj</span><span class="o">.</span><span class="n">always_true</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_truthy</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<h2>1. fail</h2>

<p>１のパターンのテストはfailします。<br/>
<code>allow(obj).to receive(:truthy).and_return(false)</code>とすると、<code>obj</code>が<code>:truthy</code>というメソッドコールを受け取ったら、必ず<code>false</code>が返ってきます。<br/>
<code>always_true</code>は内部で<code>:truthy</code>を呼び出しているので、戻り値は<code>false</code>となります。<br/>
よって、<code>obj.always_true</code>は<code>false</code>なので、failします。</p>

<h2>2. success</h2>

<p>今度はsuccessです。<code>:falsey</code>は<code>true</code>を返すと設定しているので、<code>obj.always_false</code>は<code>true</code>となります。</p>

<h2>3. success</h2>

<p>次はテストに関係無いメソッドをstub化した場合です。これも、関係ないのでsuccessになります。</p>

<p>上記のように、<code>A: allow</code>はメソッドコールがあった時に指定した値を利用してテストすることができます。</p>

<h1>expect(object).to receive(:hoge).and_return(&lsquo;fuga&rsquo;)</h1>

<p>続いて<code>expect</code>で、こちらはmockです。<br/>
<code>allow</code>と<code>expect</code>の違いは、メソッドコールの検証の有無です。<code>expect</code>では<code>receive</code>で指定したメソッドが呼び出されていない場合、failします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">context</span> <span class="s1">&#39;use mock&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">context</span> <span class="s1">&#39;use mock, and not use&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1"># 4. fail</span>
</span><span class='line'>      <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="p">{</span> <span class="n">expect</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:falsey</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">it</span> <span class="p">{</span> <span class="n">expect</span><span class="p">(</span><span class="n">obj</span><span class="o">.</span><span class="n">always_true</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_truthy</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">context</span> <span class="s1">&#39;use mock, and use&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1"># 5. success</span>
</span><span class='line'>      <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="p">{</span> <span class="n">expect</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:falsey</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">it</span> <span class="p">{</span> <span class="n">expect</span><span class="p">(</span><span class="n">obj</span><span class="o">.</span><span class="n">always_false</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_truthy</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<h2>4. fail</h2>

<p><code>receive</code>で指定したメソッドを呼び出さない場合です。<br/>
itのブロック自体は正しいため、beforeの<code>expect</code>を<code>allow</code>に変えるか、<code>before</code>自体を消すとsuccessになります。</p>

<h2>5. success</h2>

<p><code>receive</code>で指定したメソッドを呼び出しています。<br/>
値を<code>true</code>に変更した上で、<code>true</code>になっていることを確認しているので、successとなります。</p>

<h1>まとめ</h1>

<p>allowのexpectの違いはメソッドコールの検査になります。これを踏まえた上で、下の記事を読むとなるほど！と思うことができました。</p>

<ul>
<li><a href="http://techracho.bpsinc.jp/hachi8833/2014_07_10/17971">http://techracho.bpsinc.jp/hachi8833/2014_07_10/17971</a></li>
<li><a href="http://aligach.net/diary/20110109.html">http://aligach.net/diary/20110109.html</a></li>
<li><a href="http://d.hatena.ne.jp/takihiro/20081023/1224762895">http://d.hatena.ne.jp/takihiro/20081023/1224762895</a></li>
</ul>


<p>つまり、stubとmockの違いは、インターフェースの検査(メソッドコールのチェック)をするかしないか、ということですね。</p>

<p>ところで、2つの違いはわかったけれど、「どう使い分ければいいのか」が実はもっと大事です。<br/>
ただ、これはテストに依存するため、確認すべきことは何か、を意識しながら切り分ける必要があります。<br/>
<a href="http://d.hatena.ne.jp/devbankh/">Martin Fowlerの&#8221;Mocks Aren’t Stubs&#8221;の翻訳記事</a>があって、非常に長い上に全容を理解しきれていないのですが、</p>

<blockquote><p>振る舞いの結びつきを意識しなければいけないか</p></blockquote>

<p>という点が判断材料になるかと思います。<br/>
あと、</p>

<blockquote><p>モックオブジェクトはXPコミュニティから出てきたものだ。また、XPの主な特徴の一つは、テストドリブン開発を重要視していることだ。テストドリブン開発では、テストを書くことで推進される反復を通じてシステム設計も進んでいく。
そういったわけで、モックオブジェクトの支持者達が相互作用テストの設計における効果についてことさら語るのも驚くことではない。このスタイルでは、主要なオブジェクトに対する最初のテストを書くから [それらのオブジェクトの] 振る舞いの開発を始めることになる。</p></blockquote>

<p>とあるので、TDDするならmock使うでいいと思います。</p>

<p>ひとまず、色々試してみて、気になることがあれば、また何か書くかもしれません。</p>

<h1>最後に</h1>

<p>そして、今日は<a href="http://yochiyochirb.doorkeeper.jp/events/18227">よちよち.rb 第48回 &ldquo;よちよちもくもく会&rdquo;</a>です(予定があって行けなくて残念)</p>

<p>プログラミング未経験でも参加できる一番初心者に優しいRubyの勉強会、もといコミュニティです。<br/>
後一枠余っているので、試しに参加して楽しんでみてください。<br/>
当日キャンセルがちょこっと出たりすることが多いので、満席でもキャンセル待ちにしておくと、いいことがあるかもしれません。</p>

<p>明日はまだ決まっていません&hellip;(紹介したかった&hellip;) # TODO:誰か現れたら更新するかも<br/>
きっと今日参加する誰かが書いてくれるはずです。<br/>
楽しみにお待ち下さい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MetaNight 第3回を開催しました]]></title>
    <link href="http://jangajan.com/blog/2014/12/03/e-g-d-meta-night-3rd/"/>
    <updated>2014-12-03T23:55:01+09:00</updated>
    <id>http://jangajan.com/blog/2014/12/03/e-g-d-meta-night-3rd</id>
    <content type="html"><![CDATA[<p>イベント概要については、<a href="http://jangajan.com/blog/2014/11/02/about-meta-night/">About MetaNight</a>をご覧ください。</p>

<p><a href="http://e-g-d.doorkeeper.jp/events/16300">MetaNight</a>という<a href="http://www.amazon.co.jp/gp/product/B00N9I0RMQ/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00N9I0RMQ&amp;linkCode=as2&amp;tag=pochan0919-22">Metaprogramming Ruby 2</a>の読書会の第３回目を開催しました。</p>

<p><a href="http://www.amazon.co.jp/gp/product/B00N9I0RMQ/ref=as_li_ss_il?ie=UTF8&camp=247&creative=7399&creativeASIN=B00N9I0RMQ&linkCode=as2&tag=pochan0919-22"><img border="0" src="http://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B00N9I0RMQ&Format=_SL250_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=pochan0919-22" ></a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=pochan0919-22&l=as2&o=9&a=B00N9I0RMQ" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<!-- more -->


<h1>活動内容</h1>

<p>Part 1 Chapter 2のThe Problem with Open ClassesからChapter 2の終わりまでやりました。<br/>
読みながらの意見とかはこちらに載せてあります。<br/>
<a href="https://trello.com/b/5WFCQ2ER/metanight-3rd">https://trello.com/b/5WFCQ2ER/metanight-3rd</a></p>

<h1>感想</h1>

<p>前回ダメだったフリーマンカフェに行きました。</p>

<h2>a dark side of open class</h2>

<p>オープンクラスのネガティブな側面が紹介されていました。<br/>
Monkeypatchの例としてリファクタリングの過程で<code>Array#replace</code>というメソッドを用意すると、既存機能をoverrideしてしまってテストでこけたという内容です。<br/>
テストのおかげでリファクタリングの不具合に気付かせておいてさりげなくテストいいぜアピールをしていますね。</p>

<p>overrideは必ずしも悪いことではなくて、例えばRailsなんかでも、<code>require</code>メソッドをoverrideしていたりします。Railsは標準ライブラリのクラスにも様々なメソッドを追加して、あると便利！と思わせるものは多いです。</p>

<p>Billがさらっと、<code>grep(/regex/)</code>を使っていて、pipe感覚でメソッドチェインをできるのはRubyで書いていていいところだという気づきもありました。</p>

<p>それと<code>Array#replace</code>は実は破壊的らしい。Ruby Sliverのひっかけ問題によく出るので要注意らしい！</p>

<h2>英語</h2>

<ul>
<li>fire up irb</li>
</ul>


<p>irbを起動する、というニュアンス。発火を表現するいい日本語ってありそうで見つからなかった。</p>

<ul>
<li>perplex</li>
</ul>


<p>なぜconfuseではダメなのか。ニュアンスの違いが難しい。</p>

<ul>
<li>pique</li>
</ul>


<p>駆り立てる。ネガティブな意味合いを持っている表現だけど、ここの場合だとどうなんだろう。</p>

<h2>その他</h2>

<ul>
<li>エディターは何を使っているのか。４人全員バラバラだった</li>
<li>スクラムというものについてかじりました</li>
<li>tapはメソッドチェイン中にログ出力したいときに使いやすそう</li>
</ul>


<p>第4回を12月中にできたらやりたいな。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gem:pr-commentをリリース]]></title>
    <link href="http://jangajan.com/blog/2014/12/02/release-pr-comment/"/>
    <updated>2014-12-02T18:18:46+09:00</updated>
    <id>http://jangajan.com/blog/2014/12/02/release-pr-comment</id>
    <content type="html"><![CDATA[<p><a href="https://rubygems.org/gems/pr-comment">pr-comment</a>というGemを作りました。</p>

<!-- more -->


<p>自分用に作ったスクリプトをGem化してみました。不満駆動開発。<br/>
用途はターミナルでPull Requestのレビューとかコメントを見やすくするものです。<br/>
中でoctokit呼び出して、結果を並び替えて表示しているだけです。<br/>
使っているかというとうーん、ですね。<br/>
一昨日ぐらいに実行したらちゃんと出ていないところがあったので直さないと。
テストもそうだけど、例外処理もずさんなんでそのへんも、含めてここ汚いとか雑とかもっとこうしろとかISSUEで鉞いただけると喜びます。<br/>
デザインだけは見やすい案を随時募集中です。</p>

<p>&lsquo;競合プロダクトがあっても挫けずに自分の道を進んでもらえればなと思いました&#8217;といういただいた言葉を胸に刻んでちょっとずつ改善していきたい。</p>

<h1>使い方</h1>

<p>一応使い方を。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>prc all owner/repo pull-request-no
</span><span class='line'>prc close owner/repo pull-request-no
</span><span class='line'>prc open owner/repo pull-request-no
</span><span class='line'>
</span><span class='line'>prc close yochiyochirb/kajaeru <span class="m">83</span> <span class="c"># こんな感じで使う</span>
</span></code></pre></td></tr></table></div></figure>


<h1>感想</h1>

<p>作りながら面白いGemや知識がちょこちょことありました。アプリケーションしか書いていないと気づかない<code>thor</code>や<code>simple-color</code>(こっちは使わなかったけど)などなど。<br/>
今はgithubのtokenを手動で環境変数に設定しないといけないから、そこ直したいな。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cucumber on Rails 入門2]]></title>
    <link href="http://jangajan.com/blog/2014/11/26/use-cucumber-2/"/>
    <updated>2014-11-26T00:01:19+09:00</updated>
    <id>http://jangajan.com/blog/2014/11/26/use-cucumber-2</id>
    <content type="html"><![CDATA[<p><a href="http://jangajan.com/blog/2014/11/25/use-cucumber/">前回</a>
に引き続き簡単なCucumberのテストケースを作ります。</p>

<p>サンプルソースはこちらです。<br/>
<a href="https://github.com/ta1kt0me/cucumber-test/tree/forth-test">ta1kt0me/cucumber-test</a></p>

<table>
<thead>
<tr>
<th style="text-align:center;"> ライブラリ  </th>
<th style="text-align:center;"> バージョン  </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> ruby        </td>
<td style="text-align:center;"> 2.1.5       </td>
</tr>
<tr>
<td style="text-align:center;"> rails       </td>
<td style="text-align:center;"> 4.1.5       </td>
</tr>
<tr>
<td style="text-align:center;"> cucumber    </td>
<td style="text-align:center;"> 1.3.17      </td>
</tr>
</tbody>
</table>


<!-- more -->


<h1>今回やること</h1>

<ol>
<li><code>given</code>を使う</li>
<li><code>and</code>を使う</li>
<li><code>background</code>を使う</li>
<li>1つのシナリオにWhen-Thenを複数回書く</li>
</ol>


<h1>given</h1>

<p>givenを利用して、テストデータの投入を行います。<br/>
Factory Girl使います。</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;cucumber-rails&#39;</span><span class="p">,</span> <span class="nb">require</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;database_cleaner&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;factory_girl_rails&#39;</span> <span class="c1"># 追加</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="err">$</span> <span class="n">bundle</span>
</span><span class='line'><span class="err">$</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rails</span> <span class="n">g</span> <span class="ss">factory_girl</span><span class="p">:</span><span class="n">model</span> <span class="no">Book</span> <span class="ss">title</span><span class="p">:</span><span class="n">string</span> <span class="ss">author</span><span class="p">:</span><span class="n">string</span> <span class="ss">price</span><span class="p">:</span><span class="n">integer</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>features/home_page.feature</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="ss">Scenario</span><span class="p">:</span> <span class="no">Viwing</span> <span class="n">application</span><span class="s1">&#39;s home page</span>
</span><span class='line'><span class="s1">    # 追加</span>
</span><span class='line'><span class="s1">    Given there&#39;</span><span class="n">s</span> <span class="n">a</span> <span class="n">book</span> <span class="n">titled</span> <span class="s1">&#39;Alice\&#39;s Adventures in Wonderland&#39;</span> <span class="n">with</span> <span class="s1">&#39;Lewis Carroll&#39;</span> <span class="n">author</span><span class="p">,</span> <span class="s1">&#39;1000&#39;</span> <span class="n">yen</span>
</span><span class='line'>    <span class="no">When</span> <span class="n">I</span> <span class="n">am</span> <span class="n">on</span> <span class="n">the</span> <span class="n">top</span> <span class="n">page</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>features/step_definitions/home_page_steps.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># 追加</span>
</span><span class='line'><span class="no">Given</span><span class="p">(</span><span class="sr">/^there&#39;s a book titled &#39;(.*?)&#39; with &#39;(.*?)&#39; author, &#39;(\d+)&#39; yen$/</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">title</span><span class="p">,</span> <span class="n">author</span><span class="p">,</span> <span class="n">price</span><span class="o">|</span>
</span><span class='line'>  <span class="vi">@book</span> <span class="o">=</span> <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:book</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="n">title</span><span class="p">,</span> <span class="ss">author</span><span class="p">:</span> <span class="n">author</span><span class="p">,</span> <span class="ss">price</span><span class="p">:</span> <span class="n">price</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>(自分用メモ:改善点)<br/>
シングルクォートで囲まないでもいいかも。<br/>
テストケース内で利用しない限りあえてインスタンス変数にする必要もないなー。</p>

<h1>and</h1>

<p>続いてand。これは簡単です。</p>

<figure class='code'><figcaption><span>features/home_page.feature</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="no">Then</span> <span class="n">I</span> <span class="n">should</span> <span class="n">see</span> <span class="n">the</span> <span class="s1">&#39;Listing books&#39;</span>
</span><span class='line'><span class="no">And</span>  <span class="n">I</span> <span class="n">should</span> <span class="n">see</span> <span class="n">the</span> <span class="s1">&#39;Alice\&amp;#39;s Adventures in Wonderland&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>応用きくやつです。</p>

<h1>background</h1>

<p>シナリオの前に複雑な操作や処理をしたい場合に有効です。<br/>
Bookの作成ページをテストするシナリオの前段として、トップページを表示する操作をbackgroundで書いてみます。<br/>
なお、このシナリオではリンク・ボタン操作やフィールド入力をするので、便利なcapybara-webkitを導入します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;cucumber-rails&#39;</span><span class="p">,</span> <span class="nb">require</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;database_cleaner&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;factory_girl_rails&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;capybara-webkit&#39;</span> <span class="c1"># 追加</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="err">$</span> <span class="n">bundle</span>
</span></code></pre></td></tr></table></div></figure>


<p>新しいシナリオ、new_page.featureを作ります。</p>

<figure class='code'><figcaption><span>features/new_page.feature</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="ss">Feature</span><span class="p">:</span> <span class="no">New</span> <span class="no">Page</span>
</span><span class='line'>
</span><span class='line'>  <span class="ss">Background</span><span class="p">:</span>
</span><span class='line'>    <span class="no">Given</span> <span class="n">I</span> <span class="n">go</span> <span class="n">to</span> <span class="n">the</span> <span class="n">top</span> <span class="n">page</span>
</span><span class='line'>
</span><span class='line'>  <span class="ss">Scenario</span><span class="p">:</span> <span class="no">Adding</span> <span class="no">New</span> <span class="no">Book</span>
</span><span class='line'>    <span class="no">When</span> <span class="n">I</span> <span class="n">click</span> <span class="s1">&#39;New Book&#39;</span> <span class="n">link</span>
</span><span class='line'>    <span class="no">Then</span> <span class="n">I</span> <span class="n">should</span> <span class="n">see</span> <span class="n">the</span> <span class="s1">&#39;New book&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>features/step_definitions/new_page_steps.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">Given</span><span class="p">(</span><span class="sr">/^I go to the top page$/</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">visit</span> <span class="n">root_path</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">When</span><span class="p">(</span><span class="sr">/^I click &#39;(.*?)&#39; link$/</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">link_name</span><span class="o">|</span>
</span><span class='line'>  <span class="n">click_link</span><span class="p">(</span><span class="n">link_name</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>1つのシナリオにWhen-Thenを複数回書く</h1>

<p>new_page.featureを完成させましょう。</p>

<ol>
<li>&lsquo;New Book&#8217;リンクを押したら、&#8217;New Book&#8217;タイトルが表示される</li>
<li>&lsquo;Title&rsquo;,&lsquo;Author&rsquo;,&lsquo;Price&#8217;を入力して、&#8217;Create Book&#8217;ボタンを押したら、&#8217;Book was successfully created.&#8217;というメッセージと入力した内容が表示される</li>
</ol>


<p>というシナリオを作ります。</p>

<figure class='code'><figcaption><span>features/new_page.feature</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="ss">Scenario</span><span class="p">:</span> <span class="no">Adding</span> <span class="no">New</span> <span class="no">Book</span>
</span><span class='line'>    <span class="no">When</span> <span class="n">I</span> <span class="n">click</span> <span class="s1">&#39;New Book&#39;</span> <span class="n">link</span>
</span><span class='line'>    <span class="no">Then</span> <span class="n">I</span> <span class="n">should</span> <span class="n">see</span> <span class="n">the</span> <span class="s1">&#39;New book&#39;</span>
</span><span class='line'>    <span class="no">When</span> <span class="n">I</span> <span class="n">fill</span> <span class="k">in</span> <span class="s1">&#39;Title&#39;</span> <span class="n">with</span> <span class="s1">&#39;Star Wars&#39;</span>
</span><span class='line'>    <span class="no">And</span> <span class="n">I</span> <span class="n">fill</span> <span class="k">in</span> <span class="s1">&#39;Author&#39;</span> <span class="n">with</span> <span class="s1">&#39;George Walton Lucas, Jr&#39;</span>
</span><span class='line'>    <span class="no">And</span> <span class="n">I</span> <span class="n">fill</span> <span class="k">in</span> <span class="s1">&#39;Price&#39;</span> <span class="n">with</span> <span class="s1">&#39;2980&#39;</span>
</span><span class='line'>    <span class="no">And</span> <span class="n">I</span> <span class="n">click</span> <span class="s1">&#39;Create Book&#39;</span> <span class="n">button</span>
</span><span class='line'>    <span class="no">Then</span> <span class="n">I</span> <span class="n">should</span> <span class="n">see</span> <span class="n">the</span> <span class="s1">&#39;Book was successfully created.&#39;</span>
</span><span class='line'>    <span class="no">And</span> <span class="n">I</span> <span class="n">should</span> <span class="n">see</span> <span class="n">the</span> <span class="s1">&#39;Star Wars&#39;</span>
</span><span class='line'>    <span class="no">And</span> <span class="n">I</span> <span class="n">should</span> <span class="n">see</span> <span class="n">the</span> <span class="s1">&#39;George Walton Lucas, Jr&#39;</span>
</span><span class='line'>    <span class="no">And</span> <span class="n">I</span> <span class="n">should</span> <span class="n">see</span> <span class="n">the</span> <span class="s1">&#39;2980&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>features/step_definitions/new_page_steps.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="no">When</span><span class="p">(</span><span class="sr">/^I click &#39;(.*?)&#39; button$/</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">button_name</span><span class="o">|</span>
</span><span class='line'>  <span class="n">click_button</span><span class="p">(</span><span class="n">button_name</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">When</span><span class="p">(</span><span class="sr">/^I fill in &#39;(.*?)&#39; with &#39;(.*?)&#39;$/</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">field</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
</span><span class='line'>  <span class="n">fill_in</span><span class="p">(</span><span class="n">field</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>capybara-webkitですが、<a href="https://gist.github.com/zhengjia/428105">チートシート</a>があるので有効活用しましょう。</p>

<p>stepsで定義した操作は共通化してあげると良いですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cucumber on Rails 入門1]]></title>
    <link href="http://jangajan.com/blog/2014/11/25/use-cucumber/"/>
    <updated>2014-11-25T14:15:41+09:00</updated>
    <id>http://jangajan.com/blog/2014/11/25/use-cucumber</id>
    <content type="html"><![CDATA[<p>Railsでcucumberを動かしてみます。<br/>
サンプルソースはこちらです。<br/>
<a href="https://github.com/ta1kt0me/cucumber-test/tree/first-test">ta1kt0me/cucumber-test</a></p>

<p>cucumberを使うことになったので簡単なサンプルを作成してみます。</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> ライブラリ  </th>
<th style="text-align:center;"> バージョン  </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> ruby        </td>
<td style="text-align:center;"> 2.1.5       </td>
</tr>
<tr>
<td style="text-align:center;"> rails       </td>
<td style="text-align:center;"> 4.1.5       </td>
</tr>
<tr>
<td style="text-align:center;"> cucumber    </td>
<td style="text-align:center;"> 1.3.17      </td>
</tr>
</tbody>
</table>


<p>構成はこんな感じです。</p>

<!-- more -->


<h1>Cucumberとは</h1>

<p>Rubyで書けるインテグレーションテストのためのテストフレームワークの一つです。
Cucumber自体は、Railsに依存していないため、Sinatraのアプリでも使用可能です。</p>

<h1>今回やること</h1>

<p>!. cucumberのインストール
2. scaffoldで作成したアプリのトップページを表示するテストを書く</p>

<p>事前にscaffoldで適当なアプリを作成します。<br/>
今回は以下のコマンドを実行しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>bundle <span class="nb">exec </span>rails g scaffold Book title:string author:string price:integer
</span></code></pre></td></tr></table></div></figure>


<h1>Cucumber</h1>

<h2>最低限覚えること</h2>

<p>Cucumberのテストシナリオは、GherkinというDSLで書きます。<br/>
今回はGherkinの一部だけを利用して簡単なテストを書きます。<br/>
Gherkinについては、<a href="http://blog.eiel.info/blog/2013/02/12/gherkin/">こちら</a>のサイトにわかりやすい解説があります。<br/>
また、今回のサンプルですが<a href="https://semaphoreapp.com/blog/2013/08/14/setting-up-bdd-stack-on-a-new-rails-4-application.html">こちら</a>のサイトの内容をもとに確認しています。</p>

<h3>言葉</h3>

<ul>
<li>Feature

<ul>
<li>機能を表します。1つのファイルに1つだけ</li>
</ul>
</li>
<li>Scenario

<ul>
<li>テストのシナリオです</li>
</ul>
</li>
<li>When

<ul>
<li>ユーザーの動作を表します。リンクをクリックする、とか</li>
</ul>
</li>
<li>Then

<ul>
<li>Whenの結果どうなるか、を表します</li>
</ul>
</li>
</ul>


<p>階層構造としてはこうなります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Feature: 機能A
</span><span class='line'>    Scenario: シナリオ1
</span><span class='line'>        When ユーザーがTopページにきた時
</span><span class='line'>        Then タイトルにhogeが表示されている
</span></code></pre></td></tr></table></div></figure>


<h3>ファイル</h3>

<ul>
<li>features/hoge.feature

<ul>
<li>テストのシナリオを書くところ</li>
</ul>
</li>
<li>features/step_definitions/hoge.rb

<ul>
<li>シナリオの動作を定義するところ</li>
</ul>
</li>
</ul>


<h2>インストール</h2>

<h3>Gemfile変更 &amp; install</h3>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># gem &#39;cucumber&#39; # githubのサンプルコードには入ってますが、いらないです。</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;cucumber-rails&#39;</span><span class="p">,</span> <span class="nb">require</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;database_cleaner&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>bundle install
</span><span class='line'>bundle <span class="nb">exec </span>rails generate cucumber:install
</span></code></pre></td></tr></table></div></figure>


<h2>シナリオを書く</h2>

<p>今回はユーザーがトップページにいる時に、タイトル文字列&#8217;Listing books&#8217;が表示されていることを確認します。</p>

<figure class='code'><figcaption><span>features/home_page.feature</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="ss">Feature</span><span class="p">:</span> <span class="no">Home</span> <span class="n">page</span>
</span><span class='line'>
</span><span class='line'>  <span class="ss">Scenario</span><span class="p">:</span> <span class="no">Viwing</span> <span class="n">application</span><span class="s1">&#39;s home page</span>
</span><span class='line'><span class="s1">    When I am on the top page</span>
</span><span class='line'><span class="s1">    Then I should see the &#39;</span><span class="no">Listing</span> <span class="n">books</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>この時点でテストを実行するとエラーが出ます。</p>

<figure class='code'><figcaption><span>features/home_page.feature</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="err">$</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="n">cucumber</span>
</span><span class='line'>   <span class="no">Then</span> <span class="n">I</span> <span class="n">should</span> <span class="n">see</span> <span class="n">the</span> <span class="s1">&#39;Listing books&#39;</span>  <span class="c1"># features/home_page.feature:5</span>
</span><span class='line'>      <span class="no">Undefined</span> <span class="ss">step</span><span class="p">:</span> <span class="s2">&quot;I should see the &#39;Listing books&#39;&quot;</span> <span class="p">(</span><span class="no">Cucumber</span><span class="o">::</span><span class="no">Undefined</span><span class="p">)</span>
</span><span class='line'>      <span class="n">features</span><span class="o">/</span><span class="n">home_page</span><span class="o">.</span><span class="n">feature</span><span class="p">:</span><span class="mi">5</span><span class="ss">:in</span> <span class="sb">`Then I should see the &#39;Listing books&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">1 scenario (1 undefined)</span>
</span><span class='line'><span class="sb">2 steps (2 undefined)</span>
</span><span class='line'><span class="sb">0m0.005s</span>
</span><span class='line'>
</span><span class='line'><span class="sb">You can implement step definitions for undefined steps with these snippets:</span>
</span><span class='line'>
</span><span class='line'><span class="sb">When(/^I am on the homepage$/) do</span>
</span><span class='line'><span class="sb">  pending # express the regexp above with the code you wish you had</span>
</span><span class='line'><span class="sb">end</span>
</span><span class='line'>
</span><span class='line'><span class="sb">Then(/^I should see the &#39;Listing books&#39;$/) do</span>
</span><span class='line'><span class="sb">  pending # express the regexp above with the code you wish you had</span>
</span><span class='line'><span class="sb">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>When</code>と<code>Then</code>で指定した動作（ステップ）が定義されてないことが原因です。</p>

<h2>ステップを定義する</h2>

<p>シナリオに書いた<code>When</code>と<code>Then</code>のステップを定義します。<br/>
文字列一致で挙動を設定します。</p>

<figure class='code'><figcaption><span>features/step_definitions/home_page_steps.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">When</span><span class="p">(</span><span class="sr">/^I am on the top page$/</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">visit</span> <span class="n">root_path</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Then</span><span class="p">(</span><span class="sr">/^I should see the &#39;(.*?)&#39;$/</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">title</span><span class="o">|</span>
</span><span class='line'>  <span class="n">assert</span> <span class="n">page</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="n">title</span><span class="p">)</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>もう一度実行します。</p>

<figure class='code'><figcaption><span>features/step_definitions/home_page_steps.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="err">$</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="n">cucumber</span>
</span><span class='line'><span class="ss">eature</span><span class="p">:</span> <span class="no">Home</span> <span class="n">page</span>
</span><span class='line'>
</span><span class='line'>  <span class="ss">Scenario</span><span class="p">:</span> <span class="no">Viwing</span> <span class="n">application</span><span class="s1">&#39;s home page # features/home_page.feature:3</span>
</span><span class='line'><span class="s1">    When I am on the top page              # features/step_definitions/home_page_steps.rb:1</span>
</span><span class='line'><span class="s1">    Then I should see the &#39;</span><span class="no">Listing</span> <span class="n">books</span><span class="err">&#39;</span>  <span class="c1"># features/step_definitions/home_page_steps.rb:5</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span> <span class="n">scenario</span> <span class="p">(</span><span class="mi">1</span> <span class="n">passed</span><span class="p">)</span>
</span><span class='line'><span class="mi">2</span> <span class="n">steps</span> <span class="p">(</span><span class="mi">2</span> <span class="n">passed</span><span class="p">)</span>
</span><span class='line'><span class="mi">0</span><span class="n">m0</span><span class="o">.</span><span class="mi">081</span><span class="n">s</span>
</span></code></pre></td></tr></table></div></figure>


<p>成功しましたね。<br/>
rspecと組み合わせることでrspecの記法できるようなります。<br/>
またcapybara-webkitやwebratと組み合わせることで、よりStepが簡単に実装できるようになると思います。</p>

<h1>課題</h1>

<p>次はFactorygirlを使ってシナリオの前提条件となるGiveを使ってみます。</p>

<p>しまった。cucumberの最初のcは大文字が正しいかもしれない&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MetaNight 第2回を開催しました]]></title>
    <link href="http://jangajan.com/blog/2014/11/19/e-g-d-meta-night-2nd/"/>
    <updated>2014-11-19T23:30:51+09:00</updated>
    <id>http://jangajan.com/blog/2014/11/19/e-g-d-meta-night-2nd</id>
    <content type="html"><![CDATA[<p>イベント概要については、<a href="http://jangajan.com/blog/2014/11/02/about-meta-night/">About MetaNight</a>をご覧ください。</p>

<p><a href="http://e-g-d.doorkeeper.jp/events/16300">MetaNight</a>という<a href="http://www.amazon.co.jp/gp/product/B00N9I0RMQ/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00N9I0RMQ&amp;linkCode=as2&amp;tag=pochan0919-22">Metaprogramming Ruby 2</a>の読書会の第２回目を開催しました。</p>

<p><a href="http://www.amazon.co.jp/gp/product/B00N9I0RMQ/ref=as_li_ss_il?ie=UTF8&camp=247&creative=7399&creativeASIN=B00N9I0RMQ&linkCode=as2&tag=pochan0919-22"><img border="0" src="http://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B00N9I0RMQ&Format=_SL250_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=pochan0919-22" ></a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=pochan0919-22&l=as2&o=9&a=B00N9I0RMQ" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<!-- more -->


<h1>活動内容</h1>

<p>Part 1 Chapter 2の最初〜The Problem with Open Classesの前までやりました。<br/>
読みながらの意見とかはこちらに載せてあります。<br/>
<a href="https://trello.com/b/jxYv3pIf/metanight-2nd">https://trello.com/b/jxYv3pIf/metanight-2nd</a></p>

<h1>感想</h1>

<h2>店選定</h2>

<p>もともと予定していたフリーマンカフェに行ったら、「撮影のため貸切です」という看板に出くわして、会場探しからスタートするトラブルに。<br/>
すぐ近くにあった<a href="https://plus.google.com/106026781365187100809/about?hl=ja">オン・ザ・コーナー</a>というお店を利用しました。<br/>
Wifi使えたのでラッキーです。<br/>
電源もあったけど入口のカウンターだけで奥にはほどんどなかったです。<br/>
後、大体のメニューにポテトフライがついているので注文するとき要注意。</p>

<h2>オープンクラスについて</h2>

<p>簡単なサンプルを交えたオープンクラスについて学びました。<br/>
rubyではirbを使っている時に自然とやっていることなんですよね。(身近なメタプロ)<br/>
「classというキーワードは、クラス宣言というよりも、スコープを設定するという意味合いに近くて、クラスはその副作用って捉えてね」という考え方に気付けたのは大きいんじゃないかなって思います。<br/>
サンプルを確認するためにテストコードも一緒に用意していて、Rubyにとってテストは身近だということを改めて感じました。</p>

<p>BillがさらっとStringクラスに新しいメソッドを生やしていた。<br/>
アプリケーションでの組み込みライブラリの独自拡張はなかなか勇気がいりますね。</p>

<h2>英語</h2>

<ul>
<li>a new kid on the block(文中ではthe new guy on the block)</li>
</ul>


<p><a href="http://dictionary.goo.ne.jp/leaf/ej3/46854/m0u/">新参者</a>、という表現。<br/>
<a href="http://www.wikiwand.com/ja/%E3%83%8B%E3%83%A5%E3%83%BC%E3%83%BB%E3%82%AD%E3%83%83%E3%82%BA%E3%83%BB%E3%82%AA%E3%83%B3%E3%83%BB%E3%82%B6%E3%83%BB%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF">New Kids On The Block</a>というグループもあったりするので一般的な表現なんですね。</p>

<ul>
<li>on the fly</li>
</ul>


<p>なんとなーくイメージできたけど、うまく日本語に落とし込めなかった単語。<br/>
オンザフライ書き込みとかオンザフライチェックとか。</p>

<ul>
<li>grab the donut</li>
</ul>


<p>そんままドーナツ掴んで。何かの表現があるかと思った。<br/>
気軽にいくよ！っていう文脈を強調するニュアンスを出したかったっぽい。(軽いジョークのようなもの)</p>

<h2>その他</h2>

<ul>
<li>Rubyの認定証は島根（出雲）の人間国宝が漉いた和紙を使っているらしい。</li>
<li>Gold時にMeta Programming Rubyはすごく良い教科書になる。</li>
</ul>


<p>第三回は再来週(12/3)開催目標。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsのexists?とfind_byはどっちが早いのか]]></title>
    <link href="http://jangajan.com/blog/2014/11/10/exists-or-find-by-in-rails/"/>
    <updated>2014-11-10T16:01:44+09:00</updated>
    <id>http://jangajan.com/blog/2014/11/10/exists-or-find-by-in-rails</id>
    <content type="html"><![CDATA[<p>Railsで特定するレコードが存在するかbooleanで取得したい時、</p>

<ol>
<li>Table.exists?(a: id)</li>
<li>!!Table.find_by(a: id)</li>
</ol>


<p>いずれのやり方のほうが処理が早いか計測してみました。</p>

<!-- more -->


<h1>ケース</h1>

<p>環境は、<code>Rails 4.1.7</code>と<code>ruby 2.1.4</code>です。</p>

<ul>
<li>1万件のレコードがあるVoteテーブルに対して、voting_user_idを検索条件に指定して該当するレコードがあるか確認する。</li>
<li>Vote.voting_user_idにはIndexをつける</li>
<li>1万回問い合わせした時間で比較</li>
</ul>


<p>1の場合、<code>Vote.exists?(voting_user_id: 1098)</code><br/>
2の場合、<code>!!Vote.find_by(voting_user_id: 1098)</code></p>

<p>となります。</p>

<h1>計測</h1>

<p>計測してみました。Databaseはsqlite3です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># 1.exists?のケース</span>
</span><span class='line'><span class="no">Benchmark</span><span class="o">.</span><span class="n">realtime</span> <span class="p">{</span> <span class="mi">10000</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span><span class="o">|</span><span class="n">e</span><span class="o">|</span><span class="no">Vote</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="ss">voting_user_id</span><span class="p">:</span> <span class="mi">1098</span><span class="p">)}}</span>
</span><span class='line'><span class="c1"># SQL: SELECT  1 AS one FROM &quot;votes&quot;  WHERE &quot;votes&quot;.&quot;voting_user_id&quot; = 1098 LIMIT 1</span>
</span><span class='line'><span class="c1"># =&gt; 6.658646</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 2.find_byのケース</span>
</span><span class='line'><span class="no">Benchmark</span><span class="o">.</span><span class="n">realtime</span> <span class="p">{</span> <span class="mi">10000</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span><span class="o">|</span><span class="n">e</span><span class="o">|!!</span><span class="no">Vote</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="ss">voting_user_id</span><span class="p">:</span> <span class="mi">1098</span><span class="p">)}}</span>
</span><span class='line'><span class="c1"># SQL: SELECT  &quot;votes&quot;.* FROM &quot;votes&quot;  WHERE &quot;votes&quot;.&quot;voting_user_id&quot; = 1098 LIMIT 1</span>
</span><span class='line'><span class="c1"># =&gt; 5.506756</span>
</span></code></pre></td></tr></table></div></figure>


<p>find_byのほうが早いんですね。取得結果の情報が多い分、find_byのほうがメモリは食ってそうなので、遅いかなと思ったら想像と逆の結果でした。</p>

<h1>Postgresqlで試してみる</h1>

<p>アプリをHeroku+Postgresqlで動かす機会が多いので、ローカルのPostgresqlで試してみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># 1.exists?のケース</span>
</span><span class='line'><span class="no">Benchmark</span><span class="o">.</span><span class="n">realtime</span> <span class="p">{</span> <span class="mi">10000</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span><span class="o">|</span><span class="n">e</span><span class="o">|</span><span class="no">Vote</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="ss">voting_user_id</span><span class="p">:</span> <span class="mi">1098</span><span class="p">)}}</span>
</span><span class='line'><span class="c1"># SQL: SELECT  1 AS one FROM &quot;votes&quot;  WHERE &quot;votes&quot;.&quot;voting_user_id&quot; = 1098 LIMIT 1</span>
</span><span class='line'><span class="c1"># =&gt; 9.905989</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 2.find_byのケース</span>
</span><span class='line'><span class="no">Benchmark</span><span class="o">.</span><span class="n">realtime</span> <span class="p">{</span> <span class="mi">10000</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span><span class="o">|</span><span class="n">e</span><span class="o">|!!</span><span class="no">Vote</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="ss">voting_user_id</span><span class="p">:</span> <span class="mi">1098</span><span class="p">)}}</span>
</span><span class='line'><span class="c1"># SQL: SELECT  &quot;votes&quot;.* FROM &quot;votes&quot;  WHERE &quot;votes&quot;.&quot;voting_user_id&quot; = 1098 LIMIT 1</span>
</span><span class='line'><span class="c1"># =&gt; 7.289921</span>
</span></code></pre></td></tr></table></div></figure>


<p>やっぱり、find_byの方が早いのかー。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text 3でEvernoteを使う]]></title>
    <link href="http://jangajan.com/blog/2014/11/03/evernote-with-st3/"/>
    <updated>2014-11-03T22:19:35+09:00</updated>
    <id>http://jangajan.com/blog/2014/11/03/evernote-with-st3</id>
    <content type="html"><![CDATA[<p>Sublime Text 3 を Evernoteのクライアントにする方法です。
以前にも試したのですが、使いやすいPackageがなかったので、見つかって嬉しい。</p>

<!-- more -->


<p>evernoteのアカウントを持っていることが前提です。</p>

<h1>必要なPackage</h1>

<p><a href="https://sublime.wbond.net/packages/Evernote">Evernote</a></p>

<h1>初期設定</h1>

<h2>Token生成</h2>

<p>Command Paletteから<code>Evernote Settings:Reconfigure Authorization</code>を選択。<br/>
ブラウザが起動して、EvernoteのDeveloper Tokensページが開くので、Tokenを作る。<br/>
生成した<code>Developer Token</code>と<code>NoteStore URL</code>を設定ファイルに書き込む。</p>

<h2>Evernote設定ファイル作成</h2>

<p>Command Paletteから<code>Evernote Settings: User</code>を選択。</p>

<figure class='code'><figcaption><span>Evernote.sublime-settings</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;noteStoreUrl&quot;</span><span class="p">:</span> <span class="s2">&quot;生成したNoteStore URL&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;token&quot;</span><span class="p">:</span> <span class="s2">&quot;生成したDeveloper Token&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上でSublime Textでの設定は完了。</p>

<h1>新規メモ作成</h1>

<ol>
<li>新規ノートを作成
Command Paletteから<code>Evernote:  New empty note</code>を選択。<br/>
<code>title</code>と<code>notebook</code>と<code>tags</code>を入力。
このままでは保存されません。</li>
<li>ノートを保存
Command Paletteから<code>Evernote:Send to Evernote as new note</code>を選択。<br/>
これでevernoteに保存されます。
たまに、tokenを聞かれることがありますので、その時は、上のtokenを入力する必要があります。</li>
</ol>


<h1>ノートを探す</h1>

<p>とりわけ使いやすそうだったもの。
Command Paletteから入力します。</p>

<ul>
<li>Evernote:Open Evernote Note

<ul>
<li>notebook > titleから使いたいノートを検索</li>
</ul>
</li>
<li>Evernote:List recent notes

<ul>
<li>最近使ったノートを表示</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text3にMarkdown環境を作る]]></title>
    <link href="http://jangajan.com/blog/2014/11/03/markdown-plugin-st3/"/>
    <updated>2014-11-03T19:23:45+09:00</updated>
    <id>http://jangajan.com/blog/2014/11/03/markdown-plugin-st3</id>
    <content type="html"><![CDATA[<p>Sublime Text 3にMarkdownのPluginを入れてみました。</p>

<!-- more -->


<h1>Package</h1>

<p>導入したPackageは次の通り。<br/>
使いながら減らしていくかも。</p>

<h2><a href="https://sublime.wbond.net/packages/Markdown%20Extended">Markdown Extended</a></h2>

<h2><a href="https://sublime.wbond.net/packages/MarkdownCodeBlockWrapper">MarkdownCodeBlockWrapper</a></h2>

<h2><a href="https://sublime.wbond.net/packages/MarkdownEditing">MarkdownEditing</a></h2>

<h2><a href="https://sublime.wbond.net/packages/MarkdownTOC">MarkdownTOC</a></h2>

<h2><a href="https://sublime.wbond.net/packages/OmniMarkupPreviewer">OmniMarkupPreviewer</a></h2>

<h2><a href="https://sublime.wbond.net/packages/Table%20Editor">Table Editor</a></h2>

<h1>Preference</h1>

<p>Markdownのみに適用したい設定の仕方。<br/>
SyntaxをMarkdownに設定した状態で、Command Paletteから<code>Prefrences: Alignment File Settings Syntax Specific User</code>を選択。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;enable_table_editor&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;extensions&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;mdown&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;txt&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;md&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;markdown&quot;</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;tab_size&quot;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;translate_tabs_to_spaces&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;trim_trailing_white_space_on_save&quot;</span><span class="p">:</span> <span class="kc">false</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Key-Binding</h1>

<p><code>markdown</code>と<code>md</code>といったMarkdownの拡張子(syntax)の時のみキーバインドを設定する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>    <span class="err">//</span> <span class="err">Shift+enterで末尾に&#39;</span>  <span class="err">\n&#39;を入れる</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;keys&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;shift+enter&quot;</span><span class="p">],</span> <span class="nt">&quot;command&quot;</span><span class="p">:</span> <span class="s2">&quot;insert_snippet&quot;</span><span class="p">,</span> <span class="nt">&quot;args&quot;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;contents&quot;</span><span class="p">:</span> <span class="s2">&quot;  \n&quot;</span> <span class="p">},</span> <span class="nt">&quot;context&quot;</span><span class="p">:</span> <span class="p">[{</span> <span class="nt">&quot;key&quot;</span><span class="p">:</span> <span class="s2">&quot;selector&quot;</span><span class="p">,</span> <span class="nt">&quot;operator&quot;</span><span class="p">:</span> <span class="s2">&quot;equal&quot;</span><span class="p">,</span> <span class="nt">&quot;operand&quot;</span><span class="p">:</span> <span class="s2">&quot;text.html.markdown, text.html.md&quot;</span> <span class="p">}]},</span>
</span><span class='line'>    <span class="err">//</span> <span class="err">alt+lで&#39;</span><span class="p">[</span><span class="err">title</span><span class="p">]</span><span class="err">(http://)&#39;を挿入する</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;keys&quot;</span><span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;alt+l&quot;</span> <span class="p">],</span> <span class="nt">&quot;command&quot;</span><span class="p">:</span> <span class="s2">&quot;insert_snippet&quot;</span><span class="p">,</span> <span class="nt">&quot;args&quot;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;contents&quot;</span><span class="p">:</span> <span class="s2">&quot;[title](http://)&quot;</span><span class="p">},</span> <span class="nt">&quot;context&quot;</span><span class="p">:</span> <span class="p">[{</span> <span class="nt">&quot;key&quot;</span><span class="p">:</span> <span class="s2">&quot;selector&quot;</span><span class="p">,</span> <span class="nt">&quot;operator&quot;</span><span class="p">:</span> <span class="s2">&quot;equal&quot;</span><span class="p">,</span> <span class="nt">&quot;operand&quot;</span><span class="p">:</span> <span class="s2">&quot;text.html.markdown, text.html.md&quot;</span> <span class="p">}]}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About MetaNight]]></title>
    <link href="http://jangajan.com/blog/2014/11/02/about-meta-night/"/>
    <updated>2014-11-02T22:11:20+09:00</updated>
    <id>http://jangajan.com/blog/2014/11/02/about-meta-night</id>
    <content type="html"><![CDATA[<p><a href="http://e-g-d.doorkeeper.jp/events/16300">MetaNight</a>という<a href="http://www.amazon.co.jp/gp/product/B00N9I0RMQ/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00N9I0RMQ&amp;linkCode=as2&amp;tag=pochan0919-22">Metaprogramming Ruby 2</a>の読書会の内容です。<br/>
※リンク先は第1回目の内容となります。イベントページから最近の情報にアクセスしてみてください</p>

<p><a href="http://www.amazon.co.jp/gp/product/B00N9I0RMQ/ref=as_li_ss_il?ie=UTF8&camp=247&creative=7399&creativeASIN=B00N9I0RMQ&linkCode=as2&tag=pochan0919-22"><img border="0" src="http://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B00N9I0RMQ&Format=_SL250_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=pochan0919-22" ></a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=pochan0919-22&l=as2&o=9&a=B00N9I0RMQ" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<!-- more -->


<h1>MetaNightについて</h1>

<h2>イベント概要</h2>

<p>英語の技術書を読むことを目的とした「エイゴ・ギジュツショ・ドクショカイ」というdoorkeeperのコミュニティによる、meta programming ruby 2の読書会です。</p>

<p>技術(主にRuby)と英語がテーマです。<br/>
少人数で、雑談混じりでワイワイやってます。<br/>
1回目のペースだと読み終わるのは２年後かなぁ&hellip;</p>

<h2>参加すると嬉しい人</h2>

<ul>
<li>興味を出させたい人・興味がある人</li>
<li>メタプログラミングを教えたい人・学びたい人</li>
<li>英語を教えたい人・学びたい人</li>
</ul>


<p>興味がある方からのdoorkeeperへコメントやtwitter(<a href="https://twitter.com/talkto_me">@talkto_me</a>)へのダイレクトメッセージお待ちしてます。</p>

<h2>スキルレベル</h2>

<ul>
<li>英語

<ul>
<li>調べながら読めるぐらい</li>
</ul>
</li>
<li>技術

<ul>
<li>Metaprogramming Ruby 2を読みたい人ならどなたでも</li>
</ul>
</li>
</ul>


<p>英語も技術も、わからないところは話し合いの時間に解決すればいいです。<br/>
そのための読書会ですので、怖がらずに。</p>

<h2>参加するために必要なもの</h2>

<ul>
<li>(忘れずに)doorkeeperへの参加申込</li>
<li>meta programming ruby 2とそれを読める機械

<ul>
<li><a href="http://www.amazon.co.jp/gp/product/B00N9I0RMQ/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00N9I0RMQ&amp;linkCode=as2&amp;tag=pochan0919-22">kindle</a></li>
<li><a href="https://pragprog.com/book/ppmetr2/metaprogramming-ruby-2">epub</a></li>
</ul>
</li>
<li>読む時間を設けるので、前もって読んでくる必要はないです。読んでくるのは自由です。</li>
<li>ビールやコーヒー1杯分の小銭</li>
<li>勢い</li>
</ul>


<h2>参加したいけど不安な方へ</h2>

<p>何かあれば気軽に連絡ください。</p>

<h3>英語が不安</h3>

<p>iBook使うと辞書引きやすくて楽です。<br/>
分かりづらい場合なんかは共有時間に確認したりします。</p>

<h3>Rubyがわからない</h3>

<p>メタプログラミングなので、基本的なところは分かっておく必要があります。<br/>
ドットインストールでのRubyの収録をチラ見しておくと良いです。
もし、この収録の内容がわからなくても一緒に話しながら少しずつ理解していきましょう。</p>

<h2>その他</h2>

<p>Metaprogramming Ruby 2を買うときに使えるクーポン。<br/>
いつまで使えるかはわかりませんが10月20日時点では使えてます。</p>

<blockquote class="twitter-tweet" lang="en"><p>And a special treat for twitter readers: save 30% on all ebooks we publish, use coupon &quot;adalovelaceday&quot; in honor of Ada Lovelace”</p>&mdash; PragmaticProgrammers (@pragprog) <a href="https://twitter.com/pragprog/status/522034588965957633">October 14, 2014</a></blockquote>


<p> <script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MetaNight 第1回を開催しました]]></title>
    <link href="http://jangajan.com/blog/2014/11/01/e-g-d-meta-night-1st/"/>
    <updated>2014-11-01T01:42:36+09:00</updated>
    <id>http://jangajan.com/blog/2014/11/01/e-g-d-meta-night-1st</id>
    <content type="html"><![CDATA[<p><a href="http://e-g-d.doorkeeper.jp/events/16300">MetaNight</a>という<a href="http://www.amazon.co.jp/gp/product/B00N9I0RMQ/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00N9I0RMQ&amp;linkCode=as2&amp;tag=pochan0919-22">Metaprogramming Ruby 2</a>の読書会の第１回目を開催しました。</p>

<p><a href="http://www.amazon.co.jp/gp/product/B00N9I0RMQ/ref=as_li_ss_il?ie=UTF8&camp=247&creative=7399&creativeASIN=B00N9I0RMQ&linkCode=as2&tag=pochan0919-22"><img border="0" src="http://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B00N9I0RMQ&Format=_SL250_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=pochan0919-22" ></a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=pochan0919-22&l=as2&o=9&a=B00N9I0RMQ" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<!-- more -->


<p>イベント概要については、<a href="http://jangajan.com/blog/2014/11/02/about-meta-night/">About MetaNight</a>をご覧ください。</p>

<p>第一回目。このイベント自体は @tkymtk さんの発案による共同運営という形で開催しました。<br/>
↓のコンセプトでやっているので気が向いたら遊びにきてください。</p>

<h2>コンセプト</h2>

<p><strong>英語の技術書を楽しく読む！</strong></p>

<p>技術書読むのって結構精神削られますよね&hellip;<br/>
しかも英語とか&hellip;</p>

<p>けど、英語、ちょっと読めるようになりたいしなぁ&hellip;<br/>
と、くすぶっている方にはピッタリです。<br/>
(自分がそんな感じ)</p>

<p>後、黙々と読むだけではなくって、話したいです。(超大事。雑談楽しい)<br/>
英語か技術どっちか片方にで興味がある人がいたら話したいのでぜひ。<br/>
一応公用語は日本語です。安心してください。</p>

<hr />

<p>以下、本日の振り返り。<br/>
写真とっておけばよかった&hellip;</p>

<h1>第1回</h1>

<p>3名での開催でした。</p>

<h2>進め方</h2>

<p>情報共有にはTrelloを使いました。<br/>
読みながら気になった点があればカードを作成し、共有時間に見直しました。</p>

<p>時間的的には、4:6で共有もとい雑談時間の方がやや多め。<br/>
今回は手探り感満載で２つの方法を試しました。</p>

<h3>1. 読む時間決めて、黙々と読む。</h3>

<p>まずはこのやり方で始めました。<br/>
時間を決めて参加者それぞれで読み進める。<br/>
時間がきたら気になったところをそれぞれ話してく。</p>

<h3>2. どこまで読むか決めて、読み終わったら共有</h3>

<p>1のやり方で進めると先に進みすぎたりした時に前の内容が抜け落ちたりするという提案があったので、この方法を試す事にしました。<br/>
遅い人（僕です）のペースにあわせてもらって読み進めました。<br/>
結果的に同じ範囲で気になる点を話し合えたので、こちらのスタイルの方で続ける事に。</p>

<h2>進捗・内容</h2>

<p><code>I. Metaprogramming Ruby のchapter1</code>が終わりました。</p>

<p>映画オタクのBobは自分の作った映画データベースアプリに鼻高々でいた。<br/>
しかし、そのプライドは経験豊富な同僚のBillによってものの一瞬で粉砕された。<br/>
DBのテーブルやカラムに依存した17行のコードは、たったの2行のActiveRecord::Baseを拡張しただけのclass定義に成り代わり、しかもDBに依存しないコードに置き換えられたのだ。<br/>
強力なメタ・プログラミングの威力に圧倒されたBobは、これから長くて短い一週間を過ごす事になる。<br/>
しかし、恐れる事は無い。メタ・プログラミングはGuruのみが支配する黒魔術の世界ではないのだ。<br/>
Bill同様、あなたも少しずつメタ・プログラミングの世界に魅了されていく事になるであろう。</p>

<h2>反省・感想</h2>

<ul>
<li>使った店がお洒落</li>
<li>ハロウィンで客が少なかったおかげなのか、優雅なソファーでくつろげた</li>
<li>楽しくて延長して3時間やってしまった</li>
<li>実は2時間経ったら、店員からドリンク催促があったんです</li>
<li>Noと言えない</li>
<li>一緒にやる人がいると、自分で読み流しているところに気がつける(2回目の超大事)</li>
<li>自分で書く時に前置詞の使い方が難しい</li>
<li>そんな人たち向けにおすすめを紹介してもらった！ <a href="http://www.amazon.co.jp/gp/product/4890855270/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=4890855270&linkCode=as2&tag=pochan0919-22">一億人の英文法 ――すべての日本人に贈る「話すため」の英文法（東進ブックス）</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=pochan0919-22&l=as2&o=9&a=4890855270" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li>Trelloでの共有が便利</li>
<li>カードのクローズとかのやり方は次回までの課題</li>
<li>Hangoutも使えるようにしたい</li>
<li>英語の微妙なニュアンスを日本語で落とし込むのが難しい(知恵が欲しい)</li>
<li>いきなりActiveRecordかよ</li>
<li>悟りを開ければGuru</li>
<li>ダイヤルMってなんなんだろう</li>
<li>頻繁に使われるruntime</li>
<li>yangとyin。英語じゃないじゃん、そりゃ辞書に無いわ。</li>
<li>ghost townとmarket、C++とRuby</li>
<li>introspection、stick、entrench、derive、at one&rsquo;s disposal、nagging、a bolt-on power feature、自分一人じゃニュアンス掴めなかった</li>
<li>おすすめ！ <a href="http://gilesbowkett.blogspot.jp/2007/11/why-i-program-in-ruby-and-maybe-why-you.html">http://gilesbowkett.blogspot.jp/2007/11/why-i-program-in-ruby-and-maybe-why-you.html</a></li>
<li>忘れないように、2週間間隔で開催できるといいな</li>
</ul>


<h1>最後に</h1>

<p>見出しぐらい英語でかけるようになりたい<br/>
今月中に第2回を開く</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyでメソッドを定義しているクラスを調べたい]]></title>
    <link href="http://jangajan.com/blog/2014/10/28/which-of-the-class-dose-have-the-method/"/>
    <updated>2014-10-28T05:55:25+09:00</updated>
    <id>http://jangajan.com/blog/2014/10/28/which-of-the-class-dose-have-the-method</id>
    <content type="html"><![CDATA[<p>メソッドを定義していくクラスを探る方法です。</p>

<!-- more -->


<h1>定義しているClassを知りたい</h1>

<p>クラス名だけを知りたいのであれば<code>Method#owner</code>を利用します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># singleton method</span>
</span><span class='line'><span class="nb">String</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="ss">:try_convert</span><span class="p">)</span><span class="o">.</span><span class="n">owner</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Class:String&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># instance method</span>
</span><span class='line'><span class="s2">&quot;s&quot;</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="ss">:method_missing</span><span class="p">)</span><span class="o">.</span><span class="n">owner</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">BasicObject</span>
</span></code></pre></td></tr></table></div></figure>


<h1>もうちょっと詳しい情報が知りたい</h1>

<p><code>Method#inspect</code>を使うともう少し詳しい情報を取得できます。
といってもそんなに大きく変わりません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># singleton method</span>
</span><span class='line'><span class="nb">String</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="ss">:try_convert</span><span class="p">)</span><span class="o">.</span><span class="n">inspect</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;#&lt;Method: String.try_convert&gt;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># instance method</span>
</span><span class='line'><span class="s2">&quot;s&quot;</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="ss">:method_missing</span><span class="p">)</span><span class="o">.</span><span class="n">inspect</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;#&lt;Method: String(BasicObject)#method_missing&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>当たり前の話ですが、特異メソッド(クラスメソッド、singleton method)は継承されないですね。
どいうことかというと、DateTimeクラスでは、Dateクラスの得意メソッドを呼び出せない、ということに気付かされました。
クラスメソッドに対してownerとかするの意味ねぇ。</p>

<h1>定義している場所を知りたい</h1>

<p>1.9以降(1.9.3?)では<code>Method#source_location</code>というメソッドで、メソッドの定義された具体的な場所の情報が分かります。
ただし、取得できるのはrubyで定義されたものに限るようです。
(ネイティブで定義されているメソッドの場合nilになる)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># singleton method</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="ss">:where</span><span class="p">)</span><span class="o">.</span><span class="n">source_location</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="no">APP_ROOT</span><span class="si">}</span><span class="s2">/vendor/bundle/ruby/2.0.0/gems/activerecord-4.0.2/lib/active_record/querying.rb&quot;</span><span class="p">,</span> <span class="mi">7</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># instance method</span>
</span><span class='line'><span class="s2">&quot;&quot;</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="ss">:blank?</span><span class="p">)</span><span class="o">.</span><span class="n">source_location</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="no">APP_ROOT</span><span class="si">}</span><span class="s2">/vendor/bundle/ruby/2.0.0/gems/activesupport-4.0.2/lib/active_support/core_ext/object/blank.rb&quot;</span><span class="p">,</span> <span class="mi">92</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># ネイティブで定義されたメソッドはnilを返す</span>
</span><span class='line'><span class="s2">&quot;s&quot;</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="ss">:method_missing</span><span class="p">)</span><span class="o">.</span><span class="n">source_location</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[メモ : Array#each_with_objectの簡単な使い方]]></title>
    <link href="http://jangajan.com/blog/2014/10/27/each-with-object-memo/"/>
    <updated>2014-10-27T18:50:07+09:00</updated>
    <id>http://jangajan.com/blog/2014/10/27/each-with-object-memo</id>
    <content type="html"><![CDATA[<p>each_with_objectの簡単な使い方。
使い方は気をつけないといけないですね。</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">each_with_object</span><span class="p">(</span><span class="n">n</span><span class="o">=[]</span><span class="p">){</span><span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="n">n</span> <span class="o">&lt;&lt;</span> <span class="n">v</span> <span class="o">+</span> <span class="mi">5</span><span class="p">}</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="o">]</span>
</span><span class='line'><span class="c1"># nを初期化しないで処理</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">each_with_object</span><span class="p">(</span><span class="n">n</span><span class="p">){</span><span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="n">n</span> <span class="o">&lt;&lt;</span> <span class="n">v</span> <span class="o">+</span> <span class="mi">5</span><span class="p">}</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">each_with_object</span><span class="p">(</span><span class="n">n</span><span class="p">){</span><span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="n">n</span> <span class="o">&lt;&lt;</span> <span class="n">v</span> <span class="o">+</span> <span class="mi">5</span><span class="p">}</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="o">]</span>
</span><span class='line'><span class="c1"># nをeach_with_objectで初期化</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">each_with_object</span><span class="p">(</span><span class="n">n</span><span class="o">=[]</span><span class="p">){</span><span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="n">n</span> <span class="o">&lt;&lt;</span> <span class="n">v</span> <span class="o">+</span> <span class="mi">5</span><span class="p">}</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="o">]</span>
</span><span class='line'><span class="c1"># nをeach_with_objectの前に宣言</span>
</span><span class='line'><span class="n">n</span> <span class="o">=</span> <span class="o">[</span><span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">each_with_object</span><span class="p">(</span><span class="n">n</span><span class="p">){</span><span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="n">n</span> <span class="o">&lt;&lt;</span> <span class="n">v</span> <span class="o">+</span> <span class="mi">5</span><span class="p">}</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[herokuで動くRailsアプリケーションにNew Relicを入れる]]></title>
    <link href="http://jangajan.com/blog/2014/10/20/use-new-relic-in-rails4-at-heroku/"/>
    <updated>2014-10-20T15:30:52+09:00</updated>
    <id>http://jangajan.com/blog/2014/10/20/use-new-relic-in-rails4-at-heroku</id>
    <content type="html"><![CDATA[<p>Rails4アプリにNew Relicを入れます。<br/>
herokuで動かす場合はadd-onとかの設定が必要でした。</p>

<p><a href="https://docs.newrelic.com/docs/agents/ruby-agent/installation-configuration/ruby-agent-installation">New Relicの本家</a>と<a href="https://devcenter.heroku.com/articles/newrelic#ruby-configuration">herokuのNew Relicの適用ページ</a>が参考になります。</p>

<!-- more -->


<p>New Relicへの登録をすませると、手順ページが表示されていきます。</p>

<h1>New Relicの設定</h1>

<h2>Choose your language</h2>

<p>言語をRubyに選択します。</p>

<h2>Get your license key</h2>

<p>Generate license keyを単にクリックするだけです。<br/>
これで、newrelic.ymlをダウンロードできます。</p>

<h2>Install the New Relic agent with bundler</h2>

<p>Gemfileの修正と、gemのインストールを実行します。</p>

<h2>Download newrelic.yml</h2>

<p>license keyを生成すると、Donwload the newrelic.yml fileが有効になりますので、クリックしてファイルを取得します。
その後、<code>${APP_ROOT}/config/newrelic.yml</code>にダウンロードしたファイルを配置します。</p>

<h2>アプリ名の設定</h2>

<p>newrelic.ymlにアプリ名を設定します。</p>

<figure class='code'><figcaption><span>config/newrelic.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">common</span><span class="p-Indicator">:</span> <span class="nl">&amp;default_settings</span>
</span><span class='line'><span class="nn">...</span>
</span><span class='line'>  <span class="l-Scalar-Plain">app_name</span><span class="p-Indicator">:</span> <span class="c1">#{アプリケーション名}</span>
</span><span class='line'><span class="nn">...</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Postgles</h2>

<p>postgresqlの場合は特殊な設定が必要になります。
なくても動きますが,New Relicの一部機能は動作しません。</p>

<figure class='code'><figcaption><span>config/newrelic.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">common</span><span class="p-Indicator">:</span> <span class="nl">&amp;default_settings</span>
</span><span class='line'>  <span class="l-Scalar-Plain">transaction_tracer</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">explain_enabled</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ローカルで確認</h2>

<p>この状態でローカルで確認できます。<br/>
ローカルがPostgresqlでなければ直前の対応は不要かもしれません。</p>

<p><a href="http://localhost:3000/newrelic">http://localhost:3000/newrelic</a></p>

<h1>herokuの設定</h1>

<p>herokuではadd-onでnew relicと連携します。</p>

<h2>Add-onの設定</h2>

<p>add-on追加のためにはクレジットカードの情報が必須です。
(無料プランがあります)</p>

<p><a href="https://addons.heroku.com/newrelic">New RelicのAdd-onページ</a>から設定を有効にしてください。</p>

<h2>環境変数の設定</h2>

<p><code>heroku config</code>で設定を変更。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>heroku config:set <span class="nv">NEW_RELIC_APP_NAME</span><span class="o">=</span><span class="s2">&quot;各自のアプリケーション名&quot;</span>
</span><span class='line'>heroku config:set <span class="nv">RACK_ENV</span><span class="o">=</span>production
</span></code></pre></td></tr></table></div></figure>


<h2>本番で確認</h2>

<p>このままherokuへのpushが成功した後、数分してからNew Relicにアクセスすれば接続確認できます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rspecメモ]]></title>
    <link href="http://jangajan.com/blog/2014/10/14/rspec-memo/"/>
    <updated>2014-10-14T18:00:00+09:00</updated>
    <id>http://jangajan.com/blog/2014/10/14/rspec-memo</id>
    <content type="html"><![CDATA[<p>rspecの学習中です。</p>

<!-- more -->


<h1>rspecのワークショップ</h1>

<p>以下のチュートリアルでrspecの学習をした時のメモです。</p>

<p><a href="http://d.hatena.ne.jp/t-wada/20100228/p1">http://d.hatena.ne.jp/t-wada/20100228/p1</a>  <br/>
<a href="http://qiita.com/jnchito/items/624f6d5023c279046a1c">http://qiita.com/jnchito/items/624f6d5023c279046a1c</a></p>

<h1>describeとcontextとit</h1>

<ul>
<li><code>describe</code>は対象を説明</li>
<li><code>context</code>は状況を説明</li>
<li><code>it</code>は試験内容を説明</li>
<li><code>it</code>内に具体的な試験を記述</li>
<li><code>it</code>の引数の説明を省略しても試験内容をrspecが判断して仕様記述を組み立てる</li>
<li>読みやすさ次第で<code>it</code>の文字列引数を使うことを推奨</li>
<li>内容を確認したい時は、<code>rspec -fd specfile</code></li>
</ul>


<h1>beforeにテスト実行前処理を記述</h1>

<ul>
<li><code>before</code>の引数のデフォルトは<code>:each</code></li>
</ul>


<h1>subjectでブロックの評価結果がit内のshouldのレシーバになる</h1>

<ul>
<li>明示的に<code>it</code>内で<code>subject</code>メソッドを利用することで、<code>subject</code>ブロックの評価結果を使うことができる</li>
</ul>


<h1><code>shared_examples</code>と<code>it_behaves_like</code></h1>

<ul>
<li><code>shared_examples_for 'キー名' do ~ end</code>とするとブロック内の処理を<code>it_should_behave_like 'キー名'</code>で呼び出してテストできる</li>
<li>ただし、キー名は全てのテストで重複しないように注意する</li>
</ul>


<h1>predicateマッチャ</h1>

<ul>
<li><code>expect(xxx).to eq false -&gt; expect(xxx).not_to be_empty</code></li>
</ul>


<h1>rspec3で標準から外れた機能</h1>

<ul>
<li><code>its</code>メソッドは<code>rspec-its gem</code>で提供</li>
<li>have マッチャ

<ul>
<li>サイズのチェックをテストしやすくするマッチャ(ただし、rspec3ではgemに外出しされた)</li>
<li>have マッチャを使った場合、 <code>have(n).item</code> と <code>have(n).items</code> は互いに置換可能

<ul>
<li>nの値により自然な形にするのがいい</li>
</ul>
</li>
<li>have(n).named_collection記法でもかける

<ul>
<li><code>it {is_expected.to have(n).xxx }</code></li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Factorygirlの読み込みでエラー]]></title>
    <link href="http://jangajan.com/blog/2014/10/08/require-rspec/"/>
    <updated>2014-10-08T14:19:07+09:00</updated>
    <id>http://jangajan.com/blog/2014/10/08/require-rspec</id>
    <content type="html"><![CDATA[<p>パーフェクトRuby on Rails の7章のFactoryGirlを省略するところ(リスト7.12)で<code>uninitialized constant FactoryGirl (NameError)</code>が発生しました。</p>

<!-- more -->


<p><code>factory_girl_rails</code>を読み込んであげればおーけーです。</p>

<figure class='code'><figcaption><span>spec/spec_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;factory_girl_rails&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">include</span> <span class="no">FactoryGirl</span><span class="o">::</span><span class="no">Syntax</span><span class="o">::</span><span class="no">Methods</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
