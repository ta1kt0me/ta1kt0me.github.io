<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[JanGaJan.com]]></title>
  <link href="http://jangajan.com/atom.xml" rel="self"/>
  <link href="http://jangajan.com/"/>
  <updated>2014-10-04T03:43:26+09:00</updated>
  <id>http://jangajan.com/</id>
  <author>
    <name><![CDATA[talkto_me]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails4でacts-as-taggable-on Gemを使う]]></title>
    <link href="http://jangajan.com/blog/2014/10/04/acts-as-taggable-on-in-rails/"/>
    <updated>2014-10-04T03:40:31+09:00</updated>
    <id>http://jangajan.com/blog/2014/10/04/acts-as-taggable-on-in-rails</id>
    <content type="html"><![CDATA[<p>ユーザーに紐づくタスクに、タグ付けをするという機能を実現する方法です。<br/>
<code>acts-as-taggable-on</code>というgemを利用することで簡単(苦戦した&hellip;)にタグ機能は実現できるそうです。<br/>
なんとかできたっぽい&hellip;</p>

<p>環境は、こんな感じです。</p>

<ul>
<li>Rails 4.1.6</li>
<li>ruby 2.1.2p95</li>
<li>acts-as-taggable-on 3.4.2</li>
</ul>


<p>Githubの<a href="https://github.com/mbleigh/acts-as-taggable-on#tag-ownership">README</a>を参考にしました</p>

<!-- more -->


<h1>Model</h1>

<p>そもそもリレーション関係の設定でハマりましたが、これで良さそうです。<br/>
関係としては<code>user 1-n task</code>となり、taskにタグを設定します。<br/>
タグは、userごとに別々に管理します。</p>

<figure class='code'><figcaption><span>app/models/user.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">acts_as_tagger</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:tasks</span><span class="p">,</span> <span class="ss">dependent</span><span class="p">:</span> <span class="ss">:destroy</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/models/task.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Task</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">acts_as_taggable</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>View</h1>

<p>タグのところだけピックアップ。<br/>
（簡単なサンプル作れば良かった）  <br/>
画面表示するController内のメソッドで、選択可能なタグを<code>@user_tags</code>に入れています。<br/>
タグは複数選択可能にするため、checkboxを利用しました。<br/>
checkbox生成でrailsの仕組みを利用しようとしたのですが、以下の2点を実現しようとしてうまいやり方が見つからなかった&hellip;</p>

<ul>
<li>labelでクリック連携</li>
<li>valueの値をタグの名前</li>
</ul>


<p>form_for内に記述します。</p>

<figure class='code'><figcaption><span>app/views/tasks/_form.html.haml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="c">/ @user_tagsはcontrollerで配列で設定 ex) =&gt; [&quot;tag1&quot;, &quot;tag2&quot;]</span>
</span><span class='line'><span class="p">-</span> <span class="vi">@user_tags</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">tag</span><span class="o">|</span>
</span><span class='line'>  <span class="c">/ tagを複数選択可能にするため、checkboxを利用</span>
</span><span class='line'>  <span class="nt">%input</span><span class="p">{</span><span class="nb">id</span><span class="ss">:&quot;tag-</span><span class="si">#{</span><span class="n">tag</span><span class="si">}</span>&quot; ,name:&#39;task[tag_list][]&#39;, type:&#39;checkbox&#39;,value:&quot;<span class="si">#{</span><span class="n">tag</span><span class="si">}</span>&quot;}
</span><span class='line'>  <span class="nt">%label</span><span class="p">{</span><span class="k">for</span><span class="ss">:&quot;tag-</span><span class="si">#{</span><span class="n">tag</span><span class="si">}</span>&quot;}
</span><span class='line'>    <span class="nt">%span</span><span class="nc">.task-tag</span>
</span><span class='line'>      <span class="p">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">tag</span><span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>タグ付けよりもrailsでcheckbox使うところに時間とられた&hellip;宿題ですね。</p>

<h1>Controller</h1>

<p>リクエストのtask[tag_list]という値の中に、タグが含まれます。<br/>
<code>permit</code>で、配列をチェックしたい場合は、<code>tag_list: []</code>と指定してあげる必要がありました。</p>

<figure class='code'><figcaption><span>app/controllers/tasks_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">TasksController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="c1"># current_user =&gt; User.find(session[:user_id])</span>
</span><span class='line'>    <span class="vi">@task</span> <span class="o">=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">tasks</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="n">task_params</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@task</span><span class="o">.</span><span class="n">user</span> <span class="o">=</span> <span class="n">current_user</span>
</span><span class='line'>    <span class="c1"># tagの設定処理 :withには&#39;tag1, tag2&#39;という形式の文字列を設定することでタグを登録できる</span>
</span><span class='line'>    <span class="n">current_user</span><span class="o">.</span><span class="n">tag</span><span class="p">(</span><span class="vi">@task</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="vi">@task</span><span class="o">.</span><span class="n">tag_list</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;, &#39;</span><span class="p">),</span> <span class="ss">:on</span> <span class="o">=&gt;</span> <span class="ss">:tags</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@task</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="c1"># 成功処理</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="c1"># 失敗処理</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">task_params</span>
</span><span class='line'>    <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:task</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span>
</span><span class='line'>      <span class="c1"># tag_list: []を指定することで、checkboxの複数の値を配列にして、tag_listに設定可能になる</span>
</span><span class='line'>      <span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:deadline</span><span class="p">,</span> <span class="ss">tag_list</span><span class="p">:</span> <span class="o">[]</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>もしかしたらもっといいやり方があるかもしれません。<br/>
気をつける場所はいくつかあるものの、意外と簡単かも。</p>

<h1>補足</h1>

<h2>ユーザーが設定しているタグの一覧を取得する</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="vi">@user_tags</span> <span class="o">=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">owned_tag_list</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;tag1&quot;</span><span class="p">,</span> <span class="s2">&quot;tag2&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ヘルパーメソッドでHaml::Helpersを使う]]></title>
    <link href="http://jangajan.com/blog/2014/10/03/haml-helper/"/>
    <updated>2014-10-03T03:16:51+09:00</updated>
    <id>http://jangajan.com/blog/2014/10/03/haml-helper</id>
    <content type="html"><![CDATA[<p>HAMLのViewのヘルパーメソッドどう書くのかという話です。<br/>
<a href="http://haml.info/docs/yardoc/Haml/Helpers.html">Module Haml::Helpers</a>を使います。</p>

<!-- more -->


<p>普通にタグを書く分には<code>haml_tag</code>を使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">module</span> <span class="nn">ApplicationHelper</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">alert_close_icon</span>
</span><span class='line'>    <span class="n">haml_tag</span><span class="p">(</span><span class="ss">:button</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s1">&#39;close&#39;</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="s1">&#39;button&#39;</span><span class="p">,</span> <span class="s1">&#39;data-dismiss&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;alert&#39;</span><span class="p">,</span> <span class="s1">&#39;aria-hidden&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;true&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">haml_concat</span> <span class="s1">&#39;&amp;times;&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bootstrap3のモーダル表示（HAMLサンプル）]]></title>
    <link href="http://jangajan.com/blog/2014/09/29/haml-modal-in-bootstrap/"/>
    <updated>2014-09-29T19:50:21+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/29/haml-modal-in-bootstrap</id>
    <content type="html"><![CDATA[<p>bootstrap3でModalウインドウを表示するサンプルです。
サンプルはHAML形式です。</p>

<!-- more -->


<p>呼び出しのボタンで、<code>data-toggle="modal"</code>と<code>data-target="#表示するモーダルのid"</code>を指定します。<br/>
Modalは下のdiv構成で組むことで表示できます。<br/>
<code>#task-modal</code>は呼び出すModalで設定したものを指定します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="c">/ Modalの呼び出し元になるボタン</span>
</span><span class='line'><span class="nt">%button</span><span class="nc">.btn.btn-info.btn-lg.btn-block</span><span class="p">{</span><span class="ss">data</span><span class="p">:</span> <span class="p">{</span><span class="ss">toggle</span><span class="p">:</span> <span class="s1">&#39;modal&#39;</span><span class="p">,</span> <span class="ss">target</span><span class="p">:</span> <span class="s1">&#39;#task-modal&#39;</span><span class="p">}</span>}
</span><span class='line'>  Create Modal Task
</span><span class='line'>
</span><span class='line'>...(略)
</span><span class='line'>
</span><span class='line'><span class="c">/ 表示するModal</span>
</span><span class='line'><span class="nt">%div</span><span class="nc">.modal</span><span class="nf">#task-modal</span>
</span><span class='line'>  <span class="nt">%div</span><span class="nc">.modal-dialog</span>
</span><span class='line'>    <span class="nt">%div</span><span class="nc">.modal-content</span>
</span><span class='line'>      <span class="nt">%div</span><span class="nc">.modal-header</span>
</span><span class='line'>        <span class="nt">%button</span><span class="nc">.close</span><span class="p">{</span><span class="ss">type</span><span class="p">:</span><span class="s1">&#39;button&#39;</span><span class="p">,</span> <span class="ss">data</span><span class="p">:</span> <span class="p">{</span><span class="ss">dismiss</span><span class="p">:</span> <span class="s1">&#39;modal&#39;</span><span class="p">}</span>}
</span><span class='line'>          X
</span><span class='line'>        <span class="nt">%h4</span><span class="nc">.modal-title</span>
</span><span class='line'>          TITLE
</span><span class='line'>      <span class="nt">%div</span><span class="nc">.modal-body</span>
</span><span class='line'>        <span class="nt">%p</span>
</span><span class='line'>          BODY
</span><span class='line'>      <span class="nt">%div</span><span class="nc">.modal-footer</span>
</span><span class='line'>        <span class="nt">%button</span><span class="nc">.btn.btn-primary</span><span class="p">{</span><span class="ss">type</span><span class="p">:</span> <span class="s1">&#39;button&#39;</span><span class="p">}</span>
</span><span class='line'>          Save
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ページ単位のjavascriptにcontent_forを使う]]></title>
    <link href="http://jangajan.com/blog/2014/09/27/content-for/"/>
    <updated>2014-09-27T04:14:07+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/27/content-for</id>
    <content type="html"><![CDATA[<p>ページ単位で特定のjavascriptを実行させたい時に、content_forを使えばいいんだね、という結論でした。</p>

<!-- more -->


<h1>javascriptをページごとのファイルに書けない理由</h1>

<p>そもそもbootstrapで作成したコンテンツにこんな記載がありました。
hamlでyatiのテーマを適用しています。</p>

<figure class='code'><figcaption><span>app/views/layouts/application.html.haml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="c">/ ...ページ最下部</span>
</span><span class='line'>      <span class="c">= yield</span>
</span><span class='line'><span class="c">/</span>
</span><span class='line'>  <span class="c">Javascripts</span>
</span><span class='line'>  <span class="c">\==================================================</span>
</span><span class='line'><span class="c">/ Placed at the end of the document so the pages load faster</span>
</span><span class='line'><span class="p">=</span> <span class="n">javascript_include_tag</span> <span class="s2">&quot;yeti&quot;</span>
</span><span class='line'><span class="p">=</span> <span class="k">yield</span><span class="p">(</span><span class="ss">:page_javascript</span><span class="p">)</span> <span class="k">if</span> <span class="n">content_for?</span><span class="p">(</span><span class="ss">:page_javascript</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>各ページのコンテンツは、<code>= yield</code>に埋め込まれます。<br/>
しかし、<code>= javascript_include_tag "yeti"</code>という処理でJavascriptの定義を追加するため、各ページのhamlにjavascriptを書くとjQueryの処理が動きません。<br/>
そこで、<code>= yield(:page_javascript) if content_for?(:page_javascript)</code>を利用します。</p>

<h1>content_forの使い方</h1>

<p>各ページのhamlの下部でcontent_forを利用することにより、application.html.hamlの<code>= yield(:page_javascript) if...</code>のところに出力されます。</p>

<figure class='code'><figcaption><span>app/views/tasks/new.html.haml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="p">-</span> <span class="n">content_for</span> <span class="ss">:page_javascript</span> <span class="k">do</span>
</span><span class='line'>  <span class="nd">:javascript</span>
</span><span class='line'>    <span class="nd">jQuery(&#39;#datetimepicker&#39;).datetimepicker();</span>
</span></code></pre></td></tr></table></div></figure>


<p>なので、ページごとのjavascriptは<code>content_for :page_javascript</code>を利用して書くようにしましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsでbootswitchのテーマを適用したらActionView::Template::Error]]></title>
    <link href="http://jangajan.com/blog/2014/09/26/include-css-error-in-rails/"/>
    <updated>2014-09-26T16:49:11+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/26/include-css-error-in-rails</id>
    <content type="html"><![CDATA[<p>bootswitch適用時に発生したActionView::Template::Errorの解消方法です。</p>

<!-- more -->


<h1>bootswatch適用</h1>

<p>以下のようにbootswatchを適用しました。</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;twitter-bootswatch-rails&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;twitter-bootswatch-rails-helpers&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;therubyracer&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>今回はyetiを適用しています。<br/>
テンプレートエンジンはslimを使っています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>bundle <span class="nb">exec </span>rails g bootswatch:install yeti
</span><span class='line'>bundle <span class="nb">exec </span>rails g bootswatch:import yeti
</span><span class='line'>bundle <span class="nb">exec </span>rails g bootswatch:layout yeti
</span><span class='line'>mv app/views/layouts/yeti.html.slim app/views/layouts/application.html.slim
</span></code></pre></td></tr></table></div></figure>


<p>最後のmvでテンプレートファイルの入れ替えを行っています。</p>

<h1>ActionView::Template::Errorエラー</h1>

<p>ここで<code>rails s</code>すると、以下のエラーが発生しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ActionView::Template::Error <span class="o">(</span>Asset filtered out and will not be served: add <span class="sb">`</span>Rails.application.config.assets.precompile +<span class="o">=</span> %w<span class="o">(</span> yeti.css <span class="o">)</span><span class="sb">`</span> to <span class="sb">`</span>config/initializers/assets.rb<span class="sb">`</span> and restart your server<span class="o">)</span>:
</span><span class='line'>     9:     / Le HTML5 shim, <span class="k">for</span> IE6-8 support of HTML elements
</span><span class='line'>    10:     /<span class="o">[</span><span class="k">if</span> lt IE 9<span class="o">]</span>
</span><span class='line'>    11:       <span class="o">=</span> javascript_include_tag <span class="s2">&quot;http://html5shim.googlecode.com/svn/trunk/html5.js&quot;</span>
</span><span class='line'>    12:     <span class="o">=</span> stylesheet_link_tag <span class="s2">&quot;yeti&quot;</span>, :media <span class="o">=</span>&gt; <span class="s2">&quot;all&quot;</span>
</span><span class='line'>    13:     <span class="o">=</span> yield<span class="o">(</span>:page_stylesheet<span class="o">)</span> <span class="k">if</span> content_for?<span class="o">(</span>:page_stylesheet<span class="o">)</span>
</span><span class='line'>    14:
</span><span class='line'>    15:
</span><span class='line'>  app/views/layouts/application.html.slim:12:in <span class="sb">`</span>_app_views_layouts_application_html_slim__3298097478580668215_70163995513140<span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  Rendered vendor/bundle/ruby/2.1.0/gems/actionpack-4.1.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb <span class="o">(</span>1.0ms<span class="o">)</span>
</span><span class='line'>  Rendered vendor/bundle/ruby/2.1.0/gems/actionpack-4.1.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb <span class="o">(</span>1.0ms<span class="o">)</span>
</span><span class='line'>  Rendered vendor/bundle/ruby/2.1.0/gems/actionpack-4.1.6/lib/action_dispatch/middleware/templates/rescues/template_error.html.erb within rescues/layout <span class="o">(</span>15.5ms<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>テンプレートファイルの12行目、ちょうどyetinテーマのcssのところですね。<br/>
どうやら、呼び込みたいassetsファイルがちゃんとprecompileされていないらしい。<br/>
追加したいなら、<code>config/initializers/assets.rb</code>にこんな感じに追加しろぼけってエラーメッセージ優しい。</p>

<h1>エラー解消</h1>

<p>そんなわけでこんな感じで修正。</p>

<figure class='code'><figcaption><span>config/initializers/assets.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">precompile</span> <span class="o">+=</span> <span class="sx">%w( yeti.css yeti.js )</span>
</span></code></pre></td></tr></table></div></figure>


<p>yeti.jsも同じエラーが出たのであわせて解消。<br/>
これで<code>rails s</code>したらスタイル代わった。やった。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ForbiddenAttributesErrorが発生]]></title>
    <link href="http://jangajan.com/blog/2014/09/24/forbiddenattributeserror-in-rails/"/>
    <updated>2014-09-24T02:33:27+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/24/forbiddenattributeserror-in-rails</id>
    <content type="html"><![CDATA[<p>Rails4で、ForbiddenAttributesErrorが発生した場合の対応です。</p>

<h1>ActiveModel::ForbiddenAttributesError発生</h1>

<p>次のようなエラーが発生しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ActiveModel::ForbiddenAttributesError <span class="o">(</span>ActiveModel::ForbiddenAttributesError<span class="o">)</span>:
</span><span class='line'>  app/controllers/posts_controller.rb:13:in <span class="sb">`</span>create<span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>13行目が悪さをしているらしい&hellip;</p>

<figure class='code'><figcaption><span>app/controllers/posts_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>  <span class="vi">@feed</span> <span class="o">=</span> <span class="no">Feed</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:post</span><span class="o">]</span><span class="p">)</span> <span class="c1"># 13行目</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>これはmass assignmentの問題を解決するために、Rails4から標準で導入された対応により発生しました。<br/>
mass assignmentとはsubmitしたデータから簡単にModelを作ることができるRailsの仕組みです。<br/>
しかし、意図しないパラメータも含んだ状態でModelが作られるという脆弱性のため、このようなエラーが発生するようになりました。<br/>
mass assignmentの問題とその対策についての詳細な説明は<a href="http://www.willnet.in/48">Rails4.0に含まれる strong_parameters について</a>を参考にしてください。</p>

<h1>対応</h1>

<h2>Model作成に必要なsubmitデータを指定する方法</h2>

<p>Model作成に必要なsubmitデータを明示的に指定し、チェックする方法です。
permitメソッドを使うことで、submitデータを絞り込みます。</p>

<figure class='code'><figcaption><span>app/controllers/posts_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>  <span class="vi">@feed</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">post_params</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kp">private</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">post_params</span>
</span><span class='line'>  <span class="c1"># submitしたデータのうち、Model作成に必要なものを</span>
</span><span class='line'>  <span class="c1"># permitの引数に指定する</span>
</span><span class='line'>  <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:params</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span>
</span><span class='line'>    <span class="ss">:title</span><span class="p">,</span> <span class="ss">:body</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>エラーを発生させない方法</h2>

<p>こちらはmass assignmentの問題を解決していないため、お勧めしません。<br/>
pertmitメソッドを通さず、全てのsubmitデータを利用します。</p>

<figure class='code'><figcaption><span>config/application.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="no">Rails</span><span class="o">::</span><span class="no">Application</span>
</span><span class='line'>    <span class="c1"># デフォルトはfalseに設定されている</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">action_controller</span><span class="o">.</span><span class="n">permit_all_parameters</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>エラー発生場所</h1>

<p><code>ActiveModel::ForbiddenAttributesError</code>は次の処理で発生します。</p>

<ul>
<li>ActiveModel::ForbiddenAttributesProtection#sanitize_for_mass_assignment(attributes)</li>
</ul>


<p>上述のpermitメソッドを実行することで、データはチェック済みの状態になります。<br/>
このチェック済み状態を確認するのが、<code>sanitize_for_mass_assignment</code>の役割です。<br/>
permitメソッドは<code>ActionController::Parameters</code>に定義してあります。</p>

<h1>未チェックのsumitデータがあった場合の対応</h1>

<p>未チェックのsubmitデータがあった場合の挙動をコントロールできます。<br/>
<code>config.action_controller.action_on_unpermitted_parameters</code>を使います。</p>

<h2>エラーにする</h2>

<figure class='code'><figcaption><span>config/application.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="no">Rails</span><span class="o">::</span><span class="no">Application</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">action_controller</span><span class="o">.</span><span class="n">action_on_unpermitted_parameters</span> <span class="o">=</span> <span class="ss">:raise</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ログに出力する</h2>

<figure class='code'><figcaption><span>config/application.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="no">Rails</span><span class="o">::</span><span class="no">Application</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">action_controller</span><span class="o">.</span><span class="n">action_on_unpermitted_parameters</span> <span class="o">=</span> <span class="ss">:log</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>出力結果はこうなります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Unpermitted parameters: hogehoge
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I18nの設定でdatetime_selectの月表示がおかしい]]></title>
    <link href="http://jangajan.com/blog/2014/09/12/perfect-rails-i18n-months/"/>
    <updated>2014-09-12T19:09:36+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/12/perfect-rails-i18n-months</id>
    <content type="html"><![CDATA[<p>前記事に引き続き、i18nの対応です。<br/>
これいっぱいありそう。<br/>
datetime_selectで表示した<code>月</code>欄の表示が妙だ。</p>

<!-- more -->


<h1>ja.ymlにmonth_namesを追加</h1>

<p>翻訳ファイルに<code>month_names</code>を追加しましょう。</p>

<figure class='code'><figcaption><span>config/locals/ja.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">ja</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">date</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">order</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">:year</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">:month</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">:day</span>
</span><span class='line'>    <span class="l-Scalar-Plain">month_names</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">~</span><span class="p-Indicator">,</span> <span class="nv">1月</span><span class="p-Indicator">,</span> <span class="nv">2月</span><span class="p-Indicator">,</span> <span class="nv">3月</span><span class="p-Indicator">,</span> <span class="nv">4月</span><span class="p-Indicator">,</span> <span class="nv">5月</span><span class="p-Indicator">,</span> <span class="nv">6月</span><span class="p-Indicator">,</span> <span class="nv">7月</span><span class="p-Indicator">,</span> <span class="nv">8月</span><span class="p-Indicator">,</span> <span class="nv">9月</span><span class="p-Indicator">,</span> <span class="nv">10月</span><span class="p-Indicator">,</span> <span class="nv">11月</span><span class="p-Indicator">,</span> <span class="nv">12月</span><span class="p-Indicator">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちなみに月表示には省略形も存在します。(JanuaryだとJanとか)<br/>
この時は<code>abbr_month_names</code>というものを使います。<br/>
日本語だとそもそも表記が短いのであまり意味はないと思いますが、思わぬところでエラーが発生したらそちらを疑いましょう。</p>

<p>これもactivesupportにenの設定はありました。<br/>
曜日も同様なんでご注意を。
と思ったら、素晴らしいものがありました。</p>

<ul>
<li><a href="https://github.com/svenfuchs/rails-i18n/blob/master/rails/locale/ja.yml">https://github.com/svenfuchs/rails-i18n/blob/master/rails/locale/ja.yml</a>

<ul>
<li>各言語ごとにあるのでこれベースにするのがいいですね。</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I18nの設定でdatetime_selectのエラー対応]]></title>
    <link href="http://jangajan.com/blog/2014/09/12/perfect-rails-i18n/"/>
    <updated>2014-09-12T18:25:27+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/12/perfect-rails-i18n</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774165166/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=4774165166&linkCode=as2&tag=pochan0919-22">パーフェクト Ruby on Rails</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=pochan0919-22&l=as2&o=9&a=4774165166" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />を、第6章からやってます。</p>

<p>日本語対応のi18nの設定でエラーが発生しました。<br/>
補足ですが、私のRailsの環境は<code>4.1.5</code>です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">ActionView</span><span class="o">::</span><span class="no">Template</span><span class="o">::</span><span class="no">Error</span> <span class="p">(</span><span class="n">undefined</span> <span class="nb">method</span> <span class="sb">`map&#39; for &quot;translation missing: ja.date.order&quot;:String):</span>
</span><span class='line'><span class="sb">    27:   &lt;/div&gt;</span>
</span><span class='line'><span class="sb">    28:   &lt;div class=&quot;form-group&quot;&gt;</span>
</span><span class='line'><span class="sb">    29:     &lt;%= f.label :end_time %&gt;</span>
</span><span class='line'><span class="sb">    30:     &lt;%= f.datetime_select :end_time, start_year: now.year, end_year: now.year + 1 %&gt;</span>
</span><span class='line'><span class="sb">    31:   &lt;/div&gt;</span>
</span><span class='line'><span class="sb">    32:   &lt;div class=&quot;form-group&quot;&gt;</span>
</span><span class='line'><span class="sb">    33:     &lt;%= f.label :content %&gt;</span>
</span><span class='line'><span class="sb">  app/views/events/new.html.erb:30:in `</span><span class="n">block</span> <span class="k">in</span> <span class="n">_app_views_events_new_html_erb__622987462779560017_70179900721920</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1">  app/views/events/new.html.erb:5:in `_app_views_events_new_html_erb__622987462779560017_70179900721920&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="no">Rendered</span> <span class="n">vendor</span><span class="o">/</span><span class="n">bundle</span><span class="o">/</span><span class="n">ruby</span><span class="o">/</span><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">actionpack</span><span class="o">-</span><span class="mi">4</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">5</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">action_dispatch</span><span class="o">/</span><span class="n">middleware</span><span class="o">/</span><span class="n">templates</span><span class="o">/</span><span class="n">rescues</span><span class="o">/</span><span class="n">_trace</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">erb</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">8</span><span class="n">ms</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Rendered</span> <span class="n">vendor</span><span class="o">/</span><span class="n">bundle</span><span class="o">/</span><span class="n">ruby</span><span class="o">/</span><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">actionpack</span><span class="o">-</span><span class="mi">4</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">5</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">action_dispatch</span><span class="o">/</span><span class="n">middleware</span><span class="o">/</span><span class="n">templates</span><span class="o">/</span><span class="n">rescues</span><span class="o">/</span><span class="n">_request_and_response</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">erb</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">5</span><span class="n">ms</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Rendered</span> <span class="n">vendor</span><span class="o">/</span><span class="n">bundle</span><span class="o">/</span><span class="n">ruby</span><span class="o">/</span><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">actionpack</span><span class="o">-</span><span class="mi">4</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">5</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">action_dispatch</span><span class="o">/</span><span class="n">middleware</span><span class="o">/</span><span class="n">templates</span><span class="o">/</span><span class="n">rescues</span><span class="o">/</span><span class="n">template_error</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">erb</span> <span class="n">within</span> <span class="n">rescues</span><span class="o">/</span><span class="n">layout</span> <span class="p">(</span><span class="mi">16</span><span class="o">.</span><span class="mi">9</span><span class="n">ms</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h1>date.orderの指定</h1>

<h2>発生箇所</h2>

<p>該当するソースコードはこちらです。<br/>
ちなみに、i18nを無効化(<code>config.i18n.default_locale</code>を初期状態のようにコメントアウト)していると発生しません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;form-group&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">%= f.label :start_time %&gt;</span>
</span><span class='line'><span class="sx">    &lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">datetime_select</span> <span class="ss">:start_time</span><span class="p">,</span> <span class="ss">start_year</span><span class="p">:</span> <span class="n">now</span><span class="o">.</span><span class="n">year</span><span class="p">,</span> <span class="ss">end_year</span><span class="p">:</span> <span class="n">now</span><span class="o">.</span><span class="n">year</span> <span class="o">+</span> <span class="mi">1</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>エラーメッセージからすると、<code>ja.date.order</code>で翻訳に失敗しちゃったよテヘってなってるんで、ja.yml修正すれば良さそう。</p>

<h2>解決策</h2>

<p>2つあります。</p>

<p><a href="https://github.com/rails/rails/blob/a8eb6018318f65e34486da8d1860b3f0d774383d/guides/source/i18n.md#action-view-helper-methods">ここ</a>に書いてありますね。</p>

<blockquote><p>datetime_select also looks up the order option from date.order (unless you pass the option explicitly).</p></blockquote>

<h3>ja.ymlに設定を追加</h3>

<p>翻訳ファイルの修正です。</p>

<figure class='code'><figcaption><span>config/locals/ja.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">ja</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">date</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">order</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">:year</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">:month</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">:day</span>
</span></code></pre></td></tr></table></div></figure>


<p>なお、デフォルト(en)の場合は、activesupportの設定が適用されています。</p>

<h3>datetime_selectのoptionにorderを追加</h3>

<p>datetime_selectに<code>order</code>というoptionを追加することで、ja.ymlの修正をしないで対応できます。 <br/>
優先順位は<code>ja.ymlで設定 &lt; datetime_selectでoption指定</code>なので、必要があれば設定すればいいと思います。</p>

<figure class='code'><figcaption><span>config/locals/ja.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'>  <span class="l-Scalar-Plain">&lt;div class=&quot;form-group&quot;&gt;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">&lt;%= f.label :start_time %&gt;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">&lt;%= f.datetime_select :start_time, start_year</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">now.year, end_year</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">now.year + 1, order</span><span class="p-Indicator">:</span> <span class="p-Indicator">[:</span><span class="nv">year</span><span class="p-Indicator">,</span> <span class="p-Indicator">:</span><span class="nv">month</span><span class="p-Indicator">,</span> <span class="p-Indicator">:</span><span class="nv">day</span><span class="p-Indicator">]</span> <span class="err">%</span><span class="p-Indicator">&gt;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RailsでLocaleを指定する]]></title>
    <link href="http://jangajan.com/blog/2014/09/11/perfect-rails-locale/"/>
    <updated>2014-09-11T15:34:56+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/11/perfect-rails-locale</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774165166/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=4774165166&linkCode=as2&tag=pochan0919-22">パーフェクト Ruby on Rails</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=pochan0919-22&l=as2&o=9&a=4774165166" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />を、第6章からやってます。</p>

<p>RailsにおけるTimezoneの設定方法です。
<code>config/application.rb</code>で設定します。</p>

<!-- more -->


<h1>Timezoneの日時設定</h1>

<p>Timezoneを指定した日時は、<code>Time.zone.nowe</code>で取得します。
デフォルトでは、<code>UTC</code>となります。</p>

<figure class='code'><figcaption><span>rails console</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">001</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="no">Time</span><span class="o">.</span><span class="n">zone</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">Thu</span><span class="p">,</span> <span class="mi">11</span> <span class="no">Sep</span> <span class="mi">2014</span> <span class="mo">06</span><span class="p">:</span><span class="mi">33</span><span class="p">:</span><span class="mi">19</span> <span class="no">UTC</span> <span class="o">+</span><span class="mo">00</span><span class="p">:</span><span class="mo">00</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを<code>JST</code>に変更するには、以下の修正をします。</p>

<figure class='code'><figcaption><span>config/application.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">module</span> <span class="nn">AwesomeEvents</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="no">Rails</span><span class="o">::</span><span class="no">Application</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">time_zone</span> <span class="o">=</span> <span class="s1">&#39;Tokyo&#39;</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>rails console</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">003</span><span class="p">:</span><span class="mi">0</span><span class="o">*</span> <span class="no">Time</span><span class="o">.</span><span class="n">zone</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">Thu</span><span class="p">,</span> <span class="mi">11</span> <span class="no">Sep</span> <span class="mi">2014</span> <span class="mi">15</span><span class="p">:</span><span class="mi">33</span><span class="p">:</span><span class="mi">47</span> <span class="no">JST</span> <span class="o">+</span><span class="mi">09</span><span class="p">:</span><span class="mo">00</span>
</span></code></pre></td></tr></table></div></figure>


<h1>time_zoneに設定できる値</h1>

<p><code>config/application.rb</code>の<code>config.time_zone</code>に設定できる情報を確認できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># time_zoneに設定できる値の一覧を表示</span>
</span><span class='line'>bundle <span class="nb">exec </span>rake <span class="nb">time</span>:zones:all
</span><span class='line'>
</span><span class='line'><span class="c"># 現在有効なtime_zoneの値を表示</span>
</span><span class='line'><span class="c"># 設定していない場合、システムのタイムゾーンの値を表示</span>
</span><span class='line'>bundle <span class="nb">exec </span>rake <span class="nb">time</span>:zones:local
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bootstrap3 With Rails4]]></title>
    <link href="http://jangajan.com/blog/2014/09/10/perfect-rails-6-bootstrap/"/>
    <updated>2014-09-10T01:40:22+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/10/perfect-rails-6-bootstrap</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774165166/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=4774165166&linkCode=as2&tag=pochan0919-22">パーフェクト Ruby on Rails</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=pochan0919-22&l=as2&o=9&a=4774165166" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />を、第6章からやってます。</p>

<p>Bootstrapの導入をzipから展開したので、Gemで導入する方法を調査しました。</p>

<!-- more -->


<h1>twitter-bootstrap-rails gemを使う</h1>

<p><a href="https://rubygems.org/gems/twitter-bootstrap-rails">twitter-bootstrap-rails</a>というGemを使うことで、テキスト同様の表示ができます。<br/>
(後の手順で一部テキスト外の修正を行う必要があるかもしれません)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">echo</span> <span class="s2">&quot;gem &#39;twitter-bootstrap-rails&#39;, &#39;&gt;= 3.1.1&#39;&quot;</span> &gt;&gt; Gemfile
</span><span class='line'>bundle install --path vendor/bundle
</span><span class='line'>bundle <span class="nb">exec </span>rails generate bootstrap:install static
</span></code></pre></td></tr></table></div></figure>


<p><code>p.167 リスト6.3</code>の通り<code>app/views/layouts/application.html.erb</code>を修正すれば完了です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sedで1行追加]]></title>
    <link href="http://jangajan.com/blog/2014/09/09/sed-insert-text/"/>
    <updated>2014-09-09T22:41:12+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/09/sed-insert-text</id>
    <content type="html"><![CDATA[<p>Macでコマンドラインから指定した行にテキストを1行追加する方法です。<br/>
sedコマンドを使ってやってみたら、エラーが発生しました。</p>

<!-- more -->


<p><code>16i</code>は16行目に追加することを意味します。
<code>-i</code>をつけると、上書きになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sed -i -e <span class="s2">&quot;16i //= require bootstrap.min&quot;</span> app/assets/javascripts/application.js
</span><span class='line'><span class="o">=</span>&gt; sed: 1: <span class="s2">&quot;16i //= require bootstr ...&quot;</span>: <span class="nb">command </span>i expects <span class="se">\ </span>followed by text
</span></code></pre></td></tr></table></div></figure>


<p>あれ、16iがきいてない？
手持ちのUbuntuだとうまくいったんだけどな、と思って、もしやGnu-？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>brew install gnu-sed
</span><span class='line'><span class="nv">$ </span>gsed -i -e <span class="s2">&quot;16i //= require bootstrap.min&quot;</span> app/assets/javascripts/application.js
</span></code></pre></td></tr></table></div></figure>


<p>成功！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyのThreadを利用したWebサーバーを作る]]></title>
    <link href="http://jangajan.com/blog/2014/09/07/unix-thread-socket-server-in-ruby/"/>
    <updated>2014-09-07T03:15:15+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/07/unix-thread-socket-server-in-ruby</id>
    <content type="html"><![CDATA[<p>積読消化シリーズの派生です。<br/>
<a href="http://tatsu-zine.com/books/naruhounix">なるほどUnixプロセス ― Rubyで学ぶUnixの基礎</a><br/>
processをforkして動くWebサーバーをThreadで試してみます。</p>

<!-- more -->


<h1>Threadの簡単な使い方</h1>

<p>まずはThreadの簡単な使い方です。<br/>
一部違いはあるものの、書き方はProcessのfork処理と大きく差はありませんね。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">t1</span> <span class="o">=</span> <span class="no">Thread</span><span class="o">.</span><span class="n">start</span> <span class="p">{</span>
</span><span class='line'>   <span class="nb">puts</span> <span class="s2">&quot;スレッド1 id : </span><span class="si">#{</span><span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>   <span class="nb">sleep</span> <span class="mi">1</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># t1が終わるまではメインスレッドが待ちになる</span>
</span><span class='line'><span class="n">t1</span><span class="o">.</span><span class="n">join</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;メインスレッド id : </span><span class="si">#{</span><span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Thread.start{&hellip;}とすると、新しいThreadを生成してブロックを実行します。</li>
<li>メインスレッドが終了すると、Threadも終了します。</li>
<li>Thread#joinを実行すると、対象のThreadの処理が終了するまで待ちます。</li>
</ul>


<p>ちなみに、Threadはメインスレッドと同じProcessで実行されます。<br/>
そのため、<code>ps</code>でrubyのプロセスを確認すると一つしかありません。</p>

<h1>Threadローカルな変数</h1>

<p>処理プロセスが同じということは、Thread内の処理で変数は共有されることになりますね。<br/>
Threadローカルにするためには、Thread.startの引数に渡します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">access_count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">t1</span> <span class="o">=</span> <span class="no">Thread</span><span class="o">.</span><span class="n">start</span><span class="p">(</span><span class="n">access_count</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">ac</span><span class="o">|</span>
</span><span class='line'>   <span class="nb">puts</span> <span class="s2">&quot;スレッド1 id : </span><span class="si">#{</span><span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">ac</span> <span class="o">+=</span> <span class="mi">1</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">=&gt;</span> <span class="mi">1</span>
</span><span class='line'>   <span class="nb">sleep</span> <span class="mi">1</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">t1</span><span class="o">.</span><span class="n">join</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;メインスレッド id : </span><span class="si">#{</span><span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">access_count</span> <span class="o">+=</span> <span class="mi">1</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">=&gt;</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<h1>複数Threadを待ちたい</h1>

<p>Thread#joinは特定のThreadを待ちます。<br/>
Webサーバーの例では複数のProcessを管理していました。<br/>
同様のことをThreadで実行するには、<code>ThreadsWait</code>を使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;thwait&#39;</span>
</span><span class='line'><span class="n">worker_threads</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="mi">5</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">worker_threads</span> <span class="o">&lt;&lt;</span> <span class="no">Thread</span><span class="o">.</span><span class="n">start</span> <span class="p">{</span>
</span><span class='line'>     <span class="nb">puts</span> <span class="s2">&quot;スレッド1 id : </span><span class="si">#{</span><span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="si">}</span><span class="s2"> &quot;</span>
</span><span class='line'>     <span class="nb">sleep</span> <span class="mi">1</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1"># ThreadsWait.all_waitsで全てのThreadの処理終了を待つ</span>
</span><span class='line'><span class="no">ThreadsWait</span><span class="o">.</span><span class="n">all_waits</span><span class="p">(</span><span class="n">worker_threads</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;メインスレッド id : </span><span class="si">#{</span><span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">access_count</span> <span class="o">+=</span> <span class="mi">1</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">=&gt;</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<h1>複数Threadでリクエストを処理するWebサーバー</h1>

<p>それでは上記を踏まえて、複数Threadで処理するWebサーバーを書いてみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;socket&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;time&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;thwait&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">socket</span> <span class="o">=</span> <span class="no">TCPServer</span><span class="o">.</span><span class="n">open</span> <span class="s1">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="mi">8080</span>
</span><span class='line'>
</span><span class='line'><span class="n">access_count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">worker_threads</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="mi">5</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1"># access_countはThreadローカルにする</span>
</span><span class='line'>  <span class="n">worker_threads</span> <span class="o">&lt;&lt;</span> <span class="no">Thread</span><span class="o">.</span><span class="n">start</span><span class="p">(</span><span class="n">access_count</span><span class="p">){</span><span class="o">|</span><span class="n">ac</span><span class="o">|</span>
</span><span class='line'>    <span class="c1"># threadの処理</span>
</span><span class='line'>    <span class="kp">loop</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">response_body</span> <span class="o">=</span> <span class="s2">&quot;Hello Browser! </span><span class="si">#{</span><span class="n">ac</span> <span class="o">+=</span> <span class="mi">1</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="n">connection</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">accept</span>
</span><span class='line'>      <span class="n">connection</span><span class="o">.</span><span class="n">puts</span> <span class="o">[</span><span class="s1">&#39;HTTP/1.1 200 OK&#39;</span><span class="p">,</span>
</span><span class='line'>                     <span class="s2">&quot;Date: </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">httpdate</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>                     <span class="s1">&#39;Server: Ruby&#39;</span><span class="p">,</span>
</span><span class='line'>                     <span class="s1">&#39;Content-Type: text/html; charset=utf-8&#39;</span><span class="p">,</span>
</span><span class='line'>                     <span class="s2">&quot;Content-Length: </span><span class="si">#{</span><span class="n">response_body</span><span class="o">.</span><span class="n">length</span><span class="si">}</span><span class="se">\r\n\r\n</span><span class="s2">&quot;</span><span class="o">].</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\r\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">connection</span><span class="o">.</span><span class="n">puts</span> <span class="n">response_body</span>
</span><span class='line'>      <span class="n">connection</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># メインスレッドを待ちにする</span>
</span><span class='line'><span class="no">ThreadsWait</span><span class="o">.</span><span class="n">all_waits</span><span class="p">(</span><span class="n">worker_threads</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>実際のところ、<code>socket</code>を複数Threadで共有した場合どうなるか、とかは調査する必要がありますね。<br/>
ただ、Threadで置き換えることもできたということで。<br/>
これでも一応動きます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyのProcessを利用したWebサーバーを作る]]></title>
    <link href="http://jangajan.com/blog/2014/09/05/unix-process-socket-server-in-ruby/"/>
    <updated>2014-09-05T19:08:20+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/05/unix-process-socket-server-in-ruby</id>
    <content type="html"><![CDATA[<p>積読消化シリーズです。<br/>
<a href="http://tatsu-zine.com/books/naruhounix">なるほどUnixプロセス ― Rubyで学ぶUnixの基礎</a><br/>
簡単なWebサーバーを作ります。</p>

<ul>
<li>telnetでアクセスするWebサーバー</li>
<li>ブラウザでアクセスするWebサーバー</li>
<li>forkしたProcessでリクエストを処理するWebサーバー</li>
</ul>


<!-- more -->


<h1>telnetでアクセスするWebサーバー</h1>

<p>まずはtelnetでアクセスするためのシンプルなWebサーバーを用意します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;socket&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 127.0.0.1(localhost)で8080ポートで立ち上げる</span>
</span><span class='line'><span class="n">socket</span> <span class="o">=</span> <span class="no">TCPServer</span><span class="o">.</span><span class="n">open</span> <span class="s1">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="mi">8080</span>
</span><span class='line'>
</span><span class='line'><span class="kp">loop</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">connection</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">accept</span>
</span><span class='line'>  <span class="n">connection</span><span class="o">.</span><span class="n">puts</span> <span class="s1">&#39;Hello Readers!&#39;</span>
</span><span class='line'>  <span class="n">connection</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>サーバーを起動し、ターミナルを立ち上げて、telnetでアクセスしてみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>telnet 127.0.0.1 <span class="nv">8080</span>
</span><span class='line'><span class="o">=</span>&gt; Hello Readers!
</span></code></pre></td></tr></table></div></figure>


<p>ただし、このままだとブラウザで<code>http://127.0.0.1:8080</code>にアクセスできません。<br/>
次はブラウザでアクセスできるように修正します。</p>

<h1>ブラウザでアクセスするWebサーバー</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;socket&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;time&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">socket</span> <span class="o">=</span> <span class="no">TCPServer</span><span class="o">.</span><span class="n">open</span> <span class="s1">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="mi">8080</span>
</span><span class='line'>
</span><span class='line'><span class="kp">loop</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">connection</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">accept</span>
</span><span class='line'>  <span class="c1"># response headerを設定</span>
</span><span class='line'>  <span class="n">connection</span><span class="o">.</span><span class="n">puts</span> <span class="o">[</span><span class="s1">&#39;HTTP/1.1 200 OK&#39;</span><span class="p">,</span>
</span><span class='line'>                   <span class="s2">&quot;Date: </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">httpdate</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>                   <span class="s1">&#39;Server: Ruby&#39;</span><span class="p">,</span>
</span><span class='line'>                   <span class="s1">&#39;Content-Type: text/html; charset=utf-8&#39;</span><span class="p">,</span>
</span><span class='line'>                   <span class="s2">&quot;Content-Length: </span><span class="si">#{</span><span class="n">response_body</span><span class="o">.</span><span class="n">length</span><span class="si">}</span><span class="se">\r\n\r\n</span><span class="s2">&quot;</span><span class="o">].</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\r\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># response bodyを設定</span>
</span><span class='line'>  <span class="n">connection</span><span class="o">.</span><span class="n">puts</span> <span class="s1">&#39;Hello Readers!&#39;</span>
</span><span class='line'>  <span class="n">connection</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>レスポンスのヘッダー情報を追加しました。<br/>
ヘッダーとボディは改行<code>\r\n</code>で区切ります。</p>

<p>これでブラウザでアクセスできるようになりました。</p>

<h1>forkしたProcessでリクエストを処理するWebサーバー</h1>

<p>続いては、アクセスを子プロセスで処理するように変更します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1">#!/usr/bin/env ruby                           </span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;socket&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;time&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">socket</span> <span class="o">=</span> <span class="no">TCPServer</span><span class="o">.</span><span class="n">open</span> <span class="s1">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="mi">8080</span>
</span><span class='line'>
</span><span class='line'><span class="n">worker_pid</span> <span class="o">=</span> <span class="nb">fork</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># 子プロセスで処理</span>
</span><span class='line'>  <span class="kp">loop</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">response_body</span> <span class="o">=</span> <span class="s1">&#39;Hello Browser!&#39;</span>
</span><span class='line'>    <span class="n">connection</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">accept</span>
</span><span class='line'>    <span class="n">connection</span><span class="o">.</span><span class="n">puts</span> <span class="o">[</span><span class="s1">&#39;HTTP/1.1 200 OK&#39;</span><span class="p">,</span>
</span><span class='line'>                   <span class="s2">&quot;Date: </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">httpdate</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>                   <span class="s1">&#39;Server: Ruby&#39;</span><span class="p">,</span>
</span><span class='line'>                   <span class="s1">&#39;Content-Type: text/html; charset=utf-8&#39;</span><span class="p">,</span>
</span><span class='line'>                   <span class="s2">&quot;Content-Length: </span><span class="si">#{</span><span class="n">response_body</span><span class="o">.</span><span class="n">length</span><span class="si">}</span><span class="se">\r\n\r\n</span><span class="s2">&quot;</span><span class="o">].</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\r\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">connection</span><span class="o">.</span><span class="n">puts</span> <span class="n">response_body</span>
</span><span class='line'>    <span class="n">connection</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Signalを受け取ったらprocessをkillする</span>
</span><span class='line'><span class="o">[</span><span class="ss">:INT</span><span class="p">,</span> <span class="ss">:QUIT</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">signal</span><span class="o">|</span>
</span><span class='line'>  <span class="no">Signal</span><span class="o">.</span><span class="n">trap</span><span class="p">(</span><span class="n">signal</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="no">Process</span><span class="o">.</span><span class="n">kill</span><span class="p">(</span><span class="n">signal</span><span class="p">,</span> <span class="n">worker_pid</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 親プロセスの処理を待ちにする</span>
</span><span class='line'><span class="no">Process</span><span class="o">.</span><span class="n">waitpid</span> <span class="n">worker_pid</span>
</span></code></pre></td></tr></table></div></figure>


<p>forkで子プロセスを生成し、リクエストを子プロセスで処理しています。<br/>
親プロセスは子プロセスが処理が完了するまでwaitします。<br/>
(子プロセスはloop処理を行っているため、シグナルを受け取るまでは生き続けます)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UnixのSocketをRubyで扱う]]></title>
    <link href="http://jangajan.com/blog/2014/09/04/unix-process-socket-in-ruby/"/>
    <updated>2014-09-04T03:20:37+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/04/unix-process-socket-in-ruby</id>
    <content type="html"><![CDATA[<p>積読消化シリーズです。<br/>
<a href="http://tatsu-zine.com/books/naruhounix">なるほどUnixプロセス ― Rubyで学ぶUnixの基礎</a><br/>
プロセス間通信を、昨日はpipe、今日はUnixソケットのところです。</p>

<!-- more -->


<h1>Rubyのプロセス間通信でメッセージ（データグラム）を使う</h1>

<p>データの通信にストリームではなく、メッセージ（データグラム）を利用したい場合、UNIXソケットを使います。</p>

<h2>メッセージ</h2>

<p>昨日の最後にも載せた記事に説明があります。<br/>
メッセージを利用する場合は、１通信が１メッセージとなるため、データのデリミタが不要です。<br/>
(close処理が不要になる)</p>

<p><a href="http://slashdot.jp/journal/160355/TCP%E3%81%A8UDP%E3%81%AE%E9%81%95%E3%81%84">gatekeeperの日記： TCPとUDPの違い</a></p>

<blockquote><p>ところがデータグラム型ではメッセージ単位なのでメッセージの境界が保存されていて、
読み込みと書き込みは常にペアでなければいけない。</p></blockquote>

<p>なお、パイプでは、メッセージは使えません。</p>

<h2>Unixソケット</h2>

<p>Unixソケットは、ソケットを利用したプロセス間通信の方法の一つです。<br/>
メッセージを利用するためにはパイプではなく、Unixソケットでないといけません。<br/>
pipeではできなかったデータの双方向の通信ができます。</p>

<h2>サンプル</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;socket&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># :DGRAMはメッセージ（データグラム）の利用を宣言</span>
</span><span class='line'><span class="n">child_socket</span><span class="p">,</span> <span class="n">parent_socket</span> <span class="o">=</span> <span class="no">Socket</span><span class="o">.</span><span class="n">pair</span><span class="p">(</span><span class="ss">:UNIX</span><span class="p">,</span> <span class="ss">:DGRAM</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="n">maxlen</span> <span class="o">=</span> <span class="mi">1000</span> <span class="c1"># メッセージのMaxサイズ</span>
</span><span class='line'><span class="nb">fork</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># 子プロセスで使用しないsocketを閉じる</span>
</span><span class='line'>  <span class="n">parent_socket</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>  <span class="c1"># 対となるSocketからのメッセージの通知を待つ</span>
</span><span class='line'>  <span class="n">instruction</span> <span class="o">=</span> <span class="n">child_socket</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="n">maxlen</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># 対となるSocketへメッセージ送信</span>
</span><span class='line'>  <span class="n">child_socket</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">instruction</span><span class="si">}</span><span class="s2"> accomplished!&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 親プロセスで使用しないsocketを閉じる</span>
</span><span class='line'><span class="n">child_socket</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'><span class="c1"># 対となるSocketへメッセージ送信</span>
</span><span class='line'><span class="n">parent_socket</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;Heavy lifting&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="c1"># 対となるSocketからのメッセージの通知を待って表示する</span>
</span><span class='line'><span class="vg">$stdout</span><span class="o">.</span><span class="n">puts</span> <span class="n">parent_socket</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="n">maxlen</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt;Parent_Socket accomplished!</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>child_socket</code>と<code>parent_socket</code>でそれぞれ、メッセージをやり取りしています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UnixのパイプをRubyで扱う]]></title>
    <link href="http://jangajan.com/blog/2014/09/03/unix-process-in-ruby/"/>
    <updated>2014-09-03T18:20:35+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/03/unix-process-in-ruby</id>
    <content type="html"><![CDATA[<p>積読消化シリーズです。<br/>
<a href="http://tatsu-zine.com/books/naruhounix">なるほどUnixプロセス ― Rubyで学ぶUnixの基礎</a><br/>
UnixでのパイプをRubyで表すとどうなるか。</p>

<!-- more -->


<h1>Rubyで扱うパイプ</h1>

<h2>パイプとは</h2>

<p>パイプとは、「単方向のデータの流れ」です。<br/>
パイプでは、２つのプロセス(A,B)で、ストリームを介して、一方通行に通信します。<br/>
(ストリームは最後の方に補足します。データを溜めておく場所のイメージ)</p>

<h2>単一プロセスでのパイプ</h2>

<p>一つのプロセスでの、パイプを表現すると以下の通りです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">p</span> <span class="no">IO</span><span class="o">.</span><span class="n">pipe</span> <span class="c1">#=&gt; [#&lt;IO:fd 7&gt;, #&lt;IO:fd 8&gt;]</span>
</span><span class='line'><span class="n">reader</span><span class="p">,</span> <span class="n">writer</span> <span class="o">=</span> <span class="no">IO</span><span class="o">.</span><span class="n">pipe</span>
</span><span class='line'><span class="c1"># reader =&gt; #&lt;IO:fd 7&gt;</span>
</span><span class='line'><span class="c1"># writer =&gt; #&lt;IO:fd 8&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;書き込みました。&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">reader</span><span class="o">.</span><span class="n">read</span> <span class="c1"># =&gt;書き込みました。</span>
</span></code></pre></td></tr></table></div></figure>


<p>reader(A)、writer(B)とした場合、<code>B =&gt; A</code>というデータの流れは可能ですが、<code>A =&gt; B</code>はできません。<br/>
<code>writer.write</code>でストリームに情報を書き込みます。<br/>
<code>reader.read</code>でストリームに書き込まれた情報を読み込みます。</p>

<h3>メモ</h3>

<ul>
<li><code>reader.read</code>の前に、<code>writer.close</code>をする

<ul>
<li><code>reader.read</code>は区切り文字が見つかるまでストリームを読み込み続けます</li>
<li><code>writer.close</code>することで、ストリームへの書き込みが終了させ、区切り文字を設定します</li>
</ul>
</li>
<li><code>writer.close</code>で閉じたストリームを更新することはできない</li>
</ul>


<h2>親子プロセスでのパイプ</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">reader</span><span class="p">,</span> <span class="n">writer</span> <span class="o">=</span> <span class="no">IO</span><span class="o">.</span><span class="n">pipe</span>
</span><span class='line'><span class="c1"># reader =&gt; #&lt;IO:fd 7&gt;</span>
</span><span class='line'><span class="c1"># writer =&gt; #&lt;IO:fd 8&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># forkにより子プロセスを生成</span>
</span><span class='line'><span class="nb">fork</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">reader</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>  <span class="mi">10</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">writer</span><span class="o">.</span><span class="n">write</span> <span class="s2">&quot;Another one bite the dust</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'><span class="nb">print</span> <span class="n">reader</span><span class="o">.</span><span class="n">read</span>
</span><span class='line'><span class="c1"># =&gt; Another one bite the dust</span>
</span><span class='line'><span class="c1"># Another one bite the dust</span>
</span><span class='line'><span class="c1"># Another one bite the dust</span>
</span><span class='line'><span class="c1"># Another one bite the dust</span>
</span><span class='line'><span class="c1"># Another one bite the dust</span>
</span><span class='line'><span class="c1"># Another one bite the dust</span>
</span><span class='line'><span class="c1"># Another one bite the dust</span>
</span><span class='line'><span class="c1"># Another one bite the dust</span>
</span><span class='line'><span class="c1"># Another one bite the dust</span>
</span><span class='line'><span class="c1"># Another one bite the dust</span>
</span></code></pre></td></tr></table></div></figure>


<p>親プロセス、子プロセスでは、それぞれ使用しないIOインスタンスをcloseしています。<br/>
これは、子プロセスが親のファイルディクリプタを複製して利用するためです。<br/>
ファイルディスクリプタというのは、ストリームの出入り口をイメージすると分かりやすいかもしれません。<br/>
writerやreaderでwrite/readするためのデータの取り出し口ですね。<br/>
* 親プロセスでは、write処理は行わないため、<code>writer.close</code>をします。<br/>
* forkした子プロセスでは、read処理は行わないため、<code>reader.close</code>をします。<br/>
これで、利用しないファイルディクリプタに影響を与えなくなります。</p>

<h3>親子プロセス両方でreader.close</h3>

<p>forkした子プロセスがwriteする前に、親プロセスで<code>reader.close</code>をすると、どうなるでしょうか。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">reader</span><span class="p">,</span> <span class="n">writer</span> <span class="o">=</span> <span class="no">IO</span><span class="o">.</span><span class="n">pipe</span>
</span><span class='line'>
</span><span class='line'><span class="nb">fork</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">reader</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>  <span class="mi">10</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">writer</span><span class="o">.</span><span class="n">write</span> <span class="s2">&quot;Another one bite the dust</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="c1"># =&gt; `write&#39;: Broken pipe (Errno::EPIPE)が発生</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">reader</span><span class="o">.</span><span class="n">close</span> <span class="c1"># この行を追加</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'><span class="nb">print</span> <span class="n">reader</span><span class="o">.</span><span class="n">read</span>
</span></code></pre></td></tr></table></div></figure>


<p>親子でreader.closeをすると、書き込んだ情報の出力先がなくなります。<br/>
そのため、子プロセスで書き込みをするとエラーが発生します。</p>

<h2>補足:ストリーム</h2>

<p>スラッシュドットの以下の記事がイメージしやすかったです。
<a href="http://slashdot.jp/journal/160355/TCP%E3%81%A8UDP%E3%81%AE%E9%81%95%E3%81%84">gatekeeperの日記： TCPとUDPの違い</a></p>

<blockquote><p>ストリーム型というのは１個のデーターをためておく場所（ストリーム）があって、
ストリームの性質としては最初に入れたデーターが最初に出てくる。（要はFIFOだな）
&hellip;
それがどういうことになるかというと、ストリーム型では何回かに分けて書き込んだデーターを一気に読み込んだり、
一気に読み込んだり、 逆に一度に書き込んだデーターを細切れで読み出したりできる。
つまり、読み書きの境界はストリームに入った時点で保存されない。</p></blockquote>

<p>ストリームはデータを溜めておく場所で、明示的に終了したよって宣言しないと、データの区切りが分からないものなんですね。<br/>
<code>close</code>することで、データの境界を設定します。<br/>
それまでは好きなだけ<code>write</code>でデータを溜め込みます。<br/>
しかし、<code>read</code>するためには、<code>close</code>でデータの区切りを宣言しないといけません。<br/>
宣言しない限り<code>read</code>でのデータの読み込み処理は完了しないんですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hubotでデータを保存する]]></title>
    <link href="http://jangajan.com/blog/2014/09/02/hubot-brain-sample/"/>
    <updated>2014-09-02T20:38:53+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/02/hubot-brain-sample</id>
    <content type="html"><![CDATA[<p>hubotでデータを永続的に保存するためにはredisとの連携が必要です。</p>

<!-- more -->


<h1>使い方</h1>

<p>redisとセットで使うので、redisを起動しておくことを忘れずに。<br/>
herokuで使いたい場合は、addonが必要になります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">module.exports = </span><span class="nf">(robot) -&gt;</span>
</span><span class='line'>  <span class="nx">robot</span><span class="p">.</span><span class="nx">hear</span> <span class="sr">/janga/i</span><span class="p">,</span> <span class="nf">(msg) -&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># データ取得</span>
</span><span class='line'>  <span class="nv">jangajan = </span><span class="nx">robot</span><span class="p">.</span><span class="nx">brain</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;janga&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># データ更新</span>
</span><span class='line'>  <span class="nx">robot</span><span class="p">.</span><span class="nx">brain</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s">&#39;janga&#39;</span><span class="p">,</span> <span class="nx">jangajan</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># データ保存 - redis起動してないと保存できない</span>
</span><span class='line'>  <span class="nx">robot</span><span class="p">.</span><span class="nx">brain</span><span class="p">.</span><span class="nx">save</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># データの保存場所</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">robot</span><span class="p">.</span><span class="nx">brain</span><span class="p">[</span><span class="s">&#39;data&#39;</span><span class="p">]</span>
</span><span class='line'>  <span class="c1"># =&gt; { users: { &#39;1&#39;: { id: &#39;1&#39;, name: &#39;Shell&#39;, room: &#39;Shell&#39; } },</span>
</span><span class='line'>  <span class="c1">#     _private: { janga: [ [Object] ] } }</span>
</span></code></pre></td></tr></table></div></figure>


<p>実際には<code>_private</code>というキーの値として保存されています。<br/>
あまりよくはないけれど、<code>robot.brain['data']['_pravate']['janga']</code>で取得することもできます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAPC::Asia 2014参加レポ]]></title>
    <link href="http://jangajan.com/blog/2014/09/01/yapc-asia-2014/"/>
    <updated>2014-09-01T00:00:00+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/01/yapc-asia-2014</id>
    <content type="html"><![CDATA[<h1>感想</h1>

<p>前置きですが、初参加です。Perl書けません。<br/>
ただ前から興味があったので最終出社日を一日前倒して、8/29、30の2日間YAPC::Asia 2014に行ってきました。</p>

<!-- more -->


<p>一人で行ったので始終気ままにプラプラしてました。意外と一人で来ている人は多かった様子です。<br/>
面白かったのは、会場内でセッション聞かずにPCと向き合ってる人の多いこと。特に二日目。<br/>
ランチは無料の行けないだろうなと思ったけど、当然間に合いませんでしたね。<br/>
けれど、日吉に飯を食べるところが結構あったのは東横線ユーザーとしては嬉しい発見でした！<br/>
ラーメン屋多いし。<br/>
1日目の終わりに武蔵食べたら、家系そんな好きじゃなかったはずなのに今食べたくしょうがない。<br/>
ラーメンの話じゃなくてYAPCですね。<br/>
Perlは書けないのですが、実際に聞いたトークセッションではあんまりPerlと絡んでなくて。<br/>
というかPerlの話ない(ちょこっとだけ触れます)けどってのをネタにしていたりもして。<br/>
Perlのカンファレンスという雰囲気があんまりしない。それでいて押し付けがましくなくて、Perl知らなくても勉強になることも多かったです。<br/>
Yet Another Perl Conferenceという名前って素晴らしいですね。<br/>
この懐の広さのおかげで二日間とも楽しく過ごせました。<br/>
(ただし、オープンソースの開発現場を聞いた限りでは、Perlの中の現実は厳しい)</p>

<h2>ライブコーディング</h2>

<p>一日目「コマンドラインツールについて語るときに僕の語ること」の後に途中から観戦。<br/>
作成しているのはTwitterへ投稿するWebアプリ。<br/>
書きながらソースコードについてコメントしたり、トラブル起こったら即座に原因特定して対応してと、もうすごいのなんの。魅入ってました。観客の人も書いてるソースにさらっとそこ違うよってコメントしてたりして。結局完成したのは終了予定のギリギリ２分前！<br/>
時間決めてのライブコーディングってすごく面白いですね。</p>

<h2>Perlあるある</h2>

<p>Perlハッカーの人達へのインタビュー形式のトークショー。エンジニアあるあるでした。<br/>
入場の時にもらったRedbull飲んだら、途中で腹痛くなってトイレ駆け込んで戻ってみたら入場規制かかって泣く泣くGithubの人の発表へ&hellip;そっちはそっちで非常に勉強になりました。<br/>
ちなみに、&#8221;大切にしている 意識している言葉&#8221;というのはどれも名言です。</p>

<h2>Keynote</h2>

<p>Typesterさんの生き方についての話。転職活動中の自分には胸に刺さるセッションでした。
Perlコミュニティとの出会い、miyagawaさんやAudrey TangといったPerlハッカーとの出会いを通じて、Perlやその文化に心酔していくことで、エンジニアとして成長することの楽しさ（あるいは喜び？）とはどんなものだったかを伝えてくれました。コミュニティの偉大さを感じます。<br/>
また、自分の中での、趣味・仕事の定義を見直す転機により、これからの人生でしたいこと、どうありたいかという思考を進めた結果、起業に至った経緯を教えてくれました。<br/>
エンジニアというのはつまるところ自分主義なところはあると思いますが、</p>

<ul>
<li>自分が使いたいから作る

<ul>
<li>エンジニアにとっての一番のモチベーション</li>
</ul>
</li>
<li>自分が困ってることは実は他の人も困っていることが多い

<ul>
<li>世の中を良くする</li>
</ul>
</li>
</ul>


<p>&ldquo;エンジニアを育てる&#8221;ことが&#8221;世の中を良くする&#8221;ことに繋がるというのは素晴らしい考えだと思います。<br/>
もう一つ仕事の仕方として示した&#8221;自分のため&#8221;と&#8221;他人のため&#8221;の割合半分に保つことでバランスが取れるという話も非常に興味深い内容でした。<br/>
今後のエンジニアの生き方、キャリアプランに大きな指針を指針を与えてくれたKeynoteでした。</p>

<h1>見たセッションのコメント</h1>

<p>知り合いがいなくて、一人で黙々と見ていたのでかなり数があります&hellip;(次行く時までに知り合いを増やしたい)<br/>
ので、ざっくりとセッションを聞いて思ったことを書き連ねました。<br/>
どれもこれもためになる話しばかりでした</p>

<h2>8/29</h2>

<p>初参加の緊張の上に寝坊して日吉キャンパス内で迷って最初のセッションちゃんと見れなかった&hellip;</p>

<ul>
<li>JSON SchemaでAPIの単体結合テストがどこまでできるかという話

<ul>
<li>APIテストで全てがカバーできるわけではない</li>
<li>けれど、おかけでドメイン知識が必要なテストに注力することができる</li>
</ul>
</li>
<li>Perl::Lintの話

<ul>
<li>ポリシーの実装厳しい&hellip;eachの苦手なところ知れた</li>
<li>ちょっと遅い、という感覚を大切にしよう</li>
</ul>
</li>
<li>gitを使ったツールを開発の話

<ul>
<li>GHQを作った人（いつもお世話になっています）ということで吃驚</li>
<li>コマンドを作る時に、仮定、引数の解釈、引数パターンの考慮という考え方</li>
</ul>
</li>
<li>コマンドラインツールについて語るときに僕の語ること

<ul>
<li>ちょうど2週間ぐらい前に「UNIXという考え方」という本を読んでいたので、その先の考え方が勉強になった</li>
<li>DDDします</li>
</ul>
</li>
<li>ウェッブエンジニアのローレベルプログラミング

<ul>
<li>つまりアセンブリは怖くない</li>
<li>仕組みを知るモチベーションのエモい話</li>
</ul>
</li>
<li>How&rsquo;s startup life? - working as CTO in Japan

<ul>
<li>箇条書きにできないけれど、次の職場を探しているところなので、ベンチャーにジョインするに至った考え方や、身につけておくべきこと、モチベーションについて本当に参考になった</li>
</ul>
</li>
<li>開発合宿

<ul>
<li>楽しそう。</li>
<li>絶対やる。それもなるべく早くやる</li>
</ul>
</li>
</ul>


<p>そもそもPerlとは全然接点がなかったのでアウェイでしたが、偶然にも@akinomaeniさんがスタッフとして参加していたことにホッとしました。会場内唯一の知り合い。<br/>
YAPCラーメンチャレンジのせいで、（回ってきてもいないのに）一日目終了後、武藏に行ってしまった。<br/>
また日吉にラーメンを食べにいこう。</p>

<h2>8/30</h2>

<ul>
<li>オープンソースの開発現場

<ul>
<li>会社で働いていても同じだけれど、組織で上に立つためには政治力、組織で生き残るには人間力だと思ってます</li>
<li>メールにしてもソース書き直しにしても怖い話</li>
</ul>
</li>
<li>Google BigQueryでDWH構築

<ul>
<li>googleさんの右に出るものなし</li>
<li>内容もさることながらプレゼンの仕方が非常に勉強になった</li>
<li>ディレクターは意外とSQLかける->BIいらなくない？という知見</li>
</ul>
</li>
<li>JSON SQLインジェクション脆弱性と、そこから学ぶセキュアプログラミングの原則

<ul>
<li>使い方に応じたメソッドを、アプリとライブラリのIFとして挟み込むというやり方</li>
<li>異常系には弱くなりがち</li>
</ul>
</li>
<li>ほんとにあったスキーマの話「ソーシャルゲーム」

<ul>
<li>キャッシュや影響範囲限定のため、あえてそんなに正規化しすぎない</li>
<li>状況に寄ってはidを使わないというのもあり</li>
</ul>
</li>
<li>モバイルアプリとAPIのありかたを考える2014

<ul>
<li>システムとしてはこう使うのが正しい〜という考えはやめましょう</li>
<li>JSON-RPC 2.0良さそう。JSON解析用の中継サーバーでリクエストをコントロール</li>
</ul>
</li>
<li>Changing the tires on a moving car: a case study in upgrading legacy architecture

<ul>
<li>githubの人がgitのライブラリ作り直してたりしたのか&hellip;</li>
<li>Long Tailでのライブラリの移行方法が勉強になった</li>
</ul>
</li>
<li>Mobile Application Development for Perl Mongers

<ul>
<li>2スピーカートークショー、多岐に渡る上に思うこと多いし内容濃くてちょっと簡単にはまとめきれないので省略</li>
<li>リアクティブプログラム、MVVMという考え方に期待</li>
<li>ボトルネックを解消するために作業を振るのは大事</li>
<li>OSバージョンアップはOSS貢献のチャンス</li>
<li>モバイルの環境整備はまだ始まったばかり</li>
</ul>
</li>
<li>趣味開発のためのクラウド/VPS活用術

<ul>
<li>vultr良さそう</li>
<li>動画とかはさくらVPS</li>
</ul>
</li>
</ul>


<p>二日目は夜に同期との送別会があったため、KeyNoteまで見ておしまい。<br/>
トーク賞を受賞された方々おめでとうございます。</p>

<h2>補足</h2>

<p>こちらもあわせて</p>

<p><a href="http://qiita.com/ktsujichan/items/b42b5346d1d4704425ef">http://qiita.com/ktsujichan/items/b42b5346d1d4704425ef</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsでソーシャルログインボタン(Github)]]></title>
    <link href="http://jangajan.com/blog/2014/08/21/github-login-bottun/"/>
    <updated>2014-08-21T00:00:00+09:00</updated>
    <id>http://jangajan.com/blog/2014/08/21/github-login-bottun</id>
    <content type="html"><![CDATA[<p>RailsでGithub、twitter、facebookといったソーシャルのoauthログインボタンを出したい人向けです。</p>

<p>Githubのomniauth連携をした時に、専用のログインボタンを簡単に用意できないか探してみたところ、いい感じのGemがありました。</p>

<!-- more -->


<p>さて、今回使用するのは<a href="https://github.com/jeffleeismyhero/Zocial-Rails">こちら</a></p>

<h1>使い方</h1>

<h2>インストール</h2>

<p>Gemfileに書いて、bundle installします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;zocial-rails&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>導入</h2>

<p>application.cssに以下を記述します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">*=</span> <span class="nt">require</span> <span class="nt">zocial</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ボタン</h2>

<p>elementのclassに、&#8217;zocial&#8217;と利用したいサービス(例では&#8217;github&#8217;)を記述します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;zocial github&quot;</span> <span class="na">href=</span><span class="s">&quot;/auth/github&quot;</span><span class="nt">&gt;</span>Sign in with Github<span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちなみに、hamlの場合はこちら。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="p">=</span> <span class="n">link_to</span><span class="p">(</span><span class="s1">&#39;Sign in with Github&#39;</span><span class="p">,</span> <span class="s1">&#39;/auth/github&#39;</span><span class="p">,</span>  <span class="ss">:class</span><span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;zocial&#39;</span><span class="p">,</span> <span class="s1">&#39;github&#39;</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github APIを使いやすくするoctokitを触ってみる]]></title>
    <link href="http://jangajan.com/blog/2014/08/18/use-octokit/"/>
    <updated>2014-08-18T00:00:00+09:00</updated>
    <id>http://jangajan.com/blog/2014/08/18/use-octokit</id>
    <content type="html"><![CDATA[<p>GithubのAPIを使いやすくしてくれるoctokitに触ってみました。試すのはcontributorsの一覧の取得です。</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;octokit&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;octokit&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="no">Octokit</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span> <span class="ss">access_token</span><span class="p">:</span> <span class="s1">&#39;xxx&#39;</span>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="n">contributors_stats</span><span class="p">(</span><span class="s1">&#39;rails/rails&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">sort</span><span class="p">{</span><span class="o">|</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">|</span> <span class="n">b</span><span class="o">[</span><span class="ss">:total</span><span class="o">]</span> <span class="o">&lt;=&gt;</span> <span class="n">a</span><span class="o">[</span><span class="ss">:total</span><span class="o">]</span><span class="p">}</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">member</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">p</span> <span class="n">member</span><span class="o">[</span><span class="ss">:author</span><span class="o">][</span><span class="ss">:login</span><span class="o">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>access_tokenを利用した方式で試していますが、LOGIN IDとパスワードにも対応しています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RailsアプリケーションでGithub連携]]></title>
    <link href="http://jangajan.com/blog/2014/08/16/rails-omniauth-github/"/>
    <updated>2014-08-16T00:00:00+09:00</updated>
    <id>http://jangajan.com/blog/2014/08/16/rails-omniauth-github</id>
    <content type="html"><![CDATA[<p>Railsアプリケーションにomuniauth-githubを利用したGithubログイン連携機能を追加する方法を調査しました。
作業の概要は↓の通りです。</p>

<ol>
<li>Githubで連携キーの発行</li>
<li>連携キーの環境変数設定</li>
<li>Railsアプリケーションの作成</li>
<li>ログインに使用するModel、Controllerの生成</li>
<li>ホーム画面にGithubログインのリンクを作る</li>
</ol>


<p>それでは始めます。</p>

<!-- more -->


<h1>Github連携準備(&ldquo;Client ID&rdquo; &amp; &ldquo;Client Secret&#8221;作成)</h1>

<p>まず、連携に必要な情報を取得します。</p>

<h2>Githubのアプリケーション登録</h2>

<p>Githubの設定画面 -> Application -> Developer applications の Register new applicationボタンをクリック。<br/>
次の情報を環境に合わせて設定してください。設定したらRegister Applicationボタンを押すのを忘れずに。</p>

<ul>
<li>Application name

<ul>
<li>sample</li>
</ul>
</li>
<li>Authorization callback URL

<ul>
<li><a href="http://localhost:3000/">http://localhost:3000/</a></li>
</ul>
</li>
<li>Application description

<ul>
<li>アプリの説明</li>
</ul>
</li>
<li>Authorization callback URL

<ul>
<li><a href="http://localhost:3000/auth/github/callback">http://localhost:3000/auth/github/callback</a></li>
<li>ここ大事。config/routes.rbに設定するcallbackメソッドのURLを記載</li>
</ul>
</li>
</ul>


<h2>連携キーを環境変数に設定</h2>

<p>今回は、連携情報を環境変数から取得してGithubログインを実現します。<br/>
上の手順で取得したClient IDとClient Secretを、以下コマンドで環境変数に設定してください。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">export </span><span class="nv">GITHUB_KEY</span><span class="o">=</span><span class="c">#{GithubのClient ID}</span>
</span><span class='line'><span class="nb">export </span><span class="nv">GITHUB_SECRET</span><span class="o">=</span><span class="c">#{GithubのClient Secret}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>サンプルアプリケーション作成</h1>

<h2>Railsアプリケーション作成</h2>

<p>タイトル通りです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>bundle <span class="nb">exec </span>rails new SampleApp<span class="p">;</span><span class="nb">cd </span>SampleApp
</span><span class='line'>bundle install --path vendor/bundle
</span></code></pre></td></tr></table></div></figure>


<h2>add Gem for omniauth-github</h2>

<p>次に、Githubログイン連携に必要なGemをインストールします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;omniauth&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;omniauth-github&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>bundle install --path vendor/bundle
</span></code></pre></td></tr></table></div></figure>


<h2>initializer for omniauth</h2>

<p>環境変数から連携情報を取得する処理を記載します。
アプリ起動時に読み込むようにするため、config/initializersディレクトリ配下に作成します。</p>

<ul>
<li>新規

<ul>
<li>config/initializers/omniauth.rb</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">middleware</span><span class="o">.</span><span class="n">use</span> <span class="no">OmniAuth</span><span class="o">::</span><span class="no">Builder</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">provider</span> <span class="ss">:github</span><span class="p">,</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;GITHUB_KEY&#39;</span><span class="o">]</span><span class="p">,</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;GITHUB_SECRET&#39;</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>create user model</h2>

<p>Githubログインで登録するユーザー情報のModelです。providerとuidは多分必須です。
まずはrailsコマンドからModelを生成します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>bundle <span class="nb">exec </span>rails g model user provider:string uid:string name:string
</span></code></pre></td></tr></table></div></figure>


<p>次に、連携時に取得したデータから必要な項目をModelに設定します。</p>

<ul>
<li>編集

<ul>
<li>app/models/user.rb</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">create_with_omniauth</span><span class="p">(</span><span class="n">auth</span><span class="p">)</span>
</span><span class='line'>      <span class="n">create!</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
</span><span class='line'>          <span class="n">user</span><span class="o">.</span><span class="n">provider</span> <span class="o">=</span> <span class="n">auth</span><span class="o">[</span><span class="s2">&quot;provider&quot;</span><span class="o">]</span>
</span><span class='line'>          <span class="n">user</span><span class="o">.</span><span class="n">uid</span>      <span class="o">=</span> <span class="n">auth</span><span class="o">[</span><span class="s2">&quot;uid&quot;</span><span class="o">]</span>
</span><span class='line'>          <span class="n">user</span><span class="o">.</span><span class="n">name</span>     <span class="o">=</span> <span class="n">auth</span><span class="o">[</span><span class="s2">&quot;info&quot;</span><span class="o">][</span><span class="s2">&quot;nickname&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>create session controller</h2>

<p>Modelができたので、次は連携処理に使うControllerの作成です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>bundle <span class="nb">exec </span>rails g controller sessions
</span></code></pre></td></tr></table></div></figure>


<p>追加するのは、Github連携後のcallback処理と、ログアウト時にSessionを破棄する処理です。</p>

<ul>
<li>編集

<ul>
<li>app/controllers/sessions_controller.rb</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="k">class</span> <span class="nc">SessionsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">callback</span>
</span><span class='line'>      <span class="n">auth</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">env</span><span class="o">[</span><span class="s1">&#39;omniauth.auth&#39;</span><span class="o">]</span>
</span><span class='line'>      <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by_provider_and_uid</span><span class="p">(</span><span class="n">auth</span><span class="o">[</span><span class="s2">&quot;provider&quot;</span><span class="o">]</span><span class="p">,</span> <span class="n">auth</span><span class="o">[</span><span class="s2">&quot;uid&quot;</span><span class="o">]</span><span class="p">)</span> <span class="o">||</span> <span class="no">User</span><span class="o">.</span><span class="n">create_with_omniauth</span><span class="p">(</span><span class="n">auth</span><span class="p">)</span>
</span><span class='line'>      <span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">root_path</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">destroy</span>
</span><span class='line'>      <span class="n">reset_session</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">root_path</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>それからルーティング設定を追加します。</p>

<ul>
<li>編集

<ul>
<li>config/routes.rb</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">get</span> <span class="s2">&quot;/auth/:provider/callback&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;sessions#callback&quot;</span>
</span><span class='line'>  <span class="n">get</span> <span class="s2">&quot;/signout&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;sessions#destroy&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>login helper method</h2>

<p>ログイン状態の判定に利用するヘルパーメソッドを追加します。</p>

<ul>
<li>編集

<ul>
<li>app/controllers/application_controller.rb</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">helper_method</span> <span class="ss">:current_user</span>
</span><span class='line'>
</span><span class='line'><span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">current_user</span>
</span><span class='line'>      <span class="vi">@current_user</span> <span class="o">||=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span><span class="p">)</span> <span class="k">if</span> <span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>create home view</h2>

<p>最後に連携用のリンクをテストする画面を用意します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>bundle <span class="nb">exec </span>rails g controller home index
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>編集

<ul>
<li>config/routes.rb</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">get</span> <span class="s1">&#39;home/index&#39;</span>
</span><span class='line'>  <span class="n">root</span> <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;home#index&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ヘルパーメソッドを利用して、ログインリンクと、ログアウトリンクの出し分けを行います。</p>

<ul>
<li>編集

<ul>
<li>app/views/home/index.html.erb</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">current_user</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Sign out&quot;</span><span class="p">,</span> <span class="s2">&quot;/signout&quot;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">else</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Sign in with GitHub&quot;</span><span class="p">,</span> <span class="s2">&quot;/auth/github&quot;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
