<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[JanGaJan.com]]></title>
  <link href="http://jangajan.com/atom.xml" rel="self"/>
  <link href="http://jangajan.com/"/>
  <updated>2014-10-15T14:43:45+09:00</updated>
  <id>http://jangajan.com/</id>
  <author>
    <name><![CDATA[talkto_me]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rspecメモ]]></title>
    <link href="http://jangajan.com/blog/2014/10/14/rspec-memo/"/>
    <updated>2014-10-14T18:00:00+09:00</updated>
    <id>http://jangajan.com/blog/2014/10/14/rspec-memo</id>
    <content type="html"><![CDATA[<p>rspecの学習中です。</p>

<!-- more -->


<h1>rspecのワークショップ</h1>

<p>以下のチュートリアルでrspecの学習をした時のメモです。</p>

<p><a href="http://d.hatena.ne.jp/t-wada/20100228/p1">http://d.hatena.ne.jp/t-wada/20100228/p1</a>  <br/>
<a href="http://qiita.com/jnchito/items/624f6d5023c279046a1c">http://qiita.com/jnchito/items/624f6d5023c279046a1c</a></p>

<h1>describeとcontextとit</h1>

<ul>
<li><code>describe</code>は対象を説明</li>
<li><code>context</code>は状況を説明</li>
<li><code>it</code>は試験内容を説明</li>
<li><code>it</code>内に具体的な試験を記述</li>
<li><code>it</code>の引数の説明を省略しても試験内容をrspecが判断して仕様記述を組み立てる</li>
<li>読みやすさ次第で<code>it</code>の文字列引数を使うことを推奨</li>
<li>内容を確認したい時は、<code>rspec -fd specfile</code></li>
</ul>


<h1>beforeにテスト実行前処理を記述</h1>

<ul>
<li><code>before</code>の引数のデフォルトは<code>:each</code></li>
</ul>


<h1>subjectでブロックの評価結果がit内のshouldのレシーバになる</h1>

<ul>
<li>明示的に<code>it</code>内で<code>subject</code>メソッドを利用することで、<code>subject</code>ブロックの評価結果を使うことができる</li>
</ul>


<h1><code>shared_examples</code>と<code>it_behaves_like</code></h1>

<ul>
<li><code>shared_examples_for 'キー名' do ~ end</code>とするとブロック内の処理を<code>it_should_behave_like 'キー名'</code>で呼び出してテストできる</li>
<li>ただし、キー名は全てのテストで重複しないように注意する</li>
</ul>


<h1>predicateマッチャ</h1>

<ul>
<li><code>expect(xxx).to eq false -&gt; expect(xxx).not_to be_empty</code></li>
</ul>


<h1>rspec3で標準から外れた機能</h1>

<ul>
<li><code>its</code>メソッドは<code>rspec-its gem</code>で提供</li>
<li>have マッチャ

<ul>
<li>サイズのチェックをテストしやすくするマッチャ(ただし、rspec3ではgemに外出しされた)</li>
<li>have マッチャを使った場合、 <code>have(n).item</code> と <code>have(n).items</code> は互いに置換可能

<ul>
<li>nの値により自然な形にするのがいい</li>
</ul>
</li>
<li>have(n).named_collection記法でもかける

<ul>
<li><code>it {is_expected.to have(n).xxx }</code></li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Factorygirlの読み込みでエラー]]></title>
    <link href="http://jangajan.com/blog/2014/10/08/require-rspec/"/>
    <updated>2014-10-08T14:19:07+09:00</updated>
    <id>http://jangajan.com/blog/2014/10/08/require-rspec</id>
    <content type="html"><![CDATA[<p>パーフェクトRuby on Rails の7章のFactoryGirlを省略するところ(リスト7.12)で<code>uninitialized constant FactoryGirl (NameError)</code>が発生しました。</p>

<!-- more -->


<p><code>factory_girl_rails</code>を読み込んであげればおーけーです。</p>

<figure class='code'><figcaption><span>spec/spec_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;factory_girl_rails&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">include</span> <span class="no">FactoryGirl</span><span class="o">::</span><span class="no">Syntax</span><span class="o">::</span><span class="no">Methods</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TodoGrowというアプリを作りました]]></title>
    <link href="http://jangajan.com/blog/2014/10/06/todogrow/"/>
    <updated>2014-10-06T20:35:42+09:00</updated>
    <id>http://jangajan.com/blog/2014/10/06/todogrow</id>
    <content type="html"><![CDATA[<p><a href="http://todogrow.herokuapp.com/">TodoGrow</a>というアプリを作りました。</p>

<!-- more -->


<p>パーフェクトRuby on Railsの内容を実践してみようと思い、Todoアプリを作りました。<br/>
個人でアプリを作っておくと何かと便利そうだったので。</p>

<p>bootstrapを利用しているので、スマホでアクセスしても使えます。<br/>
(若干日付入力のところでもたつくかも)</p>

<h1>TodoGrow</h1>

<p>トドが育つ、という意味で名付けました。<br/>
トドというのは、これ以上成長しないボラの最終形態のことですね。<br/>
Todoアプリは世の中に山ほどありふれていて成熟している領域の一つです。<br/>
成熟状態とトドをかけて、まだまだ成長できるんじゃない？という意味合いを込めました。</p>

<p>使いどころとしては、</p>

<ul>
<li>タスクが１列、期限順に並んでいる

<ul>
<li>人が一度にできるのは一つだけ</li>
<li>期限未設定が先頭になるのは、期限決めなきゃ行けないから</li>
</ul>
</li>
<li>期限が近づいてきたらタイトルの色を変える</li>
<li>Googleカレンダーに保存ボタン設置</li>
</ul>


<p>個人で試しに使うぐらいのアプリなので、自分が使いたいなって思う機能だけです。</p>

<h1>開発期間</h1>

<p>開発期間は大体9日、残り2日でherokuへのアップで大体2週間ぐらいでしょうか。<br/>
(環境でハマってました&hellip;)</p>

<h1>今後の展望etc</h1>

<p>入力がタスク名と期限だけだったり、タグが削除できない、名称変更できない等、まだ機能的に至らないところもあったり、見た目が貧相だったり、作るだけ作ったのでテスト１行もないとか問題山積みですが、使用感などフィードバックをいただけると嬉しいです。<br/>
今後はWebと連携したモバイル用のアプリも作ってiPhoneでも使えるようにしてみようと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RailsでBowerを使いHerokuにデプロイ]]></title>
    <link href="http://jangajan.com/blog/2014/10/05/bower-and-rails-on-heroku/"/>
    <updated>2014-10-05T22:35:42+09:00</updated>
    <id>http://jangajan.com/blog/2014/10/05/bower-and-rails-on-heroku</id>
    <content type="html"><![CDATA[<p>RailsアプリケーションでJavascriptプラグインの管理をgemに依存したくないなと思ったので、bowerなるものを試してみました。</p>

<p>環境です。</p>

<ul>
<li>bower 1.3.12</li>
<li>rails 4.1.6</li>
<li>ruby 2.1.2</li>
<li>heroku-buildpack-ruby-bower</li>
</ul>


<p>今回は使いませんでしたが、bower-railsというgemの説明も最後に追記しています。</p>

<!-- more -->


<h1>Rails + bower + heroku + heroku-buildpack-ruby-bower</h1>

<p>参考にしたのは<a href="https://gist.github.com/afeld/5704079">こちら</a>です。</p>

<h2>herokuに設定追加</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>heroku create app_name
</span><span class='line'>
</span><span class='line'>bundle exec rake secret RAILS_ENV=production
</span><span class='line'>=&gt; 2d9dc90XXXXXXXXXXXXX...
</span><span class='line'>
</span><span class='line'># rake secretの結果を値として設定
</span><span class='line'>heroku config:add SECRET_KEY_BASE=2d9dc90XXXXXXXXXXXXX...
</span><span class='line'>
</span><span class='line'>heroku run bundle exec rake RAILS_ENV=production db:migrate
</span><span class='line'>
</span><span class='line'>heroku config:set BUILDPACK_URL='git://github.com/qnyp/heroku-buildpack-ruby-bower.git#run-bower' </span></code></pre></td></tr></table></div></figure>


<h2>.gitignore修正</h2>

<p>bowerでコンポーネントをインストールするパスを管理対象外に設定しておきます。</p>

<figure class='code'><figcaption><span>.gitignore</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="sr">/vendor/</span><span class="n">assets</span><span class="o">/</span><span class="n">components</span>
</span></code></pre></td></tr></table></div></figure>


<h2>bowerでコンポーネント追加</h2>

<p>npmでbowerをインストールします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>npm install bower
</span></code></pre></td></tr></table></div></figure>


<p>続いてRailsアプリケーションのルートパスでbowerの設定を追加します。</p>

<figure class='code'><figcaption><span>.bowerrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;directory&quot;</span><span class="p">:</span> <span class="s2">&quot;vendor/assets/components&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;json&quot;</span><span class="p">:</span> <span class="s2">&quot;bower.json&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>bower.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;my application&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;dependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;moment&quot;</span><span class="p">:</span> <span class="s2">&quot;latest&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>依存関係のあるコンポーネントをインストールします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>bower install
</span></code></pre></td></tr></table></div></figure>


<h2>Railsの設定</h2>

<p>お好みでGemファイル追加(このあたりはbowerと関係ないですね)</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># このあたりはお好みで</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;unicorn&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 4.8.3&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;pg&#39;</span><span class="p">,</span> <span class="ss">group</span><span class="p">:</span> <span class="ss">:production</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rails_12factor&#39;</span><span class="p">,</span> <span class="ss">group</span><span class="p">:</span> <span class="ss">:production</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Procfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="ss">web</span><span class="p">:</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">unicorn</span> <span class="o">-</span><span class="nb">p</span> <span class="vg">$PORT</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>config/environments/production.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">compile</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>bowerでインストールしたコンポーネントをassetsのパスに追加します。</p>

<figure class='code'><figcaption><span>config/initializers/assets.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">paths</span> <span class="o">&lt;&lt;</span> <span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;vendor&#39;</span><span class="p">,</span> <span class="s1">&#39;assets&#39;</span><span class="p">,</span> <span class="s1">&#39;components&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>コンポーネントの読み込み設定</h2>

<figure class='code'><figcaption><span>app/assets/javascript/application.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="c1">//= require moment/moment</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<h2>公開設定</h2>

<p>最後に修正をherokuにpushします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git add .
</span><span class='line'>git commit
</span><span class='line'>git push heroku master
</span></code></pre></td></tr></table></div></figure>


<h1>bower-rails</h1>

<p><code>bower-rails</code>というgemがあったのですが、herokuへのデプロイのところで色々はまったので、今回は見送りました。<br/>
ローカルで試す分にはこのGemは非常に使いやすかったので、環境によっては導入すると良さそうです。</p>

<p>こちらの基本的な使い方は以下です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Bowerfile作成</span>
</span><span class='line'><span class="c"># rails g bower_rails:initialize json とすることで、bower.jsonを作成することも可能</span>
</span><span class='line'>bundle <span class="nb">exec </span>rails g bower_rails:initialize
</span><span class='line'><span class="o">=</span>&gt; アプリケーションルートに、Bowerfileが作成される
</span><span class='line'>
</span><span class='line'><span class="c"># Bowerfileの編集</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;asset &#39;moment&#39;&quot;</span> &gt;&gt; Bowerjson
</span><span class='line'>
</span><span class='line'><span class="c"># 依存関係の解決</span>
</span><span class='line'>bundle <span class="nb">exec </span>rake bower:install
</span><span class='line'><span class="o">=</span>&gt; vnedor/assets/bower_componentsにコンポーネントをインストール
</span></code></pre></td></tr></table></div></figure>


<p>上記に加え、<code>config/initializers/assets.rb</code>を修正することで利用できます。</p>

<figure class='code'><figcaption><span>config/initializers/assets.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">paths</span> <span class="o">&lt;&lt;</span> <span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;vendor&#39;</span><span class="p">,</span> <span class="s1">&#39;assets&#39;</span><span class="p">,</span> <span class="s1">&#39;bower_components&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>BowerfileがGemfileのように簡単な形式で書けて、bower.jsonを動的に生成してくれるので、使いやすいですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails4.1でherokuへのデプロイに失敗(Missing `secret_key_base`)]]></title>
    <link href="http://jangajan.com/blog/2014/10/05/secrets-dot-yml-on-heroku-in-rails4-dot-1/"/>
    <updated>2014-10-05T01:14:13+09:00</updated>
    <id>http://jangajan.com/blog/2014/10/05/secrets-dot-yml-on-heroku-in-rails4-dot-1</id>
    <content type="html"><![CDATA[<p>Rails4.1でherokuへのデプロイに失敗(Missing <code>secret_key_base</code>)</p>

<p>Rails4.1から<code>secrets.yml</code>がサポートされました。<br/>
これの扱いが良くわかっていなかったため、heroku push後、以下のエラーが発生してアプリ起動に失敗しました。</p>

<blockquote><p>app error: Missing <code>secret_key_base</code> for &lsquo;production&rsquo; environment, set this value in <code>config/secrets.yml</code> (RuntimeError)</p></blockquote>

<!-- more -->


<h1>解決策</h1>

<p>ちなみに、heroku create済みです。</p>

<h2>secrets.ymlをgitで管理する</h2>

<p><code>.gitignore</code>に<code>/config/secrets.yml</code>を含めてしまっている場合は、削除してください。<br/>
その後、git管理化におくため、commitします。</p>

<p>productionの<code>secret_key_base</code>は環境変数から取得するようになっているため、herokuの環境変数に<code>SECRET_KEY_BASE</code>を設定する必要があります。</p>

<h2>環境変数SECRET_KEY_BASEを設定する</h2>

<p>やり方が２通りあります。</p>

<h3>heroku_secretsを使う</h3>

<p>この方法では、<a href="https://github.com/alexpeattie/heroku_secrets">heroku_secrets</a>というgemを利用することでherokuコマンドを打つ必要はありません。</p>

<h4>gemのインストール</h4>

<p>Gemfileにgemを追加して、bundle updateを実行します。</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">gem</span> <span class="s1">&#39;heroku_secrets&#39;</span><span class="p">,</span> <span class="ss">github</span><span class="p">:</span> <span class="s1">&#39;alexpeattie/heroku_secrets&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>rakeコマンドを実行</h4>

<p>その後、rakeコマンドを実行します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>bundle <span class="nb">exec </span>rake heroku:secrets<span class="o">[</span>app-name<span class="o">]</span> <span class="nv">RAILS_ENV</span><span class="o">=</span>production
</span></code></pre></td></tr></table></div></figure>


<p>もう一つの方も作業量としては変わらなそうですね。</p>

<h3>heroku configで環境変数を設定する</h3>

<p>この方法では、heroku config:add で環境変数を直接設定します。</p>

<h4>設定値を作成する</h4>

<p>環境変数に設定する値を取得します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>bundle <span class="nb">exec </span>rake secret <span class="nv">RAILS_ENV</span><span class="o">=</span>production
</span></code></pre></td></tr></table></div></figure>


<h4>herokuの環境変数を設定する</h4>

<p>上記の実行結果を値とした環境変数(SECRET_KEY_BASE)を設定します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>heroku config:add <span class="nv">SECRET_KEY_BASE</span><span class="o">=</span>rake secretの実行結果
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails4でacts-as-taggable-on Gemを使う]]></title>
    <link href="http://jangajan.com/blog/2014/10/04/acts-as-taggable-on-in-rails/"/>
    <updated>2014-10-04T03:40:31+09:00</updated>
    <id>http://jangajan.com/blog/2014/10/04/acts-as-taggable-on-in-rails</id>
    <content type="html"><![CDATA[<p>ユーザーに紐づくタスクに、タグ付けをするという機能を実現する方法です。<br/>
<code>acts-as-taggable-on</code>というgemを利用することで簡単(苦戦した&hellip;)にタグ機能は実現できるそうです。<br/>
なんとかできたっぽい&hellip;</p>

<p>環境は、こんな感じです。</p>

<ul>
<li>Rails 4.1.6</li>
<li>ruby 2.1.2p95</li>
<li>acts-as-taggable-on 3.4.2</li>
</ul>


<p>Githubの<a href="https://github.com/mbleigh/acts-as-taggable-on#tag-ownership">README</a>を参考にしました</p>

<!-- more -->


<h1>Model</h1>

<p>そもそもリレーション関係の設定でハマりましたが、これで良さそうです。<br/>
関係としては<code>user 1-n task</code>となり、taskにタグを設定します。<br/>
タグは、userごとに別々に管理します。</p>

<figure class='code'><figcaption><span>app/models/user.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">acts_as_tagger</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:tasks</span><span class="p">,</span> <span class="ss">dependent</span><span class="p">:</span> <span class="ss">:destroy</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/models/task.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Task</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">acts_as_taggable</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>View</h1>

<p>タグのところだけピックアップ。<br/>
（簡単なサンプル作れば良かった）  <br/>
画面表示するController内のメソッドで、選択可能なタグを<code>@user_tags</code>に入れています。<br/>
タグは複数選択可能にするため、checkboxを利用しました。<br/>
checkbox生成でrailsの仕組みを利用しようとしたのですが、以下の2点を実現しようとしてうまいやり方が見つからなかった&hellip;</p>

<ul>
<li>labelでクリック連携</li>
<li>valueの値をタグの名前</li>
</ul>


<p>form_for内に記述します。</p>

<figure class='code'><figcaption><span>app/views/tasks/_form.html.haml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="c">/ @user_tagsはcontrollerで配列で設定 ex) =&gt; [&quot;tag1&quot;, &quot;tag2&quot;]</span>
</span><span class='line'><span class="p">-</span> <span class="vi">@user_tags</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">tag</span><span class="o">|</span>
</span><span class='line'>  <span class="c">/ tagを複数選択可能にするため、checkboxを利用</span>
</span><span class='line'>  <span class="nt">%input</span><span class="p">{</span><span class="nb">id</span><span class="ss">:&quot;tag-</span><span class="si">#{</span><span class="n">tag</span><span class="si">}</span>&quot; ,name:&#39;task[tag_list][]&#39;, type:&#39;checkbox&#39;,value:&quot;<span class="si">#{</span><span class="n">tag</span><span class="si">}</span>&quot;}
</span><span class='line'>  <span class="nt">%label</span><span class="p">{</span><span class="k">for</span><span class="ss">:&quot;tag-</span><span class="si">#{</span><span class="n">tag</span><span class="si">}</span>&quot;}
</span><span class='line'>    <span class="nt">%span</span><span class="nc">.task-tag</span>
</span><span class='line'>      <span class="p">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">tag</span><span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>タグ付けよりもrailsでcheckbox使うところに時間とられた&hellip;宿題ですね。</p>

<h1>Controller</h1>

<p>リクエストのtask[tag_list]という値の中に、タグが含まれます。<br/>
<code>permit</code>で、配列をチェックしたい場合は、<code>tag_list: []</code>と指定してあげる必要がありました。</p>

<figure class='code'><figcaption><span>app/controllers/tasks_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">TasksController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="c1"># current_user =&gt; User.find(session[:user_id])</span>
</span><span class='line'>    <span class="vi">@task</span> <span class="o">=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">tasks</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="n">task_params</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@task</span><span class="o">.</span><span class="n">user</span> <span class="o">=</span> <span class="n">current_user</span>
</span><span class='line'>    <span class="c1"># tagの設定処理 :withには&#39;tag1, tag2&#39;という形式の文字列を設定することでタグを登録できる</span>
</span><span class='line'>    <span class="n">current_user</span><span class="o">.</span><span class="n">tag</span><span class="p">(</span><span class="vi">@task</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="vi">@task</span><span class="o">.</span><span class="n">tag_list</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;, &#39;</span><span class="p">),</span> <span class="ss">:on</span> <span class="o">=&gt;</span> <span class="ss">:tags</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@task</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="c1"># 成功処理</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="c1"># 失敗処理</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">task_params</span>
</span><span class='line'>    <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:task</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span>
</span><span class='line'>      <span class="c1"># tag_list: []を指定することで、checkboxの複数の値を配列にして、tag_listに設定可能になる</span>
</span><span class='line'>      <span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:deadline</span><span class="p">,</span> <span class="ss">tag_list</span><span class="p">:</span> <span class="o">[]</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>もしかしたらもっといいやり方があるかもしれません。<br/>
気をつける場所はいくつかあるものの、意外と簡単かも。</p>

<h1>補足</h1>

<h2>ユーザーが設定しているタグの一覧を取得する</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="vi">@user_tags</span> <span class="o">=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">owned_tag_list</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;tag1&quot;</span><span class="p">,</span> <span class="s2">&quot;tag2&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ヘルパーメソッドでHaml::Helpersを使う]]></title>
    <link href="http://jangajan.com/blog/2014/10/03/haml-helper/"/>
    <updated>2014-10-03T03:16:51+09:00</updated>
    <id>http://jangajan.com/blog/2014/10/03/haml-helper</id>
    <content type="html"><![CDATA[<p>HAMLのViewのヘルパーメソッドどう書くのかという話です。<br/>
<a href="http://haml.info/docs/yardoc/Haml/Helpers.html">Module Haml::Helpers</a>を使います。</p>

<!-- more -->


<p>普通にタグを書く分には<code>haml_tag</code>を使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">module</span> <span class="nn">ApplicationHelper</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">alert_close_icon</span>
</span><span class='line'>    <span class="n">haml_tag</span><span class="p">(</span><span class="ss">:button</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s1">&#39;close&#39;</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="s1">&#39;button&#39;</span><span class="p">,</span> <span class="s1">&#39;data-dismiss&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;alert&#39;</span><span class="p">,</span> <span class="s1">&#39;aria-hidden&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;true&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">haml_concat</span> <span class="s1">&#39;&amp;times;&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bootstrap3のモーダル表示（HAMLサンプル）]]></title>
    <link href="http://jangajan.com/blog/2014/09/29/haml-modal-in-bootstrap/"/>
    <updated>2014-09-29T19:50:21+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/29/haml-modal-in-bootstrap</id>
    <content type="html"><![CDATA[<p>bootstrap3でModalウインドウを表示するサンプルです。
サンプルはHAML形式です。</p>

<!-- more -->


<p>呼び出しのボタンで、<code>data-toggle="modal"</code>と<code>data-target="#表示するモーダルのid"</code>を指定します。<br/>
Modalは下のdiv構成で組むことで表示できます。<br/>
<code>#task-modal</code>は呼び出すModalで設定したものを指定します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="c">/ Modalの呼び出し元になるボタン</span>
</span><span class='line'><span class="nt">%button</span><span class="nc">.btn.btn-info.btn-lg.btn-block</span><span class="p">{</span><span class="ss">data</span><span class="p">:</span> <span class="p">{</span><span class="ss">toggle</span><span class="p">:</span> <span class="s1">&#39;modal&#39;</span><span class="p">,</span> <span class="ss">target</span><span class="p">:</span> <span class="s1">&#39;#task-modal&#39;</span><span class="p">}</span>}
</span><span class='line'>  Create Modal Task
</span><span class='line'>
</span><span class='line'>...(略)
</span><span class='line'>
</span><span class='line'><span class="c">/ 表示するModal</span>
</span><span class='line'><span class="nt">%div</span><span class="nc">.modal</span><span class="nf">#task-modal</span>
</span><span class='line'>  <span class="nt">%div</span><span class="nc">.modal-dialog</span>
</span><span class='line'>    <span class="nt">%div</span><span class="nc">.modal-content</span>
</span><span class='line'>      <span class="nt">%div</span><span class="nc">.modal-header</span>
</span><span class='line'>        <span class="nt">%button</span><span class="nc">.close</span><span class="p">{</span><span class="ss">type</span><span class="p">:</span><span class="s1">&#39;button&#39;</span><span class="p">,</span> <span class="ss">data</span><span class="p">:</span> <span class="p">{</span><span class="ss">dismiss</span><span class="p">:</span> <span class="s1">&#39;modal&#39;</span><span class="p">}</span>}
</span><span class='line'>          X
</span><span class='line'>        <span class="nt">%h4</span><span class="nc">.modal-title</span>
</span><span class='line'>          TITLE
</span><span class='line'>      <span class="nt">%div</span><span class="nc">.modal-body</span>
</span><span class='line'>        <span class="nt">%p</span>
</span><span class='line'>          BODY
</span><span class='line'>      <span class="nt">%div</span><span class="nc">.modal-footer</span>
</span><span class='line'>        <span class="nt">%button</span><span class="nc">.btn.btn-primary</span><span class="p">{</span><span class="ss">type</span><span class="p">:</span> <span class="s1">&#39;button&#39;</span><span class="p">}</span>
</span><span class='line'>          Save
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ページ単位のjavascriptにcontent_forを使う]]></title>
    <link href="http://jangajan.com/blog/2014/09/27/content-for/"/>
    <updated>2014-09-27T04:14:07+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/27/content-for</id>
    <content type="html"><![CDATA[<p>ページ単位で特定のjavascriptを実行させたい時に、content_forを使えばいいんだね、という結論でした。</p>

<!-- more -->


<h1>javascriptをページごとのファイルに書けない理由</h1>

<p>そもそもbootstrapで作成したコンテンツにこんな記載がありました。
hamlでyatiのテーマを適用しています。</p>

<figure class='code'><figcaption><span>app/views/layouts/application.html.haml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="c">/ ...ページ最下部</span>
</span><span class='line'>      <span class="c">= yield</span>
</span><span class='line'><span class="c">/</span>
</span><span class='line'>  <span class="c">Javascripts</span>
</span><span class='line'>  <span class="c">\==================================================</span>
</span><span class='line'><span class="c">/ Placed at the end of the document so the pages load faster</span>
</span><span class='line'><span class="p">=</span> <span class="n">javascript_include_tag</span> <span class="s2">&quot;yeti&quot;</span>
</span><span class='line'><span class="p">=</span> <span class="k">yield</span><span class="p">(</span><span class="ss">:page_javascript</span><span class="p">)</span> <span class="k">if</span> <span class="n">content_for?</span><span class="p">(</span><span class="ss">:page_javascript</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>各ページのコンテンツは、<code>= yield</code>に埋め込まれます。<br/>
しかし、<code>= javascript_include_tag "yeti"</code>という処理でJavascriptの定義を追加するため、各ページのhamlにjavascriptを書くとjQueryの処理が動きません。<br/>
そこで、<code>= yield(:page_javascript) if content_for?(:page_javascript)</code>を利用します。</p>

<h1>content_forの使い方</h1>

<p>各ページのhamlの下部でcontent_forを利用することにより、application.html.hamlの<code>= yield(:page_javascript) if...</code>のところに出力されます。</p>

<figure class='code'><figcaption><span>app/views/tasks/new.html.haml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="p">-</span> <span class="n">content_for</span> <span class="ss">:page_javascript</span> <span class="k">do</span>
</span><span class='line'>  <span class="nd">:javascript</span>
</span><span class='line'>    <span class="nd">jQuery(&#39;#datetimepicker&#39;).datetimepicker();</span>
</span></code></pre></td></tr></table></div></figure>


<p>なので、ページごとのjavascriptは<code>content_for :page_javascript</code>を利用して書くようにしましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsでbootswitchのテーマを適用したらActionView::Template::Error]]></title>
    <link href="http://jangajan.com/blog/2014/09/26/include-css-error-in-rails/"/>
    <updated>2014-09-26T16:49:11+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/26/include-css-error-in-rails</id>
    <content type="html"><![CDATA[<p>bootswitch適用時に発生したActionView::Template::Errorの解消方法です。</p>

<!-- more -->


<h1>bootswatch適用</h1>

<p>以下のようにbootswatchを適用しました。</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;twitter-bootswatch-rails&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;twitter-bootswatch-rails-helpers&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;therubyracer&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>今回はyetiを適用しています。<br/>
テンプレートエンジンはslimを使っています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>bundle <span class="nb">exec </span>rails g bootswatch:install yeti
</span><span class='line'>bundle <span class="nb">exec </span>rails g bootswatch:import yeti
</span><span class='line'>bundle <span class="nb">exec </span>rails g bootswatch:layout yeti
</span><span class='line'>mv app/views/layouts/yeti.html.slim app/views/layouts/application.html.slim
</span></code></pre></td></tr></table></div></figure>


<p>最後のmvでテンプレートファイルの入れ替えを行っています。</p>

<h1>ActionView::Template::Errorエラー</h1>

<p>ここで<code>rails s</code>すると、以下のエラーが発生しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ActionView::Template::Error <span class="o">(</span>Asset filtered out and will not be served: add <span class="sb">`</span>Rails.application.config.assets.precompile +<span class="o">=</span> %w<span class="o">(</span> yeti.css <span class="o">)</span><span class="sb">`</span> to <span class="sb">`</span>config/initializers/assets.rb<span class="sb">`</span> and restart your server<span class="o">)</span>:
</span><span class='line'>     9:     / Le HTML5 shim, <span class="k">for</span> IE6-8 support of HTML elements
</span><span class='line'>    10:     /<span class="o">[</span><span class="k">if</span> lt IE 9<span class="o">]</span>
</span><span class='line'>    11:       <span class="o">=</span> javascript_include_tag <span class="s2">&quot;http://html5shim.googlecode.com/svn/trunk/html5.js&quot;</span>
</span><span class='line'>    12:     <span class="o">=</span> stylesheet_link_tag <span class="s2">&quot;yeti&quot;</span>, :media <span class="o">=</span>&gt; <span class="s2">&quot;all&quot;</span>
</span><span class='line'>    13:     <span class="o">=</span> yield<span class="o">(</span>:page_stylesheet<span class="o">)</span> <span class="k">if</span> content_for?<span class="o">(</span>:page_stylesheet<span class="o">)</span>
</span><span class='line'>    14:
</span><span class='line'>    15:
</span><span class='line'>  app/views/layouts/application.html.slim:12:in <span class="sb">`</span>_app_views_layouts_application_html_slim__3298097478580668215_70163995513140<span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  Rendered vendor/bundle/ruby/2.1.0/gems/actionpack-4.1.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb <span class="o">(</span>1.0ms<span class="o">)</span>
</span><span class='line'>  Rendered vendor/bundle/ruby/2.1.0/gems/actionpack-4.1.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb <span class="o">(</span>1.0ms<span class="o">)</span>
</span><span class='line'>  Rendered vendor/bundle/ruby/2.1.0/gems/actionpack-4.1.6/lib/action_dispatch/middleware/templates/rescues/template_error.html.erb within rescues/layout <span class="o">(</span>15.5ms<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>テンプレートファイルの12行目、ちょうどyetinテーマのcssのところですね。<br/>
どうやら、呼び込みたいassetsファイルがちゃんとprecompileされていないらしい。<br/>
追加したいなら、<code>config/initializers/assets.rb</code>にこんな感じに追加しろぼけってエラーメッセージ優しい。</p>

<h1>エラー解消</h1>

<p>そんなわけでこんな感じで修正。</p>

<figure class='code'><figcaption><span>config/initializers/assets.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">precompile</span> <span class="o">+=</span> <span class="sx">%w( yeti.css yeti.js )</span>
</span></code></pre></td></tr></table></div></figure>


<p>yeti.jsも同じエラーが出たのであわせて解消。<br/>
これで<code>rails s</code>したらスタイル代わった。やった。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ForbiddenAttributesErrorが発生]]></title>
    <link href="http://jangajan.com/blog/2014/09/24/forbiddenattributeserror-in-rails/"/>
    <updated>2014-09-24T02:33:27+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/24/forbiddenattributeserror-in-rails</id>
    <content type="html"><![CDATA[<p>Rails4で、ForbiddenAttributesErrorが発生した場合の対応です。</p>

<h1>ActiveModel::ForbiddenAttributesError発生</h1>

<p>次のようなエラーが発生しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ActiveModel::ForbiddenAttributesError <span class="o">(</span>ActiveModel::ForbiddenAttributesError<span class="o">)</span>:
</span><span class='line'>  app/controllers/posts_controller.rb:13:in <span class="sb">`</span>create<span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>13行目が悪さをしているらしい&hellip;</p>

<figure class='code'><figcaption><span>app/controllers/posts_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>  <span class="vi">@feed</span> <span class="o">=</span> <span class="no">Feed</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:post</span><span class="o">]</span><span class="p">)</span> <span class="c1"># 13行目</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>これはmass assignmentの問題を解決するために、Rails4から標準で導入された対応により発生しました。<br/>
mass assignmentとはsubmitしたデータから簡単にModelを作ることができるRailsの仕組みです。<br/>
しかし、意図しないパラメータも含んだ状態でModelが作られるという脆弱性のため、このようなエラーが発生するようになりました。<br/>
mass assignmentの問題とその対策についての詳細な説明は<a href="http://www.willnet.in/48">Rails4.0に含まれる strong_parameters について</a>を参考にしてください。</p>

<h1>対応</h1>

<h2>Model作成に必要なsubmitデータを指定する方法</h2>

<p>Model作成に必要なsubmitデータを明示的に指定し、チェックする方法です。
permitメソッドを使うことで、submitデータを絞り込みます。</p>

<figure class='code'><figcaption><span>app/controllers/posts_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>  <span class="vi">@feed</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">post_params</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kp">private</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">post_params</span>
</span><span class='line'>  <span class="c1"># submitしたデータのうち、Model作成に必要なものを</span>
</span><span class='line'>  <span class="c1"># permitの引数に指定する</span>
</span><span class='line'>  <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:params</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span>
</span><span class='line'>    <span class="ss">:title</span><span class="p">,</span> <span class="ss">:body</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>エラーを発生させない方法</h2>

<p>こちらはmass assignmentの問題を解決していないため、お勧めしません。<br/>
pertmitメソッドを通さず、全てのsubmitデータを利用します。</p>

<figure class='code'><figcaption><span>config/application.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="no">Rails</span><span class="o">::</span><span class="no">Application</span>
</span><span class='line'>    <span class="c1"># デフォルトはfalseに設定されている</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">action_controller</span><span class="o">.</span><span class="n">permit_all_parameters</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>エラー発生場所</h1>

<p><code>ActiveModel::ForbiddenAttributesError</code>は次の処理で発生します。</p>

<ul>
<li>ActiveModel::ForbiddenAttributesProtection#sanitize_for_mass_assignment(attributes)</li>
</ul>


<p>上述のpermitメソッドを実行することで、データはチェック済みの状態になります。<br/>
このチェック済み状態を確認するのが、<code>sanitize_for_mass_assignment</code>の役割です。<br/>
permitメソッドは<code>ActionController::Parameters</code>に定義してあります。</p>

<h1>未チェックのsumitデータがあった場合の対応</h1>

<p>未チェックのsubmitデータがあった場合の挙動をコントロールできます。<br/>
<code>config.action_controller.action_on_unpermitted_parameters</code>を使います。</p>

<h2>エラーにする</h2>

<figure class='code'><figcaption><span>config/application.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="no">Rails</span><span class="o">::</span><span class="no">Application</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">action_controller</span><span class="o">.</span><span class="n">action_on_unpermitted_parameters</span> <span class="o">=</span> <span class="ss">:raise</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ログに出力する</h2>

<figure class='code'><figcaption><span>config/application.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="no">Rails</span><span class="o">::</span><span class="no">Application</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">action_controller</span><span class="o">.</span><span class="n">action_on_unpermitted_parameters</span> <span class="o">=</span> <span class="ss">:log</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>出力結果はこうなります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Unpermitted parameters: hogehoge
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I18nの設定でdatetime_selectの月表示がおかしい]]></title>
    <link href="http://jangajan.com/blog/2014/09/12/perfect-rails-i18n-months/"/>
    <updated>2014-09-12T19:09:36+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/12/perfect-rails-i18n-months</id>
    <content type="html"><![CDATA[<p>前記事に引き続き、i18nの対応です。<br/>
これいっぱいありそう。<br/>
datetime_selectで表示した<code>月</code>欄の表示が妙だ。</p>

<!-- more -->


<h1>ja.ymlにmonth_namesを追加</h1>

<p>翻訳ファイルに<code>month_names</code>を追加しましょう。</p>

<figure class='code'><figcaption><span>config/locals/ja.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">ja</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">date</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">order</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">:year</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">:month</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">:day</span>
</span><span class='line'>    <span class="l-Scalar-Plain">month_names</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">~</span><span class="p-Indicator">,</span> <span class="nv">1月</span><span class="p-Indicator">,</span> <span class="nv">2月</span><span class="p-Indicator">,</span> <span class="nv">3月</span><span class="p-Indicator">,</span> <span class="nv">4月</span><span class="p-Indicator">,</span> <span class="nv">5月</span><span class="p-Indicator">,</span> <span class="nv">6月</span><span class="p-Indicator">,</span> <span class="nv">7月</span><span class="p-Indicator">,</span> <span class="nv">8月</span><span class="p-Indicator">,</span> <span class="nv">9月</span><span class="p-Indicator">,</span> <span class="nv">10月</span><span class="p-Indicator">,</span> <span class="nv">11月</span><span class="p-Indicator">,</span> <span class="nv">12月</span><span class="p-Indicator">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちなみに月表示には省略形も存在します。(JanuaryだとJanとか)<br/>
この時は<code>abbr_month_names</code>というものを使います。<br/>
日本語だとそもそも表記が短いのであまり意味はないと思いますが、思わぬところでエラーが発生したらそちらを疑いましょう。</p>

<p>これもactivesupportにenの設定はありました。<br/>
曜日も同様なんでご注意を。
と思ったら、素晴らしいものがありました。</p>

<ul>
<li><a href="https://github.com/svenfuchs/rails-i18n/blob/master/rails/locale/ja.yml">https://github.com/svenfuchs/rails-i18n/blob/master/rails/locale/ja.yml</a>

<ul>
<li>各言語ごとにあるのでこれベースにするのがいいですね。</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I18nの設定でdatetime_selectのエラー対応]]></title>
    <link href="http://jangajan.com/blog/2014/09/12/perfect-rails-i18n/"/>
    <updated>2014-09-12T18:25:27+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/12/perfect-rails-i18n</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774165166/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=4774165166&linkCode=as2&tag=pochan0919-22">パーフェクト Ruby on Rails</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=pochan0919-22&l=as2&o=9&a=4774165166" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />を、第6章からやってます。</p>

<p>日本語対応のi18nの設定でエラーが発生しました。<br/>
補足ですが、私のRailsの環境は<code>4.1.5</code>です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">ActionView</span><span class="o">::</span><span class="no">Template</span><span class="o">::</span><span class="no">Error</span> <span class="p">(</span><span class="n">undefined</span> <span class="nb">method</span> <span class="sb">`map&#39; for &quot;translation missing: ja.date.order&quot;:String):</span>
</span><span class='line'><span class="sb">    27:   &lt;/div&gt;</span>
</span><span class='line'><span class="sb">    28:   &lt;div class=&quot;form-group&quot;&gt;</span>
</span><span class='line'><span class="sb">    29:     &lt;%= f.label :end_time %&gt;</span>
</span><span class='line'><span class="sb">    30:     &lt;%= f.datetime_select :end_time, start_year: now.year, end_year: now.year + 1 %&gt;</span>
</span><span class='line'><span class="sb">    31:   &lt;/div&gt;</span>
</span><span class='line'><span class="sb">    32:   &lt;div class=&quot;form-group&quot;&gt;</span>
</span><span class='line'><span class="sb">    33:     &lt;%= f.label :content %&gt;</span>
</span><span class='line'><span class="sb">  app/views/events/new.html.erb:30:in `</span><span class="n">block</span> <span class="k">in</span> <span class="n">_app_views_events_new_html_erb__622987462779560017_70179900721920</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1">  app/views/events/new.html.erb:5:in `_app_views_events_new_html_erb__622987462779560017_70179900721920&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="no">Rendered</span> <span class="n">vendor</span><span class="o">/</span><span class="n">bundle</span><span class="o">/</span><span class="n">ruby</span><span class="o">/</span><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">actionpack</span><span class="o">-</span><span class="mi">4</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">5</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">action_dispatch</span><span class="o">/</span><span class="n">middleware</span><span class="o">/</span><span class="n">templates</span><span class="o">/</span><span class="n">rescues</span><span class="o">/</span><span class="n">_trace</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">erb</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">8</span><span class="n">ms</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Rendered</span> <span class="n">vendor</span><span class="o">/</span><span class="n">bundle</span><span class="o">/</span><span class="n">ruby</span><span class="o">/</span><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">actionpack</span><span class="o">-</span><span class="mi">4</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">5</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">action_dispatch</span><span class="o">/</span><span class="n">middleware</span><span class="o">/</span><span class="n">templates</span><span class="o">/</span><span class="n">rescues</span><span class="o">/</span><span class="n">_request_and_response</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">erb</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">5</span><span class="n">ms</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Rendered</span> <span class="n">vendor</span><span class="o">/</span><span class="n">bundle</span><span class="o">/</span><span class="n">ruby</span><span class="o">/</span><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">actionpack</span><span class="o">-</span><span class="mi">4</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">5</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">action_dispatch</span><span class="o">/</span><span class="n">middleware</span><span class="o">/</span><span class="n">templates</span><span class="o">/</span><span class="n">rescues</span><span class="o">/</span><span class="n">template_error</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">erb</span> <span class="n">within</span> <span class="n">rescues</span><span class="o">/</span><span class="n">layout</span> <span class="p">(</span><span class="mi">16</span><span class="o">.</span><span class="mi">9</span><span class="n">ms</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h1>date.orderの指定</h1>

<h2>発生箇所</h2>

<p>該当するソースコードはこちらです。<br/>
ちなみに、i18nを無効化(<code>config.i18n.default_locale</code>を初期状態のようにコメントアウト)していると発生しません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;form-group&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">%= f.label :start_time %&gt;</span>
</span><span class='line'><span class="sx">    &lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">datetime_select</span> <span class="ss">:start_time</span><span class="p">,</span> <span class="ss">start_year</span><span class="p">:</span> <span class="n">now</span><span class="o">.</span><span class="n">year</span><span class="p">,</span> <span class="ss">end_year</span><span class="p">:</span> <span class="n">now</span><span class="o">.</span><span class="n">year</span> <span class="o">+</span> <span class="mi">1</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>エラーメッセージからすると、<code>ja.date.order</code>で翻訳に失敗しちゃったよテヘってなってるんで、ja.yml修正すれば良さそう。</p>

<h2>解決策</h2>

<p>2つあります。</p>

<p><a href="https://github.com/rails/rails/blob/a8eb6018318f65e34486da8d1860b3f0d774383d/guides/source/i18n.md#action-view-helper-methods">ここ</a>に書いてありますね。</p>

<blockquote><p>datetime_select also looks up the order option from date.order (unless you pass the option explicitly).</p></blockquote>

<h3>ja.ymlに設定を追加</h3>

<p>翻訳ファイルの修正です。</p>

<figure class='code'><figcaption><span>config/locals/ja.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">ja</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">date</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">order</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">:year</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">:month</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">:day</span>
</span></code></pre></td></tr></table></div></figure>


<p>なお、デフォルト(en)の場合は、activesupportの設定が適用されています。</p>

<h3>datetime_selectのoptionにorderを追加</h3>

<p>datetime_selectに<code>order</code>というoptionを追加することで、ja.ymlの修正をしないで対応できます。 <br/>
優先順位は<code>ja.ymlで設定 &lt; datetime_selectでoption指定</code>なので、必要があれば設定すればいいと思います。</p>

<figure class='code'><figcaption><span>config/locals/ja.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'>  <span class="l-Scalar-Plain">&lt;div class=&quot;form-group&quot;&gt;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">&lt;%= f.label :start_time %&gt;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">&lt;%= f.datetime_select :start_time, start_year</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">now.year, end_year</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">now.year + 1, order</span><span class="p-Indicator">:</span> <span class="p-Indicator">[:</span><span class="nv">year</span><span class="p-Indicator">,</span> <span class="p-Indicator">:</span><span class="nv">month</span><span class="p-Indicator">,</span> <span class="p-Indicator">:</span><span class="nv">day</span><span class="p-Indicator">]</span> <span class="err">%</span><span class="p-Indicator">&gt;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RailsでLocaleを指定する]]></title>
    <link href="http://jangajan.com/blog/2014/09/11/perfect-rails-locale/"/>
    <updated>2014-09-11T15:34:56+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/11/perfect-rails-locale</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774165166/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=4774165166&linkCode=as2&tag=pochan0919-22">パーフェクト Ruby on Rails</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=pochan0919-22&l=as2&o=9&a=4774165166" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />を、第6章からやってます。</p>

<p>RailsにおけるTimezoneの設定方法です。
<code>config/application.rb</code>で設定します。</p>

<!-- more -->


<h1>Timezoneの日時設定</h1>

<p>Timezoneを指定した日時は、<code>Time.zone.nowe</code>で取得します。
デフォルトでは、<code>UTC</code>となります。</p>

<figure class='code'><figcaption><span>rails console</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">001</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="no">Time</span><span class="o">.</span><span class="n">zone</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">Thu</span><span class="p">,</span> <span class="mi">11</span> <span class="no">Sep</span> <span class="mi">2014</span> <span class="mo">06</span><span class="p">:</span><span class="mi">33</span><span class="p">:</span><span class="mi">19</span> <span class="no">UTC</span> <span class="o">+</span><span class="mo">00</span><span class="p">:</span><span class="mo">00</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを<code>JST</code>に変更するには、以下の修正をします。</p>

<figure class='code'><figcaption><span>config/application.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">module</span> <span class="nn">AwesomeEvents</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="no">Rails</span><span class="o">::</span><span class="no">Application</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">time_zone</span> <span class="o">=</span> <span class="s1">&#39;Tokyo&#39;</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>rails console</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">003</span><span class="p">:</span><span class="mi">0</span><span class="o">*</span> <span class="no">Time</span><span class="o">.</span><span class="n">zone</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">Thu</span><span class="p">,</span> <span class="mi">11</span> <span class="no">Sep</span> <span class="mi">2014</span> <span class="mi">15</span><span class="p">:</span><span class="mi">33</span><span class="p">:</span><span class="mi">47</span> <span class="no">JST</span> <span class="o">+</span><span class="mi">09</span><span class="p">:</span><span class="mo">00</span>
</span></code></pre></td></tr></table></div></figure>


<h1>time_zoneに設定できる値</h1>

<p><code>config/application.rb</code>の<code>config.time_zone</code>に設定できる情報を確認できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># time_zoneに設定できる値の一覧を表示</span>
</span><span class='line'>bundle <span class="nb">exec </span>rake <span class="nb">time</span>:zones:all
</span><span class='line'>
</span><span class='line'><span class="c"># 現在有効なtime_zoneの値を表示</span>
</span><span class='line'><span class="c"># 設定していない場合、システムのタイムゾーンの値を表示</span>
</span><span class='line'>bundle <span class="nb">exec </span>rake <span class="nb">time</span>:zones:local
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bootstrap3 With Rails4]]></title>
    <link href="http://jangajan.com/blog/2014/09/10/perfect-rails-6-bootstrap/"/>
    <updated>2014-09-10T01:40:22+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/10/perfect-rails-6-bootstrap</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774165166/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=4774165166&linkCode=as2&tag=pochan0919-22">パーフェクト Ruby on Rails</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=pochan0919-22&l=as2&o=9&a=4774165166" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />を、第6章からやってます。</p>

<p>Bootstrapの導入をzipから展開したので、Gemで導入する方法を調査しました。</p>

<!-- more -->


<h1>twitter-bootstrap-rails gemを使う</h1>

<p><a href="https://rubygems.org/gems/twitter-bootstrap-rails">twitter-bootstrap-rails</a>というGemを使うことで、テキスト同様の表示ができます。<br/>
(後の手順で一部テキスト外の修正を行う必要があるかもしれません)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">echo</span> <span class="s2">&quot;gem &#39;twitter-bootstrap-rails&#39;, &#39;&gt;= 3.1.1&#39;&quot;</span> &gt;&gt; Gemfile
</span><span class='line'>bundle install --path vendor/bundle
</span><span class='line'>bundle <span class="nb">exec </span>rails generate bootstrap:install static
</span></code></pre></td></tr></table></div></figure>


<p><code>p.167 リスト6.3</code>の通り<code>app/views/layouts/application.html.erb</code>を修正すれば完了です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sedで1行追加]]></title>
    <link href="http://jangajan.com/blog/2014/09/09/sed-insert-text/"/>
    <updated>2014-09-09T22:41:12+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/09/sed-insert-text</id>
    <content type="html"><![CDATA[<p>Macでコマンドラインから指定した行にテキストを1行追加する方法です。<br/>
sedコマンドを使ってやってみたら、エラーが発生しました。</p>

<!-- more -->


<p><code>16i</code>は16行目に追加することを意味します。
<code>-i</code>をつけると、上書きになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sed -i -e <span class="s2">&quot;16i //= require bootstrap.min&quot;</span> app/assets/javascripts/application.js
</span><span class='line'><span class="o">=</span>&gt; sed: 1: <span class="s2">&quot;16i //= require bootstr ...&quot;</span>: <span class="nb">command </span>i expects <span class="se">\ </span>followed by text
</span></code></pre></td></tr></table></div></figure>


<p>あれ、16iがきいてない？
手持ちのUbuntuだとうまくいったんだけどな、と思って、もしやGnu-？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>brew install gnu-sed
</span><span class='line'><span class="nv">$ </span>gsed -i -e <span class="s2">&quot;16i //= require bootstrap.min&quot;</span> app/assets/javascripts/application.js
</span></code></pre></td></tr></table></div></figure>


<p>成功！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyのThreadを利用したWebサーバーを作る]]></title>
    <link href="http://jangajan.com/blog/2014/09/07/unix-thread-socket-server-in-ruby/"/>
    <updated>2014-09-07T03:15:15+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/07/unix-thread-socket-server-in-ruby</id>
    <content type="html"><![CDATA[<p>積読消化シリーズの派生です。<br/>
<a href="http://tatsu-zine.com/books/naruhounix">なるほどUnixプロセス ― Rubyで学ぶUnixの基礎</a><br/>
processをforkして動くWebサーバーをThreadで試してみます。</p>

<!-- more -->


<h1>Threadの簡単な使い方</h1>

<p>まずはThreadの簡単な使い方です。<br/>
一部違いはあるものの、書き方はProcessのfork処理と大きく差はありませんね。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">t1</span> <span class="o">=</span> <span class="no">Thread</span><span class="o">.</span><span class="n">start</span> <span class="p">{</span>
</span><span class='line'>   <span class="nb">puts</span> <span class="s2">&quot;スレッド1 id : </span><span class="si">#{</span><span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>   <span class="nb">sleep</span> <span class="mi">1</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># t1が終わるまではメインスレッドが待ちになる</span>
</span><span class='line'><span class="n">t1</span><span class="o">.</span><span class="n">join</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;メインスレッド id : </span><span class="si">#{</span><span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Thread.start{&hellip;}とすると、新しいThreadを生成してブロックを実行します。</li>
<li>メインスレッドが終了すると、Threadも終了します。</li>
<li>Thread#joinを実行すると、対象のThreadの処理が終了するまで待ちます。</li>
</ul>


<p>ちなみに、Threadはメインスレッドと同じProcessで実行されます。<br/>
そのため、<code>ps</code>でrubyのプロセスを確認すると一つしかありません。</p>

<h1>Threadローカルな変数</h1>

<p>処理プロセスが同じということは、Thread内の処理で変数は共有されることになりますね。<br/>
Threadローカルにするためには、Thread.startの引数に渡します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">access_count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">t1</span> <span class="o">=</span> <span class="no">Thread</span><span class="o">.</span><span class="n">start</span><span class="p">(</span><span class="n">access_count</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">ac</span><span class="o">|</span>
</span><span class='line'>   <span class="nb">puts</span> <span class="s2">&quot;スレッド1 id : </span><span class="si">#{</span><span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">ac</span> <span class="o">+=</span> <span class="mi">1</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">=&gt;</span> <span class="mi">1</span>
</span><span class='line'>   <span class="nb">sleep</span> <span class="mi">1</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">t1</span><span class="o">.</span><span class="n">join</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;メインスレッド id : </span><span class="si">#{</span><span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">access_count</span> <span class="o">+=</span> <span class="mi">1</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">=&gt;</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<h1>複数Threadを待ちたい</h1>

<p>Thread#joinは特定のThreadを待ちます。<br/>
Webサーバーの例では複数のProcessを管理していました。<br/>
同様のことをThreadで実行するには、<code>ThreadsWait</code>を使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;thwait&#39;</span>
</span><span class='line'><span class="n">worker_threads</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="mi">5</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">worker_threads</span> <span class="o">&lt;&lt;</span> <span class="no">Thread</span><span class="o">.</span><span class="n">start</span> <span class="p">{</span>
</span><span class='line'>     <span class="nb">puts</span> <span class="s2">&quot;スレッド1 id : </span><span class="si">#{</span><span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="si">}</span><span class="s2"> &quot;</span>
</span><span class='line'>     <span class="nb">sleep</span> <span class="mi">1</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1"># ThreadsWait.all_waitsで全てのThreadの処理終了を待つ</span>
</span><span class='line'><span class="no">ThreadsWait</span><span class="o">.</span><span class="n">all_waits</span><span class="p">(</span><span class="n">worker_threads</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;メインスレッド id : </span><span class="si">#{</span><span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">access_count</span> <span class="o">+=</span> <span class="mi">1</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">=&gt;</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<h1>複数Threadでリクエストを処理するWebサーバー</h1>

<p>それでは上記を踏まえて、複数Threadで処理するWebサーバーを書いてみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;socket&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;time&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;thwait&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">socket</span> <span class="o">=</span> <span class="no">TCPServer</span><span class="o">.</span><span class="n">open</span> <span class="s1">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="mi">8080</span>
</span><span class='line'>
</span><span class='line'><span class="n">access_count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">worker_threads</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="mi">5</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1"># access_countはThreadローカルにする</span>
</span><span class='line'>  <span class="n">worker_threads</span> <span class="o">&lt;&lt;</span> <span class="no">Thread</span><span class="o">.</span><span class="n">start</span><span class="p">(</span><span class="n">access_count</span><span class="p">){</span><span class="o">|</span><span class="n">ac</span><span class="o">|</span>
</span><span class='line'>    <span class="c1"># threadの処理</span>
</span><span class='line'>    <span class="kp">loop</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">response_body</span> <span class="o">=</span> <span class="s2">&quot;Hello Browser! </span><span class="si">#{</span><span class="n">ac</span> <span class="o">+=</span> <span class="mi">1</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="n">connection</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">accept</span>
</span><span class='line'>      <span class="n">connection</span><span class="o">.</span><span class="n">puts</span> <span class="o">[</span><span class="s1">&#39;HTTP/1.1 200 OK&#39;</span><span class="p">,</span>
</span><span class='line'>                     <span class="s2">&quot;Date: </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">httpdate</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>                     <span class="s1">&#39;Server: Ruby&#39;</span><span class="p">,</span>
</span><span class='line'>                     <span class="s1">&#39;Content-Type: text/html; charset=utf-8&#39;</span><span class="p">,</span>
</span><span class='line'>                     <span class="s2">&quot;Content-Length: </span><span class="si">#{</span><span class="n">response_body</span><span class="o">.</span><span class="n">length</span><span class="si">}</span><span class="se">\r\n\r\n</span><span class="s2">&quot;</span><span class="o">].</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\r\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">connection</span><span class="o">.</span><span class="n">puts</span> <span class="n">response_body</span>
</span><span class='line'>      <span class="n">connection</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># メインスレッドを待ちにする</span>
</span><span class='line'><span class="no">ThreadsWait</span><span class="o">.</span><span class="n">all_waits</span><span class="p">(</span><span class="n">worker_threads</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>実際のところ、<code>socket</code>を複数Threadで共有した場合どうなるか、とかは調査する必要がありますね。<br/>
ただ、Threadで置き換えることもできたということで。<br/>
これでも一応動きます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyのProcessを利用したWebサーバーを作る]]></title>
    <link href="http://jangajan.com/blog/2014/09/05/unix-process-socket-server-in-ruby/"/>
    <updated>2014-09-05T19:08:20+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/05/unix-process-socket-server-in-ruby</id>
    <content type="html"><![CDATA[<p>積読消化シリーズです。<br/>
<a href="http://tatsu-zine.com/books/naruhounix">なるほどUnixプロセス ― Rubyで学ぶUnixの基礎</a><br/>
簡単なWebサーバーを作ります。</p>

<ul>
<li>telnetでアクセスするWebサーバー</li>
<li>ブラウザでアクセスするWebサーバー</li>
<li>forkしたProcessでリクエストを処理するWebサーバー</li>
</ul>


<!-- more -->


<h1>telnetでアクセスするWebサーバー</h1>

<p>まずはtelnetでアクセスするためのシンプルなWebサーバーを用意します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;socket&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 127.0.0.1(localhost)で8080ポートで立ち上げる</span>
</span><span class='line'><span class="n">socket</span> <span class="o">=</span> <span class="no">TCPServer</span><span class="o">.</span><span class="n">open</span> <span class="s1">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="mi">8080</span>
</span><span class='line'>
</span><span class='line'><span class="kp">loop</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">connection</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">accept</span>
</span><span class='line'>  <span class="n">connection</span><span class="o">.</span><span class="n">puts</span> <span class="s1">&#39;Hello Readers!&#39;</span>
</span><span class='line'>  <span class="n">connection</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>サーバーを起動し、ターミナルを立ち上げて、telnetでアクセスしてみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>telnet 127.0.0.1 <span class="nv">8080</span>
</span><span class='line'><span class="o">=</span>&gt; Hello Readers!
</span></code></pre></td></tr></table></div></figure>


<p>ただし、このままだとブラウザで<code>http://127.0.0.1:8080</code>にアクセスできません。<br/>
次はブラウザでアクセスできるように修正します。</p>

<h1>ブラウザでアクセスするWebサーバー</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;socket&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;time&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">socket</span> <span class="o">=</span> <span class="no">TCPServer</span><span class="o">.</span><span class="n">open</span> <span class="s1">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="mi">8080</span>
</span><span class='line'>
</span><span class='line'><span class="kp">loop</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">connection</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">accept</span>
</span><span class='line'>  <span class="c1"># response headerを設定</span>
</span><span class='line'>  <span class="n">connection</span><span class="o">.</span><span class="n">puts</span> <span class="o">[</span><span class="s1">&#39;HTTP/1.1 200 OK&#39;</span><span class="p">,</span>
</span><span class='line'>                   <span class="s2">&quot;Date: </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">httpdate</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>                   <span class="s1">&#39;Server: Ruby&#39;</span><span class="p">,</span>
</span><span class='line'>                   <span class="s1">&#39;Content-Type: text/html; charset=utf-8&#39;</span><span class="p">,</span>
</span><span class='line'>                   <span class="s2">&quot;Content-Length: </span><span class="si">#{</span><span class="n">response_body</span><span class="o">.</span><span class="n">length</span><span class="si">}</span><span class="se">\r\n\r\n</span><span class="s2">&quot;</span><span class="o">].</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\r\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># response bodyを設定</span>
</span><span class='line'>  <span class="n">connection</span><span class="o">.</span><span class="n">puts</span> <span class="s1">&#39;Hello Readers!&#39;</span>
</span><span class='line'>  <span class="n">connection</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>レスポンスのヘッダー情報を追加しました。<br/>
ヘッダーとボディは改行<code>\r\n</code>で区切ります。</p>

<p>これでブラウザでアクセスできるようになりました。</p>

<h1>forkしたProcessでリクエストを処理するWebサーバー</h1>

<p>続いては、アクセスを子プロセスで処理するように変更します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1">#!/usr/bin/env ruby                           </span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;socket&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;time&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">socket</span> <span class="o">=</span> <span class="no">TCPServer</span><span class="o">.</span><span class="n">open</span> <span class="s1">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="mi">8080</span>
</span><span class='line'>
</span><span class='line'><span class="n">worker_pid</span> <span class="o">=</span> <span class="nb">fork</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># 子プロセスで処理</span>
</span><span class='line'>  <span class="kp">loop</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">response_body</span> <span class="o">=</span> <span class="s1">&#39;Hello Browser!&#39;</span>
</span><span class='line'>    <span class="n">connection</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">accept</span>
</span><span class='line'>    <span class="n">connection</span><span class="o">.</span><span class="n">puts</span> <span class="o">[</span><span class="s1">&#39;HTTP/1.1 200 OK&#39;</span><span class="p">,</span>
</span><span class='line'>                   <span class="s2">&quot;Date: </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">httpdate</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>                   <span class="s1">&#39;Server: Ruby&#39;</span><span class="p">,</span>
</span><span class='line'>                   <span class="s1">&#39;Content-Type: text/html; charset=utf-8&#39;</span><span class="p">,</span>
</span><span class='line'>                   <span class="s2">&quot;Content-Length: </span><span class="si">#{</span><span class="n">response_body</span><span class="o">.</span><span class="n">length</span><span class="si">}</span><span class="se">\r\n\r\n</span><span class="s2">&quot;</span><span class="o">].</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\r\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">connection</span><span class="o">.</span><span class="n">puts</span> <span class="n">response_body</span>
</span><span class='line'>    <span class="n">connection</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Signalを受け取ったらprocessをkillする</span>
</span><span class='line'><span class="o">[</span><span class="ss">:INT</span><span class="p">,</span> <span class="ss">:QUIT</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">signal</span><span class="o">|</span>
</span><span class='line'>  <span class="no">Signal</span><span class="o">.</span><span class="n">trap</span><span class="p">(</span><span class="n">signal</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="no">Process</span><span class="o">.</span><span class="n">kill</span><span class="p">(</span><span class="n">signal</span><span class="p">,</span> <span class="n">worker_pid</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 親プロセスの処理を待ちにする</span>
</span><span class='line'><span class="no">Process</span><span class="o">.</span><span class="n">waitpid</span> <span class="n">worker_pid</span>
</span></code></pre></td></tr></table></div></figure>


<p>forkで子プロセスを生成し、リクエストを子プロセスで処理しています。<br/>
親プロセスは子プロセスが処理が完了するまでwaitします。<br/>
(子プロセスはloop処理を行っているため、シグナルを受け取るまでは生き続けます)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UnixのSocketをRubyで扱う]]></title>
    <link href="http://jangajan.com/blog/2014/09/04/unix-process-socket-in-ruby/"/>
    <updated>2014-09-04T03:20:37+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/04/unix-process-socket-in-ruby</id>
    <content type="html"><![CDATA[<p>積読消化シリーズです。<br/>
<a href="http://tatsu-zine.com/books/naruhounix">なるほどUnixプロセス ― Rubyで学ぶUnixの基礎</a><br/>
プロセス間通信を、昨日はpipe、今日はUnixソケットのところです。</p>

<!-- more -->


<h1>Rubyのプロセス間通信でメッセージ（データグラム）を使う</h1>

<p>データの通信にストリームではなく、メッセージ（データグラム）を利用したい場合、UNIXソケットを使います。</p>

<h2>メッセージ</h2>

<p>昨日の最後にも載せた記事に説明があります。<br/>
メッセージを利用する場合は、１通信が１メッセージとなるため、データのデリミタが不要です。<br/>
(close処理が不要になる)</p>

<p><a href="http://slashdot.jp/journal/160355/TCP%E3%81%A8UDP%E3%81%AE%E9%81%95%E3%81%84">gatekeeperの日記： TCPとUDPの違い</a></p>

<blockquote><p>ところがデータグラム型ではメッセージ単位なのでメッセージの境界が保存されていて、
読み込みと書き込みは常にペアでなければいけない。</p></blockquote>

<p>なお、パイプでは、メッセージは使えません。</p>

<h2>Unixソケット</h2>

<p>Unixソケットは、ソケットを利用したプロセス間通信の方法の一つです。<br/>
メッセージを利用するためにはパイプではなく、Unixソケットでないといけません。<br/>
pipeではできなかったデータの双方向の通信ができます。</p>

<h2>サンプル</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;socket&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># :DGRAMはメッセージ（データグラム）の利用を宣言</span>
</span><span class='line'><span class="n">child_socket</span><span class="p">,</span> <span class="n">parent_socket</span> <span class="o">=</span> <span class="no">Socket</span><span class="o">.</span><span class="n">pair</span><span class="p">(</span><span class="ss">:UNIX</span><span class="p">,</span> <span class="ss">:DGRAM</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="n">maxlen</span> <span class="o">=</span> <span class="mi">1000</span> <span class="c1"># メッセージのMaxサイズ</span>
</span><span class='line'><span class="nb">fork</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># 子プロセスで使用しないsocketを閉じる</span>
</span><span class='line'>  <span class="n">parent_socket</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>  <span class="c1"># 対となるSocketからのメッセージの通知を待つ</span>
</span><span class='line'>  <span class="n">instruction</span> <span class="o">=</span> <span class="n">child_socket</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="n">maxlen</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># 対となるSocketへメッセージ送信</span>
</span><span class='line'>  <span class="n">child_socket</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">instruction</span><span class="si">}</span><span class="s2"> accomplished!&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 親プロセスで使用しないsocketを閉じる</span>
</span><span class='line'><span class="n">child_socket</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'><span class="c1"># 対となるSocketへメッセージ送信</span>
</span><span class='line'><span class="n">parent_socket</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;Heavy lifting&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="c1"># 対となるSocketからのメッセージの通知を待って表示する</span>
</span><span class='line'><span class="vg">$stdout</span><span class="o">.</span><span class="n">puts</span> <span class="n">parent_socket</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="n">maxlen</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt;Parent_Socket accomplished!</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>child_socket</code>と<code>parent_socket</code>でそれぞれ、メッセージをやり取りしています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UnixのパイプをRubyで扱う]]></title>
    <link href="http://jangajan.com/blog/2014/09/03/unix-process-in-ruby/"/>
    <updated>2014-09-03T18:20:35+09:00</updated>
    <id>http://jangajan.com/blog/2014/09/03/unix-process-in-ruby</id>
    <content type="html"><![CDATA[<p>積読消化シリーズです。<br/>
<a href="http://tatsu-zine.com/books/naruhounix">なるほどUnixプロセス ― Rubyで学ぶUnixの基礎</a><br/>
UnixでのパイプをRubyで表すとどうなるか。</p>

<!-- more -->


<h1>Rubyで扱うパイプ</h1>

<h2>パイプとは</h2>

<p>パイプとは、「単方向のデータの流れ」です。<br/>
パイプでは、２つのプロセス(A,B)で、ストリームを介して、一方通行に通信します。<br/>
(ストリームは最後の方に補足します。データを溜めておく場所のイメージ)</p>

<h2>単一プロセスでのパイプ</h2>

<p>一つのプロセスでの、パイプを表現すると以下の通りです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">p</span> <span class="no">IO</span><span class="o">.</span><span class="n">pipe</span> <span class="c1">#=&gt; [#&lt;IO:fd 7&gt;, #&lt;IO:fd 8&gt;]</span>
</span><span class='line'><span class="n">reader</span><span class="p">,</span> <span class="n">writer</span> <span class="o">=</span> <span class="no">IO</span><span class="o">.</span><span class="n">pipe</span>
</span><span class='line'><span class="c1"># reader =&gt; #&lt;IO:fd 7&gt;</span>
</span><span class='line'><span class="c1"># writer =&gt; #&lt;IO:fd 8&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;書き込みました。&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">reader</span><span class="o">.</span><span class="n">read</span> <span class="c1"># =&gt;書き込みました。</span>
</span></code></pre></td></tr></table></div></figure>


<p>reader(A)、writer(B)とした場合、<code>B =&gt; A</code>というデータの流れは可能ですが、<code>A =&gt; B</code>はできません。<br/>
<code>writer.write</code>でストリームに情報を書き込みます。<br/>
<code>reader.read</code>でストリームに書き込まれた情報を読み込みます。</p>

<h3>メモ</h3>

<ul>
<li><code>reader.read</code>の前に、<code>writer.close</code>をする

<ul>
<li><code>reader.read</code>は区切り文字が見つかるまでストリームを読み込み続けます</li>
<li><code>writer.close</code>することで、ストリームへの書き込みが終了させ、区切り文字を設定します</li>
</ul>
</li>
<li><code>writer.close</code>で閉じたストリームを更新することはできない</li>
</ul>


<h2>親子プロセスでのパイプ</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">reader</span><span class="p">,</span> <span class="n">writer</span> <span class="o">=</span> <span class="no">IO</span><span class="o">.</span><span class="n">pipe</span>
</span><span class='line'><span class="c1"># reader =&gt; #&lt;IO:fd 7&gt;</span>
</span><span class='line'><span class="c1"># writer =&gt; #&lt;IO:fd 8&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># forkにより子プロセスを生成</span>
</span><span class='line'><span class="nb">fork</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">reader</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>  <span class="mi">10</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">writer</span><span class="o">.</span><span class="n">write</span> <span class="s2">&quot;Another one bite the dust</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'><span class="nb">print</span> <span class="n">reader</span><span class="o">.</span><span class="n">read</span>
</span><span class='line'><span class="c1"># =&gt; Another one bite the dust</span>
</span><span class='line'><span class="c1"># Another one bite the dust</span>
</span><span class='line'><span class="c1"># Another one bite the dust</span>
</span><span class='line'><span class="c1"># Another one bite the dust</span>
</span><span class='line'><span class="c1"># Another one bite the dust</span>
</span><span class='line'><span class="c1"># Another one bite the dust</span>
</span><span class='line'><span class="c1"># Another one bite the dust</span>
</span><span class='line'><span class="c1"># Another one bite the dust</span>
</span><span class='line'><span class="c1"># Another one bite the dust</span>
</span><span class='line'><span class="c1"># Another one bite the dust</span>
</span></code></pre></td></tr></table></div></figure>


<p>親プロセス、子プロセスでは、それぞれ使用しないIOインスタンスをcloseしています。<br/>
これは、子プロセスが親のファイルディクリプタを複製して利用するためです。<br/>
ファイルディスクリプタというのは、ストリームの出入り口をイメージすると分かりやすいかもしれません。<br/>
writerやreaderでwrite/readするためのデータの取り出し口ですね。<br/>
* 親プロセスでは、write処理は行わないため、<code>writer.close</code>をします。<br/>
* forkした子プロセスでは、read処理は行わないため、<code>reader.close</code>をします。<br/>
これで、利用しないファイルディクリプタに影響を与えなくなります。</p>

<h3>親子プロセス両方でreader.close</h3>

<p>forkした子プロセスがwriteする前に、親プロセスで<code>reader.close</code>をすると、どうなるでしょうか。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">reader</span><span class="p">,</span> <span class="n">writer</span> <span class="o">=</span> <span class="no">IO</span><span class="o">.</span><span class="n">pipe</span>
</span><span class='line'>
</span><span class='line'><span class="nb">fork</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">reader</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>  <span class="mi">10</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">writer</span><span class="o">.</span><span class="n">write</span> <span class="s2">&quot;Another one bite the dust</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="c1"># =&gt; `write&#39;: Broken pipe (Errno::EPIPE)が発生</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">reader</span><span class="o">.</span><span class="n">close</span> <span class="c1"># この行を追加</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'><span class="nb">print</span> <span class="n">reader</span><span class="o">.</span><span class="n">read</span>
</span></code></pre></td></tr></table></div></figure>


<p>親子でreader.closeをすると、書き込んだ情報の出力先がなくなります。<br/>
そのため、子プロセスで書き込みをするとエラーが発生します。</p>

<h2>補足:ストリーム</h2>

<p>スラッシュドットの以下の記事がイメージしやすかったです。
<a href="http://slashdot.jp/journal/160355/TCP%E3%81%A8UDP%E3%81%AE%E9%81%95%E3%81%84">gatekeeperの日記： TCPとUDPの違い</a></p>

<blockquote><p>ストリーム型というのは１個のデーターをためておく場所（ストリーム）があって、
ストリームの性質としては最初に入れたデーターが最初に出てくる。（要はFIFOだな）
&hellip;
それがどういうことになるかというと、ストリーム型では何回かに分けて書き込んだデーターを一気に読み込んだり、
一気に読み込んだり、 逆に一度に書き込んだデーターを細切れで読み出したりできる。
つまり、読み書きの境界はストリームに入った時点で保存されない。</p></blockquote>

<p>ストリームはデータを溜めておく場所で、明示的に終了したよって宣言しないと、データの区切りが分からないものなんですね。<br/>
<code>close</code>することで、データの境界を設定します。<br/>
それまでは好きなだけ<code>write</code>でデータを溜め込みます。<br/>
しかし、<code>read</code>するためには、<code>close</code>でデータの区切りを宣言しないといけません。<br/>
宣言しない限り<code>read</code>でのデータの読み込み処理は完了しないんですね。</p>
]]></content>
  </entry>
  
</feed>
