(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{Bl7J:function(e,t,n){"use strict";var a=n("dwav"),b=n("q1tI"),c=n.n(b),r=n("Wbzz"),l=function(e){var t=e.siteTitle;return c.a.createElement("header",{style:{background:"white",marginBottom:"1.45rem"}},c.a.createElement("div",{style:{margin:"0 auto",maxWidth:960,padding:"1.45rem 1.0875rem"}},c.a.createElement("h1",{style:{margin:0}},c.a.createElement(r.Link,{to:"/",style:{color:"black",textDecoration:"none"}},t))))};l.defaultProps={siteTitle:""};var p=l;n("8ypT"),t.a=function(e){var t=e.children,n=a.data;return c.a.createElement(c.a.Fragment,null,c.a.createElement(p,{siteTitle:n.site.siteMetadata.title}),c.a.createElement("div",{style:{margin:"0 auto",maxWidth:960,padding:"0 1.0875rem 1.45rem"}},c.a.createElement("main",null,t),c.a.createElement("footer",null,"© ",(new Date).getFullYear(),", Built with"," ",c.a.createElement("a",{href:"https://www.gatsbyjs.org"},"Gatsby"),"by ",n.site.siteMetadata.author)))}},Xs2J:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return c})),n.d(t,"default",(function(){return p}));n("rGqo"),n("yt8O"),n("Btvt"),n("RW0V"),n("91GP"),n("q1tI");var a=n("7ljp"),b=n("Bl7J");var c={},r={_frontmatter:c},l=b.a;function p(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,b={},c=Object.keys(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||(b[n]=e[n]);return b}(e,["components"]);return Object(a.b)(l,Object.assign({},r,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,Object(a.b)("a",Object.assign({parentName:"p"},{href:"http://www.adventar.org/calendars/582"}),"よちよち.rb Advent Calendar 2014")," 8日目の記事です。",Object(a.b)("br",{parentName:"p"}),"\n","昨日は、bonbon0605さんの",Object(a.b)("a",Object.assign({parentName:"p"},{href:"http://genius.hateblo.jp/entry/2014/12/07/093454"}),"2014年に読んだり積んだりした本とその思い出を振り返ります"),"、でした。",Object(a.b)("br",{parentName:"p"}),"\n","Ruby初学者がワンステップレベルアップする時に参考となる良書を紹介していただきました！"),Object(a.b)("p",null,"さて、今日はRspecのとあるメソッドから学んだ、mockとstubの違いについて書きます。  mockとstubの違いは、少し前に参加したよちよち.rbで疑問のまま終わってしまっていました。    "),Object(a.b)("p",null,"最近になってRubyとRailsの仕事に関わっているのですが、Rspecに苦戦しています。",Object(a.b)("br",{parentName:"p"}),"\n","Rspecを使っている時に、次の２つのメソッドに出会いました。"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"allow(object).to receive(:hoge).and_return('fuga')  ",Object(a.b)("a",Object.assign({parentName:"li"},{href:"https://relishapp.com/rspec/rspec-mocks/v/3-1/docs/basics/allowing-messages"}),"参考")),Object(a.b)("li",{parentName:"ul"},"expect(object).to receive(:hoge).and_return('fuga') ",Object(a.b)("a",Object.assign({parentName:"li"},{href:"https://relishapp.com/rspec/rspec-mocks/v/3-1/docs/basics/expecting-messages"}),"参考"))),Object(a.b)("p",null,"この使い分けを知る過程でstubとmockの違いが自分の中でイメージできてきました。  "),Object(a.b)("p",null,"まずは、上記２つのメソッドの使い方を非常に単純な例に落とし込んでみます。"),Object(a.b)("p",null,"上記はメソッドはどちらも、",Object(a.b)("inlineCode",{parentName:"p"},"object.hoge"),"ってメソッドを呼び出すと、戻り値が",Object(a.b)("inlineCode",{parentName:"p"},"fuga"),"となります。",Object(a.b)("br",{parentName:"p"}),"\n","さて、どう違うのか、試してみます。"),Object(a.b)("h1",null,"事前準備"),Object(a.b)("p",null,"問題を単純化します。(逆にわかりづらいかもしれないし、ソースコード減らしたかったのであまりいい書き方ではありません)",Object(a.b)("br",{parentName:"p"}),"\n",Object(a.b)("inlineCode",{parentName:"p"},"true"),"と",Object(a.b)("inlineCode",{parentName:"p"},"false"),"を返すだけのprivateメソッドとそのラッパーメソッドを用意します。"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-rb"}),"class MockAndStub\n  def always_true\n    return truthy\n  end\n\n  def always_false\n    return falsey\n  end\n\n  private\n  def truthy\n    true\n  end\n\n  def falsey\n    false\n  end\nend\n")),Object(a.b)("p",null,"それと、テストクラスです。"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{}),"describe MockAndStub do\n  let(:obj) { MockAndStub.new }\n  \n  # publicメソッドの戻り値が正しいことを確認\n  context 'do not use stub and mock' do\n    it { expect(obj.always_true).to be_truthy }\n    it { expect(obj.always_false).to be_falsey }\n  end\nend\n")),Object(a.b)("p",null,"準備ができました。まずは",Object(a.b)("inlineCode",{parentName:"p"},"allow"),"から見ていきましょう。"),Object(a.b)("h1",null,"allow(object).to receive(:hoge).and_return('fuga')"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"allow"),"はstubとして働きます。",Object(a.b)("br",{parentName:"p"}),"\n",Object(a.b)("inlineCode",{parentName:"p"},"allow"),"を使うと、上述の説明どおり、",Object(a.b)("inlineCode",{parentName:"p"},"object.hoge"),"というメソッドを呼び出すと、",Object(a.b)("inlineCode",{parentName:"p"},"fuga"),"が返ってきます。  "),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-rb"}),"  ...\n  context 'use stub' do\n    # 1. fail\n    before(:each) { allow(obj).to receive(:truthy).and_return(false) }\n    it { expect(obj.always_true).to be_truthy }\n\n    # 2. success\n    before(:each) { allow(obj).to receive(:falsey).and_return(true) }\n    it { expect(obj.always_false).to be_truthy }    \n  end\n\n  context 'use stub, but not use' do\n    # 3. success\n    before(:each) { allow(obj).to receive(:falsey).and_return(true) }\n    it { expect(obj.always_true).to be_truthy }\n  end\n  ...\n")),Object(a.b)("h2",null,"1. fail"),Object(a.b)("p",null,"１のパターンのテストはfailします。",Object(a.b)("br",{parentName:"p"}),"\n",Object(a.b)("inlineCode",{parentName:"p"},"allow(obj).to receive(:truthy).and_return(false)"),"とすると、",Object(a.b)("inlineCode",{parentName:"p"},"obj"),"が",Object(a.b)("inlineCode",{parentName:"p"},":truthy"),"というメソッドコールを受け取ったら、必ず",Object(a.b)("inlineCode",{parentName:"p"},"false"),"が返ってきます。",Object(a.b)("br",{parentName:"p"}),"\n",Object(a.b)("inlineCode",{parentName:"p"},"always_true"),"は内部で",Object(a.b)("inlineCode",{parentName:"p"},":truthy"),"を呼び出しているので、戻り値は",Object(a.b)("inlineCode",{parentName:"p"},"false"),"となります。",Object(a.b)("br",{parentName:"p"}),"\n","よって、",Object(a.b)("inlineCode",{parentName:"p"},"obj.always_true"),"は",Object(a.b)("inlineCode",{parentName:"p"},"false"),"なので、failします。"),Object(a.b)("h2",null,"2. success"),Object(a.b)("p",null,"今度はsuccessです。",Object(a.b)("inlineCode",{parentName:"p"},":falsey"),"は",Object(a.b)("inlineCode",{parentName:"p"},"true"),"を返すと設定しているので、",Object(a.b)("inlineCode",{parentName:"p"},"obj.always_false"),"は",Object(a.b)("inlineCode",{parentName:"p"},"true"),"となります。"),Object(a.b)("h2",null,"3. success"),Object(a.b)("p",null,"次はテストに関係無いメソッドをstub化した場合です。これも、関係ないのでsuccessになります。"),Object(a.b)("p",null,"上記のように、",Object(a.b)("inlineCode",{parentName:"p"},"A: allow"),"はメソッドコールがあった時に指定した値を利用してテストすることができます。  "),Object(a.b)("h1",null,"expect(object).to receive(:hoge).and_return('fuga')"),Object(a.b)("p",null,"続いて",Object(a.b)("inlineCode",{parentName:"p"},"expect"),"で、こちらはmockです。",Object(a.b)("br",{parentName:"p"}),"\n",Object(a.b)("inlineCode",{parentName:"p"},"allow"),"と",Object(a.b)("inlineCode",{parentName:"p"},"expect"),"の違いは、メソッドコールの検証の有無です。",Object(a.b)("inlineCode",{parentName:"p"},"expect"),"では",Object(a.b)("inlineCode",{parentName:"p"},"receive"),"で指定したメソッドが呼び出されていない場合、failします。  "),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-rb"}),"  ...\n  context 'use mock' do\n    context 'use mock, and not use' do\n      # 4. fail\n      before(:each) { expect(obj).to receive(:falsey).and_return(true) }\n      it { expect(obj.always_true).to be_truthy }\n    end\n\n    context 'use mock, and use' do\n      # 5. success\n      before(:each) { expect(obj).to receive(:falsey).and_return(true) }\n      it { expect(obj.always_false).to be_truthy }\n    end\n  end\n  ...\n")),Object(a.b)("h2",null,"4. fail"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"receive"),"で指定したメソッドを呼び出さない場合です。",Object(a.b)("br",{parentName:"p"}),"\n","itのブロック自体は正しいため、beforeの",Object(a.b)("inlineCode",{parentName:"p"},"expect"),"を",Object(a.b)("inlineCode",{parentName:"p"},"allow"),"に変えるか、",Object(a.b)("inlineCode",{parentName:"p"},"before"),"自体を消すとsuccessになります。"),Object(a.b)("h2",null,"5. success"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"receive"),"で指定したメソッドを呼び出しています。",Object(a.b)("br",{parentName:"p"}),"\n","値を",Object(a.b)("inlineCode",{parentName:"p"},"true"),"に変更した上で、",Object(a.b)("inlineCode",{parentName:"p"},"true"),"になっていることを確認しているので、successとなります。"),Object(a.b)("h1",null,"まとめ"),Object(a.b)("p",null,"allowのexpectの違いはメソッドコールの検査になります。これを踏まえた上で、下の記事を読むとなるほど！と思うことができました。  "),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object.assign({parentName:"li"},{href:"http://techracho.bpsinc.jp/hachi8833/2014_07_10/17971"}),"http://techracho.bpsinc.jp/hachi8833/2014_07_10/17971")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object.assign({parentName:"li"},{href:"http://aligach.net/diary/20110109.html"}),"http://aligach.net/diary/20110109.html")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object.assign({parentName:"li"},{href:"http://d.hatena.ne.jp/takihiro/20081023/1224762895"}),"http://d.hatena.ne.jp/takihiro/20081023/1224762895"))),Object(a.b)("p",null,"つまり、stubとmockの違いは、インターフェースの検査(メソッドコールのチェック)をするかしないか、ということですね。  "),Object(a.b)("p",null,"ところで、2つの違いはわかったけれど、「どう使い分ければいいのか」が実はもっと大事です。",Object(a.b)("br",{parentName:"p"}),"\n","ただ、これはテストに依存するため、確認すべきことは何か、を意識しながら切り分ける必要があります。",Object(a.b)("br",{parentName:"p"}),"\n",Object(a.b)("a",Object.assign({parentName:"p"},{href:"http://d.hatena.ne.jp/devbankh/"}),'Martin Fowlerの"Mocks Aren’t Stubs"の翻訳記事'),"があって、非常に長い上に全容を理解しきれていないのですが、"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"振る舞いの結びつきを意識しなければいけないか")),Object(a.b)("p",null,"という点が判断材料になるかと思います。",Object(a.b)("br",{parentName:"p"}),"\n","あと、"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"モックオブジェクトはXPコミュニティから出てきたものだ。また、XPの主な特徴の一つは、テストドリブン開発を重要視していることだ。テストドリブン開発では、テストを書くことで推進される反復を通じてシステム設計も進んでいく。\nそういったわけで、モックオブジェクトの支持者達が相互作用テストの設計における効果についてことさら語るのも驚くことではない。このスタイルでは、主要なオブジェクトに対する最初のテストを書くから ","[それらのオブジェクトの]"," 振る舞いの開発を始めることになる。")),Object(a.b)("p",null,"とあるので、TDDするならmock使うでいいと思います。  "),Object(a.b)("p",null,"ひとまず、色々試してみて、気になることがあれば、また何か書くかもしれません。"),Object(a.b)("h1",null,"最後に"),Object(a.b)("p",null,"そして、今日は",Object(a.b)("a",Object.assign({parentName:"p"},{href:"http://yochiyochirb.doorkeeper.jp/events/18227"}),'よちよち.rb 第48回 "よちよちもくもく会"'),"です(予定があって行けなくて残念)  "),Object(a.b)("p",null,"プログラミング未経験でも参加できる一番初心者に優しいRubyの勉強会、もといコミュニティです。",Object(a.b)("br",{parentName:"p"}),"\n","後一枠余っているので、試しに参加して楽しんでみてください。",Object(a.b)("br",{parentName:"p"}),"\n","当日キャンセルがちょこっと出たりすることが多いので、満席でもキャンセル待ちにしておくと、いいことがあるかもしれません。  "),Object(a.b)("p",null,"明日はまだ決まっていません...(紹介したかった...) # TODO:誰か現れたら更新するかも",Object(a.b)("br",{parentName:"p"}),"\n","きっと今日参加する誰かが書いてくれるはずです。",Object(a.b)("br",{parentName:"p"}),"\n","楽しみにお待ち下さい。  "))}p.isMDXComponent=!0},dwav:function(e){e.exports=JSON.parse('{"data":{"site":{"siteMetadata":{"title":"jangajan.com","author":"@ta1kt0me"}}}}')}}]);
//# sourceMappingURL=component---src-pages-2014-12-08-expect-and-allow-in-rspec-md-1abc355a1a7857576584.js.map