(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{Bl7J:function(e,n,t){"use strict";var a=t("dwav"),r=t("q1tI"),l=t.n(r),c=t("Wbzz"),p=function(e){var n=e.siteTitle;return l.a.createElement("header",{style:{background:"white",marginBottom:"1.45rem"}},l.a.createElement("div",{style:{margin:"0 auto",maxWidth:960,padding:"1.45rem 1.0875rem"}},l.a.createElement("h1",{style:{margin:0}},l.a.createElement(c.Link,{to:"/",style:{color:"black",textDecoration:"none"}},n))))};p.defaultProps={siteTitle:""};var b=p;t("8ypT"),n.a=function(e){var n=e.children,t=a.data;return l.a.createElement(l.a.Fragment,null,l.a.createElement(b,{siteTitle:t.site.siteMetadata.title}),l.a.createElement("div",{style:{margin:"0 auto",maxWidth:960,padding:"0 1.0875rem 1.45rem"}},l.a.createElement("main",null,n),l.a.createElement("footer",null,"© ",(new Date).getFullYear(),", Built with"," ",l.a.createElement("a",{href:"https://www.gatsbyjs.org"},"Gatsby"),"by ",t.site.siteMetadata.author)))}},XUUs:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return l})),t.d(n,"default",(function(){return b}));t("rGqo"),t("yt8O"),t("Btvt"),t("RW0V"),t("91GP"),t("q1tI");var a=t("7ljp"),r=t("Bl7J");var l={},c={_frontmatter:l},p=r.a;function b(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,["components"]);return Object(a.b)(p,Object.assign({},c,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Rubyでのパフォーマンス改善に挑戦してみます。\nやることとしては以下に絞って確認してみます。"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"benchmarkを使って実行時間を計測"),Object(a.b)("li",{parentName:"ul"},"stackprofを使ってメソッドの呼び出し状況を確認")),Object(a.b)("p",null,"例えば、Railsアプリで、PostsController#indexでDBからPostをランダムに10件取得する処理があるとします。\nちなみに、",Object(a.b)("inlineCode",{parentName:"p"},"posts"),"テーブルには10万件のレコードがあります。"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-rb"}),"class PostsController < ApplicationController\n  def index\n    @posts = Post.all.sample(10)\n  end\nend\n")),Object(a.b)("h1",null,"計測用モジュールを作成する"),Object(a.b)("p",null,"Ruby2.2には",Object(a.b)("inlineCode",{parentName:"p"},"prepend"),"という計測時に便利なメソッドが追加されました。"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"#{app.root}/lib"),"に、",Object(a.b)("inlineCode",{parentName:"p"},"app_performance.rb"),"という計測用のモジュールを追加してみます。"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-rb"}),"module AppPerformance\n  def index\n    p '始まるよ'\n    super\n    p '終わるよ'\n  end\nend\n")),Object(a.b)("p",null,"ついでに、",Object(a.b)("inlineCode",{parentName:"p"},"autoload_paths"),"に",Object(a.b)("inlineCode",{parentName:"p"},"#{Rails.root}/lib"),"を追加するのを忘れないでください。\nそして、",Object(a.b)("inlineCode",{parentName:"p"},"PostsController"),"側でこの",Object(a.b)("inlineCode",{parentName:"p"},"AppPerfonce"),"モジュールを",Object(a.b)("inlineCode",{parentName:"p"},"prepend"),"してみます。"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-rb"}),"class PostsController < ApplicationController\n  prepend AppPerformance\n\n  def index\n    @posts = Post.all.sample(10)\n  end\nend\n")),Object(a.b)("p",null,"これでindexページにアクセスしてみましょう。ログがSQLの前後に表示されていることが確認できますね。"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{}),'Started GET "/posts" for 127.0.0.1 at 2015-11-22 14:30:54 +0900\nProcessing by PostsController#index as HTML\n"始まるよ"\n  Post Load (773.0ms)  SELECT "posts".* FROM "posts"  ORDER BY "posts"."published_at" DESC\n"終わるよ"\n  Rendered posts/index.html.erb within layouts/application (3.0ms)\nCompleted 200 OK in 1943ms (Views: 45.3ms | ActiveRecord: 773.5ms)\n')),Object(a.b)("p",null,"準備が整ったので",Object(a.b)("inlineCode",{parentName:"p"},"index"),"の処理時間を確認してみましょう。"),Object(a.b)("h1",null,"処理時間を計測する"),Object(a.b)("p",null,Object(a.b)("a",Object.assign({parentName:"p"},{href:"http://docs.ruby-lang.org/ja/2.2.0/library/benchmark.html"}),"benchmark"),"ライブラリを使用してみます。"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-rb"}),"module AppPerformance\n  def index\n    result = Benchmark.measure do\n      super\n    end\n    File.open('tmp/benchmark_before.txt', 'w') {|f| f.write(result) }\n  end\nend\n")),Object(a.b)("p",null,"実行結果を確認してみます。"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{}),"$ cat tmp/benchmark_before.txt\n1.710000   0.110000   1.820000 (  2.208176) )\n")),Object(a.b)("p",null,"カッコ内が呼び出しから実行までにかかった時間です。\n",Object(a.b)("inlineCode",{parentName:"p"},"2.20"),"はだいぶかかっていますねー。"),Object(a.b)("h1",null,"関数の呼び出し状況を計測する"),Object(a.b)("p",null,"次に、",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/tmm1/stackprof"}),"stackprof"),"を利用して関数の呼び出し状況を確認してみましょう。"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"stackprof"),"をインストールします。"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-sh"}),"echo \"gem 'stackprof' >> Gemfile\"\nbundle install\n")),Object(a.b)("p",null,"次に",Object(a.b)("inlineCode",{parentName:"p"},"app_performance.rb"),"を修正します。"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-rb"}),"module AppPerformance\n  def index\n    result = Benchmark.measure do\n      StackProf.run(mode: :cpu, raw: true, out: \"tmp/stackprof-cpu_before.dump\") do\n        super\n      end\n    end\n    File.open('tmp/benchmark_before.txt', 'w') {|f| f.write(result) }\n  end\nend\n")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"stackprof"),"コマンドで実行結果を確認します。"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-sh"}),"$ bundle exec stackprof --text tmp/stackprof-cpu_before.dump --limit 5\n==================================\n  Mode: cpu(1000)\n  Samples: 1236 (0.00% miss rate)\n  GC: 440 (35.60%)\n==================================\n     TOTAL    (pct)     SAMPLES    (pct)     FRAME\n       319  (25.8%)         319  (25.8%)     block in SQLite3::Statement#each\n       151  (12.2%)         151  (12.2%)     block in ActiveRecord::Result#hash_rows\n       325  (26.3%)          85   (6.9%)     block in ActiveRecord::Result#each\n        67   (5.4%)          67   (5.4%)     ActiveRecord::Core#init_internals\n        62   (5.0%)          31   (2.5%)     ActiveRecord::ModelSchema::ClassMethods#inheritance_column==================================\n")),Object(a.b)("p",null,"使用率の高い上位5つのメソッドを表示しました。当然ですが、ARやDB周りのメソッド呼び出しが多いですね。"),Object(a.b)("h1",null,"改善"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"sample"),"の利用をやめて、DBで事前にソートするようにしました。\nDB依存のコードになってしまいますが、余計な処理を省くためにsqlite3の",Object(a.b)("inlineCode",{parentName:"p"},"RANDOM()"),"関数を使用します。"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-rb"}),"class PostsController < ApplicationController\n  prepend AppPerformance\n\n  def index\n    @posts = Post.order('RANDOM()').take(10)\n  end\nend\n")),Object(a.b)("p",null,"結果はこちら。"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{}),"$ cat tmp/benchmark_after.txt\n  0.090000   0.060000   0.150000 (  0.252615)\n\n$ bundle exec stackprof --text tmp/stackprof-cpu_after.dump --limit 5\n==================================\n  Mode: cpu(1000)\n  Samples: 18 (86.47% miss rate)\n  GC: 0 (0.00%)\n==================================\n     TOTAL    (pct)     SAMPLES    (pct)     FRAME\n         3  (16.7%)           3  (16.7%)     ActiveRecord::Core::ClassMethods#arel_table\n         2  (11.1%)           2  (11.1%)     ActiveRecord::Base.logger\n         2  (11.1%)           2  (11.1%)     block in SQLite3::Statement#each\n         1   (5.6%)           1   (5.6%)     Arel::Collectors::PlainString#<<\n         1   (5.6%)           1   (5.6%)     block in SQLite3::Statement#get_metadata\n")),Object(a.b)("p",null,"ちなみに",Object(a.b)("inlineCode",{parentName:"p"},"take"),"ではなく",Object(a.b)("inlineCode",{parentName:"p"},"limit"),"を利用すると、計測数値はさらに向上します。(",Object(a.b)("inlineCode",{parentName:"p"},"render"),"処理での実行時間は遅くなりますが)"),Object(a.b)("p",null,"だいぶ極端な例になりましたが、",Object(a.b)("inlineCode",{parentName:"p"},"benchmark"),"や",Object(a.b)("inlineCode",{parentName:"p"},"stackprof"),"を利用することで、改善のポイントや勘所が絞り込みやすくなります。\n今回試してみて思ったのはテストしやすいコードは計測しもしやすいコードになりやすそう。\nまた、",Object(a.b)("inlineCode",{parentName:"p"},"prepend"),"メソッドは必要以上の変更をせずにメソッドをフックしたいケースで非常に使いやすいです。"))}b.isMDXComponent=!0},dwav:function(e){e.exports=JSON.parse('{"data":{"site":{"siteMetadata":{"title":"jangajan.com","author":"@ta1kt0me"}}}}')}}]);
//# sourceMappingURL=component---src-pages-2015-11-22-profile-ruby-md-8b88fd8fd5ed3db5615a.js.map