{"version":3,"sources":["webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./src/pages/2014-09-07-unix-thread-socket-server-in-ruby.md"],"names":["Header","siteTitle","style","background","marginBottom","margin","maxWidth","padding","to","color","textDecoration","defaultProps","Layout","children","data","site","siteMetadata","title","Date","getFullYear","href","author","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"4IAIMA,EAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OACb,4BACEC,MAAO,CACLC,WAAW,QACXC,aAAa,YAGf,yBACEF,MAAO,CACLG,OAAO,SACPC,SAAU,IACVC,QAAQ,sBAGV,wBAAIL,MAAO,CAAEG,OAAQ,IACnB,kBAAC,OAAD,CACEG,GAAG,IACHN,MAAO,CACLO,MAAM,QACNC,eAAe,SAGhBT,OAWXD,EAAOW,aAAe,CACpBV,UAAU,IAGGD,Q,UCWAY,IAtCA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACVC,EAAI,OAWV,OACE,oCACE,kBAAC,EAAD,CAAQb,UAAWa,EAAKC,KAAKC,aAAaC,QAC1C,yBACEf,MAAO,CACLG,OAAO,SACPC,SAAU,IACVC,QAAQ,wBAGV,8BAAOM,GACP,sCACK,IAAIK,MAAOC,cADhB,mBAGE,uBAAGC,KAAK,4BAAR,UAHF,MAIMN,EAAKC,KAAKC,aAAaK,Y,iVCnC9B,IAAMC,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,sCAAqB,kBAAIC,WAAW,MAApC,KACF,+BAAGA,WAAW,KAAQ,CAChB,KAAQ,2CADd,iCAE4C,kBAAIA,WAAW,MAHzD,iDAQA,uCACA,2CAA0B,kBAAIA,WAAW,MAAzC,qDAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,6JAWL,sBACE,kBAAIA,WAAW,MAAf,qDACA,kBAAIA,WAAW,MAAf,+BACA,kBAAIA,WAAW,MAAf,+CAEF,6DAA4C,kBAAIA,WAAW,MAA3D,aACO,0BAAYA,WAAW,KAAvB,MADP,gCAEA,uCACA,oEAAmD,kBAAIA,WAAW,MAAlE,kDAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+MAUL,uCACA,mDAAkC,kBAAIA,WAAW,MAAjD,uCACiC,kBAAIA,WAAW,MADhD,4BAEsB,0BAAYA,WAAW,KAAvB,eAFtB,YAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,iTAcL,oDACA,iEACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,yyBAkCL,+BAAc,0BAAYA,WAAW,KAAvB,UAAd,yCAA0G,kBAAIA,WAAW,MAAzH,oCAC8B,kBAAIA,WAAW,MAD7C,uBAOJJ,EAAWK,gBAAiB","file":"component---src-pages-2014-09-07-unix-thread-socket-server-in-ruby-md-505c63c0fdb5d5f32c58.js","sourcesContent":["import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: `white`,\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `black`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n          author\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: 960,\n          padding: `0 1.0875rem 1.45rem`,\n        }}\n      >\n        <main>{children}</main>\n        <footer>\n          © {new Date().getFullYear()}, Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n          by {data.site.siteMetadata.author}\n        </footer>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jangajan.com/jangajan.com/src/components/layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`積読消化シリーズの派生です。`}<br parentName=\"p\"></br>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"http://tatsu-zine.com/books/naruhounix\"\n      }}>{`なるほどUnixプロセス ― Rubyで学ぶUnixの基礎`}</a><br parentName=\"p\"></br>{`\n`}{`processをforkして動くWebサーバーをThreadで試してみます。  `}</p>\n    {\n      /* more */\n    }\n    <h1>{`Threadの簡単な使い方`}</h1>\n    <p>{`まずはThreadの簡単な使い方です。`}<br parentName=\"p\"></br>{`\n`}{`一部違いはあるものの、書き方はProcessのfork処理と大きく差はありませんね。  `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`t1 = Thread.start {\n   puts \"スレッド1 id : #{Thread.current}\"\n   sleep 1\n}\n\n# t1が終わるまではメインスレッドが待ちになる\nt1.join\nputs \"メインスレッド id : #{Thread.current}\"\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Thread.start{...}とすると、新しいThreadを生成してブロックを実行します。  `}</li>\n      <li parentName=\"ul\">{`メインスレッドが終了すると、Threadも終了します。`}</li>\n      <li parentName=\"ul\">{`Thread#joinを実行すると、対象のThreadの処理が終了するまで待ちます。`}</li>\n    </ul>\n    <p>{`ちなみに、Threadはメインスレッドと同じProcessで実行されます。`}<br parentName=\"p\"></br>{`\n`}{`そのため、`}<inlineCode parentName=\"p\">{`ps`}</inlineCode>{`でrubyのプロセスを確認すると一つしかありません。  `}</p>\n    <h1>{`Threadローカルな変数`}</h1>\n    <p>{`処理プロセスが同じということは、Thread内の処理で変数は共有されることになりますね。`}<br parentName=\"p\"></br>{`\n`}{`Threadローカルにするためには、Thread.startの引数に渡します。  `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`access_count = 0\nt1 = Thread.start(access_count) {|ac|\n   puts \"スレッド1 id : #{Thread.current} #{ac += 1}\" => 1\n   sleep 1\n}\nt1.join\nputs \"メインスレッド id : #{Thread.current} #{access_count += 1}\" => 1\n`}</code></pre>\n    <h1>{`複数Threadを待ちたい`}</h1>\n    <p>{`Thread#joinは特定のThreadを待ちます。`}<br parentName=\"p\"></br>{`\n`}{`Webサーバーの例では複数のProcessを管理していました。`}<br parentName=\"p\"></br>{`\n`}{`同様のことをThreadで実行するには、`}<inlineCode parentName=\"p\">{`ThreadsWait`}</inlineCode>{`を使います。  `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`require 'thwait'\nworker_threads = []\n5.times {\n  worker_threads << Thread.start {\n     puts \"スレッド1 id : #{Thread.current} \"\n     sleep 1\n  }\n}\n# ThreadsWait.all_waitsで全てのThreadの処理終了を待つ\nThreadsWait.all_waits(worker_threads)\nputs \"メインスレッド id : #{Thread.current} #{access_count += 1}\" => 1\n`}</code></pre>\n    <h1>{`複数Threadでリクエストを処理するWebサーバー`}</h1>\n    <p>{`それでは上記を踏まえて、複数Threadで処理するWebサーバーを書いてみます。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`#!/usr/bin/env ruby\n\nrequire 'socket'\nrequire 'time'\nrequire 'thwait'\n\nsocket = TCPServer.open '127.0.0.1', 8080\n\naccess_count = 0\n\nworker_threads = []\n5.times {\n  # access_countはThreadローカルにする\n  worker_threads << Thread.start(access_count){|ac|\n    # threadの処理\n    loop {\n      response_body = \"Hello Browser! #{ac += 1}\"\n      connection = socket.accept\n      connection.puts ['HTTP/1.1 200 OK',\n                     \"Date: #{Time.now.httpdate}\",\n                     'Server: Ruby',\n                     'Content-Type: text/html; charset=utf-8',\n                     \"Content-Length: #{response_body.length}\\\\r\\\\n\\\\r\\\\n\"].join(\"\\\\r\\\\n\")\n      connection.puts response_body\n      connection.close\n    }\n  }\n}\n\n# メインスレッドを待ちにする\nThreadsWait.all_waits(worker_threads)\n`}</code></pre>\n    <p>{`実際のところ、`}<inlineCode parentName=\"p\">{`socket`}</inlineCode>{`を複数Threadで共有した場合どうなるか、とかは調査する必要がありますね。`}<br parentName=\"p\"></br>{`\n`}{`ただ、Threadで置き換えることもできたということで。`}<br parentName=\"p\"></br>{`\n`}{`これでも一応動きます。  `}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}