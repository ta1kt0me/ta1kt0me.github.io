{"version":3,"sources":["webpack:///./src/pages/2014-10-04-acts-as-taggable-on-in-rails.md","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent","Header","siteTitle","style","background","marginBottom","margin","maxWidth","padding","to","color","textDecoration","defaultProps","Layout","children","data","site","siteMetadata","title","Date","getFullYear","href","author"],"mappings":"kRAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,2DAA0C,kBAAIC,WAAW,MAAzD,KACF,0BAAYA,WAAW,KAAvB,uBADE,4CAC0G,kBAAIA,WAAW,MADzH,wBAGA,qCACA,sBACE,kBAAIA,WAAW,MAAf,eACA,kBAAIA,WAAW,MAAf,iBACA,kBAAIA,WAAW,MAAf,8BAEF,+BAAc,+BAAGA,WAAW,KAAQ,CAChC,KAAQ,iEADE,UAAd,YAMA,+BACA,0DAAyC,kBAAIA,WAAW,MAAxD,cACQ,0BAAYA,WAAW,KAAvB,iBADR,qBACuF,kBAAIA,WAAW,MADtG,+BAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,cACb,WAAc,qBACd,sBAAsB,IAHrB,4GAUL,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,cACb,WAAc,qBACd,sBAAsB,IAHrB,0FAUL,8BACA,uCAAsB,kBAAIA,WAAW,MAArC,wBACkB,kBAAIA,WAAW,MADjC,wCAEkC,0BAAYA,WAAW,KAAvB,cAFlC,WAEoG,kBAAIA,WAAW,MAFnH,uCAGiC,kBAAIA,WAAW,MAHhD,6EAKA,sBACE,kBAAIA,WAAW,MAAf,gBACA,kBAAIA,WAAW,MAAf,kBAEF,2CACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBACb,WAAc,kCACd,mCAAmC,IAHlC,mRAYL,qEACA,oCACA,mEAAoD,kBAAIA,WAAW,MAAnE,KACF,0BAAYA,WAAW,KAAvB,UADE,mBACoE,0BAAYA,WAAW,KAAvB,gBADpE,uBAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,cACb,WAAc,sCACd,uCAAuC,IAHtC,+mBA6BL,iDAAgC,kBAAIA,WAAW,MAA/C,qCAEA,4BACA,+CACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,qEASTJ,EAAWK,gBAAiB,G,mFChItBC,EAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OACb,4BACEC,MAAO,CACLC,WAAW,QACXC,aAAa,YAGf,yBACEF,MAAO,CACLG,OAAO,SACPC,SAAU,IACVC,QAAQ,sBAGV,wBAAIL,MAAO,CAAEG,OAAQ,IACnB,kBAAC,OAAD,CACEG,GAAG,IACHN,MAAO,CACLO,MAAM,QACNC,eAAe,SAGhBT,OAWXD,EAAOW,aAAe,CACpBV,UAAU,IAGGD,Q,UCWAY,IAtCA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACVC,EAAI,OAWV,OACE,oCACE,kBAAC,EAAD,CAAQb,UAAWa,EAAKC,KAAKC,aAAaC,QAC1C,yBACEf,MAAO,CACLG,OAAO,SACPC,SAAU,IACVC,QAAQ,wBAGV,8BAAOM,GACP,sCACK,IAAIK,MAAOC,cADhB,mBAGE,uBAAGC,KAAK,4BAAR,UAHF,MAIMN,EAAKC,KAAKC,aAAaK,Y","file":"component---src-pages-2014-10-04-acts-as-taggable-on-in-rails-md-9c3126e30f58f0f0741d.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jangajan.com/jangajan.com/src/components/layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`ユーザーに紐づくタスクに、タグ付けをするという機能を実現する方法です。`}<br parentName=\"p\"></br>{`\n`}<inlineCode parentName=\"p\">{`acts-as-taggable-on`}</inlineCode>{`というgemを利用することで簡単(苦戦した...)にタグ機能は実現できるそうです。`}<br parentName=\"p\"></br>{`\n`}{`なんとかできたっぽい...  `}</p>\n    <p>{`環境は、こんな感じです。`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Rails 4.1.6`}</li>\n      <li parentName=\"ul\">{`ruby 2.1.2p95`}</li>\n      <li parentName=\"ul\">{`acts-as-taggable-on 3.4.2`}</li>\n    </ul>\n    <p>{`Githubの`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/mbleigh/acts-as-taggable-on#tag-ownership\"\n      }}>{`README`}</a>{`を参考にしました`}</p>\n    {\n      /* more */\n    }\n    <h1>{`Model`}</h1>\n    <p>{`そもそもリレーション関係の設定でハマりましたが、これで良さそうです。`}<br parentName=\"p\"></br>{`\n`}{`関係としては`}<inlineCode parentName=\"p\">{`user 1-n task`}</inlineCode>{`となり、taskにタグを設定します。`}<br parentName=\"p\"></br>{`\n`}{`タグは、userごとに別々に管理します。  `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\",\n        \"metastring\": \"app/models/user.rb\",\n        \"app/models/user.rb\": true\n      }}>{`class User < ActiveRecord::Base\n  acts_as_tagger\n  has_many :tasks, dependent: :destroy\n  ...\nend\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\",\n        \"metastring\": \"app/models/task.rb\",\n        \"app/models/task.rb\": true\n      }}>{`class Task < ActiveRecord::Base\n  acts_as_taggable\n  belongs_to :user\n  ...\nend\n`}</code></pre>\n    <h1>{`View`}</h1>\n    <p>{`タグのところだけピックアップ。`}<br parentName=\"p\"></br>{`\n`}{`（簡単なサンプル作れば良かった）`}<br parentName=\"p\"></br>{`\n`}{`画面表示するController内のメソッドで、選択可能なタグを`}<inlineCode parentName=\"p\">{`@user_tags`}</inlineCode>{`に入れています。`}<br parentName=\"p\"></br>{`\n`}{`タグは複数選択可能にするため、checkboxを利用しました。`}<br parentName=\"p\"></br>{`\n`}{`checkbox生成でrailsの仕組みを利用しようとしたのですが、以下の2点を実現しようとしてうまいやり方が見つからなかった...  `}</p>\n    <ul>\n      <li parentName=\"ul\">{`labelでクリック連携`}</li>\n      <li parentName=\"ul\">{`valueの値をタグの名前`}</li>\n    </ul>\n    <p>{`form_for内に記述します。  `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haml\",\n        \"metastring\": \"app/views/tasks/_form.html.haml\",\n        \"app/views/tasks/_form.html.haml\": true\n      }}>{`/ @user_tagsはcontrollerで配列で設定 ex) => [\"tag1\", \"tag2\"]\n- @user_tags.each do |tag|\n  / tagを複数選択可能にするため、checkboxを利用\n  %input{id:\"tag-#{tag}\" ,name:'task[tag_list][]', type:'checkbox',value:\"#{tag}\"}\n  %label{for:\"tag-#{tag}\"}\n    %span.task-tag\n      = \"#{tag}\"\n`}</code></pre>\n    <p>{`タグ付けよりもrailsでcheckbox使うところに時間とられた...宿題ですね。  `}</p>\n    <h1>{`Controller`}</h1>\n    <p>{`リクエストのtask`}{`[tag_list]`}{`という値の中に、タグが含まれます。`}<br parentName=\"p\"></br>{`\n`}<inlineCode parentName=\"p\">{`permit`}</inlineCode>{`で、配列をチェックしたい場合は、`}<inlineCode parentName=\"p\">{`tag_list: []`}</inlineCode>{`と指定してあげる必要がありました。  `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\",\n        \"metastring\": \"app/controllers/tasks_controller.rb\",\n        \"app/controllers/tasks_controller.rb\": true\n      }}>{`class TasksController < ApplicationController\n  ...\n  def create\n    # current_user => User.find(session[:user_id])\n    @task = current_user.tasks.build(task_params)\n    @task.user = current_user\n    # tagの設定処理 :withには'tag1, tag2'という形式の文字列を設定することでタグを登録できる\n    current_user.tag(@task, :with => @task.tag_list.join(', '), :on => :tags)\n    if @task.save\n      # 成功処理\n    else\n      # 失敗処理\n    end\n  end\n  ...\n\n  private\n  def task_params\n    params.require(:task).permit(\n      # tag_list: []を指定することで、checkboxの複数の値を配列にして、tag_listに設定可能になる\n      :id, :name, :deadline, tag_list: []\n    )\n  end\nend\n`}</code></pre>\n    <p>{`もしかしたらもっといいやり方があるかもしれません。`}<br parentName=\"p\"></br>{`\n`}{`気をつける場所はいくつかあるものの、意外と簡単かも。  `}</p>\n    <h1>{`補足`}</h1>\n    <h2>{`ユーザーが設定しているタグの一覧を取得する`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`@user_tags = current_user.owned_tag_list\n=> [\"tag1\", \"tag2\"]\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: `white`,\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `black`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n          author\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: 960,\n          padding: `0 1.0875rem 1.45rem`,\n        }}\n      >\n        <main>{children}</main>\n        <footer>\n          © {new Date().getFullYear()}, Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n          by {data.site.siteMetadata.author}\n        </footer>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}