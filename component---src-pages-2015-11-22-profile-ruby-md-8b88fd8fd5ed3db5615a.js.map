{"version":3,"sources":["webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./src/pages/2015-11-22-profile-ruby.md"],"names":["Header","siteTitle","style","background","marginBottom","margin","maxWidth","padding","to","color","textDecoration","defaultProps","Layout","children","data","site","siteMetadata","title","Date","getFullYear","href","author","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-2015-11-22-profile-ruby-md-8b88fd8fd5ed3db5615a.js","sourcesContent":["import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: `white`,\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `black`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n          author\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: 960,\n          padding: `0 1.0875rem 1.45rem`,\n        }}\n      >\n        <main>{children}</main>\n        <footer>\n          © {new Date().getFullYear()}, Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n          by {data.site.siteMetadata.author}\n        </footer>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jangajan.com/jangajan.com/src/components/layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`Rubyでのパフォーマンス改善に挑戦してみます。\nやることとしては以下に絞って確認してみます。`}</p>\n    <ul>\n      <li parentName=\"ul\">{`benchmarkを使って実行時間を計測`}</li>\n      <li parentName=\"ul\">{`stackprofを使ってメソッドの呼び出し状況を確認`}</li>\n    </ul>\n    {\n      /* more */\n    }\n    <p>{`例えば、Railsアプリで、PostsController#indexでDBからPostをランダムに10件取得する処理があるとします。\nちなみに、`}<inlineCode parentName=\"p\">{`posts`}</inlineCode>{`テーブルには10万件のレコードがあります。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`class PostsController < ApplicationController\n  def index\n    @posts = Post.all.sample(10)\n  end\nend\n`}</code></pre>\n    <h1>{`計測用モジュールを作成する`}</h1>\n    <p>{`Ruby2.2には`}<inlineCode parentName=\"p\">{`prepend`}</inlineCode>{`という計測時に便利なメソッドが追加されました。`}</p>\n    <p><inlineCode parentName=\"p\">{`#{app.root}/lib`}</inlineCode>{`に、`}<inlineCode parentName=\"p\">{`app_performance.rb`}</inlineCode>{`という計測用のモジュールを追加してみます。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`module AppPerformance\n  def index\n    p '始まるよ'\n    super\n    p '終わるよ'\n  end\nend\n`}</code></pre>\n    <p>{`ついでに、`}<inlineCode parentName=\"p\">{`autoload_paths`}</inlineCode>{`に`}<inlineCode parentName=\"p\">{`#{Rails.root}/lib`}</inlineCode>{`を追加するのを忘れないでください。\nそして、`}<inlineCode parentName=\"p\">{`PostsController`}</inlineCode>{`側でこの`}<inlineCode parentName=\"p\">{`AppPerfonce`}</inlineCode>{`モジュールを`}<inlineCode parentName=\"p\">{`prepend`}</inlineCode>{`してみます。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`class PostsController < ApplicationController\n  prepend AppPerformance\n\n  def index\n    @posts = Post.all.sample(10)\n  end\nend\n`}</code></pre>\n    <p>{`これでindexページにアクセスしてみましょう。ログがSQLの前後に表示されていることが確認できますね。`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Started GET \"/posts\" for 127.0.0.1 at 2015-11-22 14:30:54 +0900\nProcessing by PostsController#index as HTML\n\"始まるよ\"\n  Post Load (773.0ms)  SELECT \"posts\".* FROM \"posts\"  ORDER BY \"posts\".\"published_at\" DESC\n\"終わるよ\"\n  Rendered posts/index.html.erb within layouts/application (3.0ms)\nCompleted 200 OK in 1943ms (Views: 45.3ms | ActiveRecord: 773.5ms)\n`}</code></pre>\n    <p>{`準備が整ったので`}<inlineCode parentName=\"p\">{`index`}</inlineCode>{`の処理時間を確認してみましょう。`}</p>\n    <h1>{`処理時間を計測する`}</h1>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"http://docs.ruby-lang.org/ja/2.2.0/library/benchmark.html\"\n      }}>{`benchmark`}</a>{`ライブラリを使用してみます。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`module AppPerformance\n  def index\n    result = Benchmark.measure do\n      super\n    end\n    File.open('tmp/benchmark_before.txt', 'w') {|f| f.write(result) }\n  end\nend\n`}</code></pre>\n    <p>{`実行結果を確認してみます。`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$ cat tmp/benchmark_before.txt\n1.710000   0.110000   1.820000 (  2.208176) )\n`}</code></pre>\n    <p>{`カッコ内が呼び出しから実行までにかかった時間です。\n`}<inlineCode parentName=\"p\">{`2.20`}</inlineCode>{`はだいぶかかっていますねー。`}</p>\n    <h1>{`関数の呼び出し状況を計測する`}</h1>\n    <p>{`次に、`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/tmm1/stackprof\"\n      }}>{`stackprof`}</a>{`を利用して関数の呼び出し状況を確認してみましょう。`}</p>\n    <p><inlineCode parentName=\"p\">{`stackprof`}</inlineCode>{`をインストールします。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`echo \"gem 'stackprof' >> Gemfile\"\nbundle install\n`}</code></pre>\n    <p>{`次に`}<inlineCode parentName=\"p\">{`app_performance.rb`}</inlineCode>{`を修正します。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`module AppPerformance\n  def index\n    result = Benchmark.measure do\n      StackProf.run(mode: :cpu, raw: true, out: \"tmp/stackprof-cpu_before.dump\") do\n        super\n      end\n    end\n    File.open('tmp/benchmark_before.txt', 'w') {|f| f.write(result) }\n  end\nend\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`stackprof`}</inlineCode>{`コマンドで実行結果を確認します。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`$ bundle exec stackprof --text tmp/stackprof-cpu_before.dump --limit 5\n==================================\n  Mode: cpu(1000)\n  Samples: 1236 (0.00% miss rate)\n  GC: 440 (35.60%)\n==================================\n     TOTAL    (pct)     SAMPLES    (pct)     FRAME\n       319  (25.8%)         319  (25.8%)     block in SQLite3::Statement#each\n       151  (12.2%)         151  (12.2%)     block in ActiveRecord::Result#hash_rows\n       325  (26.3%)          85   (6.9%)     block in ActiveRecord::Result#each\n        67   (5.4%)          67   (5.4%)     ActiveRecord::Core#init_internals\n        62   (5.0%)          31   (2.5%)     ActiveRecord::ModelSchema::ClassMethods#inheritance_column==================================\n`}</code></pre>\n    <p>{`使用率の高い上位5つのメソッドを表示しました。当然ですが、ARやDB周りのメソッド呼び出しが多いですね。`}</p>\n    <h1>{`改善`}</h1>\n    <p><inlineCode parentName=\"p\">{`sample`}</inlineCode>{`の利用をやめて、DBで事前にソートするようにしました。\nDB依存のコードになってしまいますが、余計な処理を省くためにsqlite3の`}<inlineCode parentName=\"p\">{`RANDOM()`}</inlineCode>{`関数を使用します。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`class PostsController < ApplicationController\n  prepend AppPerformance\n\n  def index\n    @posts = Post.order('RANDOM()').take(10)\n  end\nend\n`}</code></pre>\n    <p>{`結果はこちら。`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$ cat tmp/benchmark_after.txt\n  0.090000   0.060000   0.150000 (  0.252615)\n\n$ bundle exec stackprof --text tmp/stackprof-cpu_after.dump --limit 5\n==================================\n  Mode: cpu(1000)\n  Samples: 18 (86.47% miss rate)\n  GC: 0 (0.00%)\n==================================\n     TOTAL    (pct)     SAMPLES    (pct)     FRAME\n         3  (16.7%)           3  (16.7%)     ActiveRecord::Core::ClassMethods#arel_table\n         2  (11.1%)           2  (11.1%)     ActiveRecord::Base.logger\n         2  (11.1%)           2  (11.1%)     block in SQLite3::Statement#each\n         1   (5.6%)           1   (5.6%)     Arel::Collectors::PlainString#<<\n         1   (5.6%)           1   (5.6%)     block in SQLite3::Statement#get_metadata\n`}</code></pre>\n    <p>{`ちなみに`}<inlineCode parentName=\"p\">{`take`}</inlineCode>{`ではなく`}<inlineCode parentName=\"p\">{`limit`}</inlineCode>{`を利用すると、計測数値はさらに向上します。(`}<inlineCode parentName=\"p\">{`render`}</inlineCode>{`処理での実行時間は遅くなりますが)`}</p>\n    <p>{`だいぶ極端な例になりましたが、`}<inlineCode parentName=\"p\">{`benchmark`}</inlineCode>{`や`}<inlineCode parentName=\"p\">{`stackprof`}</inlineCode>{`を利用することで、改善のポイントや勘所が絞り込みやすくなります。\n今回試してみて思ったのはテストしやすいコードは計測しもしやすいコードになりやすそう。\nまた、`}<inlineCode parentName=\"p\">{`prepend`}</inlineCode>{`メソッドは必要以上の変更をせずにメソッドをフックしたいケースで非常に使いやすいです。`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}