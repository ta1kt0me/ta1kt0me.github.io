{"version":3,"sources":["webpack:///./src/pages/2014-10-28-which-of-the-class-dose-have-the-method.md","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent","Header","siteTitle","style","background","marginBottom","margin","maxWidth","padding","to","color","textDecoration","defaultProps","Layout","children","data","site","siteMetadata","title","Date","getFullYear","href","author"],"mappings":"kRAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,+CAIA,0CACA,wCAAuB,0BAAYC,WAAW,KAAvB,gBAAvB,WACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,wJAUL,0CACA,qBAAG,0BAAYA,WAAW,KAAvB,kBAAH,8CAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,gNAUL,0KAGA,uCACA,uCAAsB,0BAAYA,WAAW,KAAvB,0BAAtB,sGAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,mbAkBTJ,EAAWK,gBAAiB,G,mFC1EtBC,EAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OACb,4BACEC,MAAO,CACLC,WAAW,QACXC,aAAa,YAGf,yBACEF,MAAO,CACLG,OAAO,SACPC,SAAU,IACVC,QAAQ,sBAGV,wBAAIL,MAAO,CAAEG,OAAQ,IACnB,kBAAC,OAAD,CACEG,GAAG,IACHN,MAAO,CACLO,MAAM,QACNC,eAAe,SAGhBT,OAWXD,EAAOW,aAAe,CACpBV,UAAU,IAGGD,Q,UCWAY,IAtCA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACVC,EAAI,OAWV,OACE,oCACE,kBAAC,EAAD,CAAQb,UAAWa,EAAKC,KAAKC,aAAaC,QAC1C,yBACEf,MAAO,CACLG,OAAO,SACPC,SAAU,IACVC,QAAQ,wBAGV,8BAAOM,GACP,sCACK,IAAIK,MAAOC,cADhB,mBAGE,uBAAGC,KAAK,4BAAR,UAHF,MAIMN,EAAKC,KAAKC,aAAaK,Y","file":"component---src-pages-2014-10-28-which-of-the-class-dose-have-the-method-md-f1a28a8e6b3fa0922065.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jangajan.com/jangajan.com/src/components/layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`メソッドを定義していくクラスを探る方法です。`}</p>\n    {\n      /* more */\n    }\n    <h1>{`定義しているClassを知りたい`}</h1>\n    <p>{`クラス名だけを知りたいのであれば`}<inlineCode parentName=\"p\">{`Method#owner`}</inlineCode>{`を利用します。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`# singleton method\nString.method(:try_convert).owner\n=> #<Class:String>\n\n# instance method\n\"s\".method(:method_missing).owner\n=> BasicObject\n`}</code></pre>\n    <h1>{`もうちょっと詳しい情報が知りたい`}</h1>\n    <p><inlineCode parentName=\"p\">{`Method#inspect`}</inlineCode>{`を使うともう少し詳しい情報を取得できます。\nといってもそんなに大きく変わりません。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`# singleton method\nString.method(:try_convert).inspect\n=> \"#<Method: String.try_convert>\"\n\n# instance method\n\"s\".method(:method_missing).inspect\n=> \"#<Method: String(BasicObject)#method_missing>\"\n`}</code></pre>\n    <p>{`当たり前の話ですが、特異メソッド(クラスメソッド、singleton method)は継承されないですね。\nどいうことかというと、DateTimeクラスでは、Dateクラスの得意メソッドを呼び出せない、ということに気付かされました。\nクラスメソッドに対してownerとかするの意味ねぇ。`}</p>\n    <h1>{`定義している場所を知りたい`}</h1>\n    <p>{`1.9以降(1.9.3?)では`}<inlineCode parentName=\"p\">{`Method#source_location`}</inlineCode>{`というメソッドで、メソッドの定義された具体的な場所の情報が分かります。\nただし、取得できるのはrubyで定義されたものに限るようです。\n(ネイティブで定義されているメソッドの場合nilになる)`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`# singleton method\nActiveRecord::Base.method(:where).source_location\n=> [\"#{APP_ROOT}/vendor/bundle/ruby/2.0.0/gems/activerecord-4.0.2/lib/active_record/querying.rb\", 7]\n\n# instance method\n\"\".method(:blank?).source_location\n=> [\"#{APP_ROOT}/vendor/bundle/ruby/2.0.0/gems/activesupport-4.0.2/lib/active_support/core_ext/object/blank.rb\", 92]\n\n# ネイティブで定義されたメソッドはnilを返す\n\"s\".method(:method_missing).source_location\n=> nil\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: `white`,\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `black`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n          author\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: 960,\n          padding: `0 1.0875rem 1.45rem`,\n        }}\n      >\n        <main>{children}</main>\n        <footer>\n          © {new Date().getFullYear()}, Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n          by {data.site.siteMetadata.author}\n        </footer>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}