{"version":3,"sources":["webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./src/pages/2015-01-05-elasticsearch-study-2.md"],"names":["Header","siteTitle","style","background","marginBottom","margin","maxWidth","padding","to","color","textDecoration","defaultProps","Layout","children","data","site","siteMetadata","title","Date","getFullYear","href","author","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-2015-01-05-elasticsearch-study-2-md-70b448787ff292b15d41.js","sourcesContent":["import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: `white`,\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `black`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n          author\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: 960,\n          padding: `0 1.0875rem 1.45rem`,\n        }}\n      >\n        <main>{children}</main>\n        <footer>\n          © {new Date().getFullYear()}, Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n          by {data.site.siteMetadata.author}\n        </footer>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jangajan.com/jangajan.com/src/components/layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`仕事で使っているので、elasticsearchとは、どう使うのかというところを学んでいきます。`}<br parentName=\"p\"></br>{`\n`}{`とりあえず、`}<a parentName=\"p\" {...{\n        \"href\": \"http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/getting-started.html\"\n      }}>{`Getting Start`}</a>{`こなしていきます。`}</p>\n    {\n      /* more */\n    }\n    <h1>{`Elasticsearchって？`}</h1>\n    <p>{`REST APIでアクセスする、スケーラブルなオープンソースのテキスト検索・解析エンジンです。\nelasticsearchはindexのデータベース(スキーマレスなデータベース)を持っていて、それに対してREST API経由でアクセスしていきます。  `}</p>\n    <h1>{`どうやって使うの？`}</h1>\n    <p>{`@@@インストール方法・起動方法の記事を準備@@@`}<br parentName=\"p\"></br>{`\n`}{`以下に、REST APIを利用した場合のindexのデータベースへのアクセス方法を示します。`}<br parentName=\"p\"></br>{`\n`}{`が、その前に用語を3つだけRDBにたとえてみます。  `}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`用語`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`意味`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`index`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`RDBでいうところのDatabase`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`type`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`RDBでいうところのTable`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`document`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`RDBでいうところのRecord`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2>{`indexを作成`}</h2>\n    <p>{`今回はコマンドライン上から、curlコマンドを使ってelasticsearchにアクセスしていきます。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`# customerというindexをhttpリクエストで作成\n$ curl -XPUT 'localhost:9200/customer?pretty'\n# 標準出力の結果\n{\n  \"acknowledged\" : true\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`curl`}</inlineCode>{`コマンドを利用してhttpのリクエストを投げる`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`-X`}</inlineCode>{`オプションで`}<inlineCode parentName=\"li\">{`PUT`}</inlineCode>{`メソッドを利用する`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`pretty`}</inlineCode>{`は出力結果を整形してくれるだけなので、つけなくても問題ない`}</li>\n      <li parentName=\"ul\">{`レスポンスはJSON形式です。`}</li>\n    </ul>\n    <p>{`さて、次はindexができたか確認してみます。`}</p>\n    <h2>{`indexの一覧を取得`}</h2>\n    <p>{`以下のコマンドでindexの一覧を取得します。単に情報を取得する場合は`}<inlineCode parentName=\"p\">{`GET`}</inlineCode>{`メソッドを利用します。REST APIですね。`}</p>\n    <p>{`蛇足ですが、`}<inlineCode parentName=\"p\">{`curl: (7) Failed to connect to localhost port 9200: Connection refused`}</inlineCode>{`が発生する場合、`}<inlineCode parentName=\"p\">{`--ipv4`}</inlineCode>{`をつけてみてください。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`$ curl -XGET 'localhost:9200/_cat/indices?v'\n`}</code></pre>\n    <p>{`一覧の中に`}<inlineCode parentName=\"p\">{`customer`}</inlineCode>{`がいれば、indexの作成成功です。`}<br parentName=\"p\"></br>{`\n`}{`続いて実際のデータとなるdocumentを登録してみましょう。`}</p>\n    <h2>{`documentを登録`}</h2>\n    <p>{`登録するdocumentは以下です。`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`キー`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`値`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`name`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`John Doe`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`$ curl -XPUT 'localhost:9200/customer/external/1?pretty' -d '\nquote> {\nquote>   \"name\": \"John Doe\"\nquote> }'\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`urlは`}<inlineCode parentName=\"li\">{`/customer/external/1`}</inlineCode>{`と指定します。`}<ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`customer`}</inlineCode>{`はindexですね。`}</li>\n          <li parentName=\"ul\">{`では次の`}<inlineCode parentName=\"li\">{`external`}</inlineCode>{`はなんでしょうか。これが、typeです。個人的にはtableというより、一般的なカテゴリーに近いのかなって気がします。`}</li>\n          <li parentName=\"ul\">{`最後の`}<inlineCode parentName=\"li\">{`1`}</inlineCode>{`はdocumentのIDです。つけないやり方もあります。`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`-d`}</inlineCode>{`オプション(-data)でdocumentのデータを連想配列形式で記述します。`}</li>\n    </ul>\n    <p>{`ではdocumentが登録できたのか確認してみましょう。`}</p>\n    <h2>{`documentを取得`}</h2>\n    <p>{`indexの一覧の取得方法と、documentの登録方法から、URLの意味は汲み取れると思います。`}<inlineCode parentName=\"p\">{`customer`}</inlineCode>{`indexの`}<inlineCode parentName=\"p\">{`external`}</inlineCode>{`typeのIDが`}<inlineCode parentName=\"p\">{`1`}</inlineCode>{`のdocumentを取得する(`}<inlineCode parentName=\"p\">{`GET`}</inlineCode>{`)というリクエストです。 `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`$ curl -XGET 'localhost:9200/customer/external/1?pretty'\n# 標準出力の結果\n{\n  \"_index\" : \"customer\",\n  \"_type\" : \"external\",\n  \"_id\" : \"1\",\n  \"_version\" : 1,\n  \"found\" : true,\n  \"_source\":\n    {\n      \"name\": \"John Doe\"\n    }\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`documentが見つかると、`}<inlineCode parentName=\"li\">{`found`}</inlineCode>{`は`}<inlineCode parentName=\"li\">{`true`}</inlineCode></li>\n      <li parentName=\"ul\">{`取得したdocumentの内容は`}<inlineCode parentName=\"li\">{`_source`}</inlineCode>{`をキーにした連想配列`}</li>\n    </ul>\n    <p>{`無事に取得できました！でも、登録したdocumentの内容が間違っていました。よくあることですね、直しましょう。`}</p>\n    <h2>{`documentを更新`}</h2>\n    <p>{`更新のリクエストはdocumentを登録する時と、`}<inlineCode parentName=\"p\">{`name`}</inlineCode>{`の値以外全て一緒です。`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$ curl -XPUT 'localhost:9200/customer/external/1?pretty' -d '\nquote> {\nquote>   \"name\": \"Jane Doe\"\nquote> }'\n{\n  \"_index\" : \"customer\",\n  \"_type\" : \"external\",\n  \"_id\" : \"1\",\n  \"_version\" : 2,\n  \"created\" : false\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`すでに存在するdocumentに対する`}<inlineCode parentName=\"li\">{`PUT`}</inlineCode>{`の場合は`}<ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`_version`}</inlineCode>{`が+1`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`created`}</inlineCode>{`が`}<inlineCode parentName=\"li\">{`false`}</inlineCode></li>\n        </ul></li>\n    </ul>\n    <p>{`もう一度、documentを取得してみてください。documentが更新されていることを確認できると思います。イエイ。`}</p>\n    <p>{`ところが、登録したdocument、実はいらないデータでした。消しましょう。`}</p>\n    <h2>{`documentを削除`}</h2>\n    <p>{`削除の時は`}<inlineCode parentName=\"p\">{`DELETE`}</inlineCode>{`メソッドを使います。`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$ curl -XDELETE 'localhost:9200/customer/external/1?pretty'\n{\n  \"found\" : true,\n  \"_index\" : \"customer\",\n  \"_type\" : \"external\",\n  \"_id\" : \"1\",\n  \"_version\" : 2\n}\n`}</code></pre>\n    <p>{`documentを取得してみてください。存在しないため、`}<inlineCode parentName=\"p\">{`found`}</inlineCode>{`が`}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`担っているともいます。`}</p>\n    <p>{`実際にリクエストを投げながら使うことで、elasticsearchに、どうアクセスして、どんな結果が返ってくるのかイメージできてきたと思います。`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}