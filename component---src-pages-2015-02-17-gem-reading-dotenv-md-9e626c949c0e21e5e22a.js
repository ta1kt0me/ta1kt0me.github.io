(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{"7cSX":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return l})),n.d(t,"default",(function(){return p}));n("rGqo"),n("yt8O"),n("Btvt"),n("RW0V"),n("91GP"),n("q1tI");var a=n("7ljp"),b=n("Bl7J");var l={},i={_frontmatter:l},r=b.a;function p(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,b={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(b[n]=e[n]);return b}(e,["components"]);return Object(a.b)(r,Object.assign({},i,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/bkeepers/dotenv"}),"dotenv"),"というGemを知ったので覗いてみました。"),Object(a.b)("h1",null,"about dotevn"),Object(a.b)("p",null,"読む前にどんなものか簡単に確認。"),Object(a.b)("h2",null,"これなに？"),Object(a.b)("p",null,"環境変数 ENV をファイル管理できるGemです。",Object(a.b)("a",Object.assign({parentName:"p"},{href:"http://qiita.com/closer/items/f8d8ba00ae86d7051764"}),"こちら"),"の記事が参考になりました。"),Object(a.b)("h2",null,"どう使うの？"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-rb",metastring:"Gemfile",Gemfile:!0}),"# 後でbundle install\ngem 'dotenv'\n")),Object(a.b)("p",null,"デフォルトでは",Object(a.b)("inlineCode",{parentName:"p"},".env"),"というファイルの中に、"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-yml",metastring:".env",".env":!0}),"HOGE=1\nFUGA=2\n")),Object(a.b)("p",null,"と書いて、",Object(a.b)("inlineCode",{parentName:"p"},".env"),"を読み込むための命令 ",Object(a.b)("inlineCode",{parentName:"p"},"Dotenv.load")," を実行すると、 ",Object(a.b)("inlineCode",{parentName:"p"},"ENV['HOGE']")," が ",Object(a.b)("inlineCode",{parentName:"p"},"1")," を返すようになります。環境変数をわざわざexportコマンドを使ったり、",Object(a.b)("inlineCode",{parentName:"p"},".zshrc"),"といった設定ファイルに書かなくても使えるようになります。",Object(a.b)("br",{parentName:"p"}),"\n","fixtureを見た感じ",Object(a.b)("inlineCode",{parentName:"p"},"="),"じゃなくて、YAMLっぽく",Object(a.b)("inlineCode",{parentName:"p"},":"),"も使えそう。  "),Object(a.b)("h1",null,"読んでみる"),Object(a.b)("h2",null,"2つのGem"),Object(a.b)("p",null,"このGemからは2つのGemを利用できます。  "),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-ruby",metastring:"Gemfile",Gemfile:!0}),"source 'https://rubygems.org'\ngemspec :name => 'dotenv'\ngemspec :name => 'dotenv-rails'\n")),Object(a.b)("p",null,"gemspecファイルも2つあった。",Object(a.b)("br",{parentName:"p"}),"\n",Object(a.b)("inlineCode",{parentName:"p"},"dotenv"),"というGemはこの機能のベース部分。",Object(a.b)("inlineCode",{parentName:"p"},"dotenv-rails"),"というGemは、Railsを利用するときに、",Object(a.b)("inlineCode",{parentName:"p"},"dotenv"),"を自動で有効にしてくれるラッパーです。それと、このGemにはCLIのスクリプトも包含しています。"),Object(a.b)("h2",null,"dotenv.rb"),Object(a.b)("p",null,"ここが外部から呼び出すインターフェースのメソッド(load, load!, overload)を定義しています。",Object(a.b)("inlineCode",{parentName:"p"},"module Dotenv extend self"),"として、これらをmoduleの特異メソッドにしています。",Object(a.b)("br",{parentName:"p"}),"\n","環境変数を定義するファイルをこのメソッドの引数として渡せばいいが、引数なしの場合は ",Object(a.b)("inlineCode",{parentName:"p"},".env")," がデフォルト値となります。  "),Object(a.b)("p",null,"まだ分かっていないのですが、 ",Object(a.b)("inlineCode",{parentName:"p"},"instrument")," というメソッドは、 ",Object(a.b)("inlineCode",{parentName:"p"},"Active Support Instrumentation")," という機能を使っている。  この機能はRails限定。  "),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"reduce"),"が使われているんだけど、",Object(a.b)("inlineCode",{parentName:"p"},"inject")," とどう使い分けするのかなって疑問に思ったら",Object(a.b)("a",Object.assign({parentName:"p"},{href:"http://magazine.rubyist.net/?0038-MapAndCollect#l4"}),"こんな記事"),"がありました。smalltalkとlispの考え方の違いか〜...実際にはaliasだから使う人の好みが出そう。"),Object(a.b)("h2",null,"environment.rb"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"Dotenv::Environment"),"は",Object(a.b)("inlineCode",{parentName:"p"},"Hash"),"の子クラス。",Object(a.b)("inlineCode",{parentName:"p"},".env"),"内のkey,value情報を自身に格納して、",Object(a.b)("inlineCode",{parentName:"p"},"apply")," or ",Object(a.b)("inlineCode",{parentName:"p"},"apply!")," を呼び出すことで",Object(a.b)("inlineCode",{parentName:"p"},"ENV"),"に設定している。",Object(a.b)("inlineCode",{parentName:"p"},"apply"),"メソッドの呼び出しは、",Object(a.b)("inlineCode",{parentName:"p"},"dotenv.rb"),"で行っている。",Object(a.b)("inlineCode",{parentName:"p"},"Dotenv::Environment"),"の",Object(a.b)("inlineCode",{parentName:"p"},"initialize"),"の一部として",Object(a.b)("inlineCode",{parentName:"p"},".env"),"の読み込みとパースをやってる。"),Object(a.b)("h2",null,"parse.rb"),Object(a.b)("p",null,"大事なのは",Object(a.b)("inlineCode",{parentName:"p"},"call"),"メソッド。ここで",Object(a.b)("inlineCode",{parentName:"p"},".env"),"の内容がパースされる。正規表現弱いんでこのあたりは宿題...orz",Object(a.b)("br",{parentName:"p"}),"\n",Object(a.b)("inlineCode",{parentName:"p"},"@@substitutions"),"というクラス変数があるんだけどここには",Object(a.b)("inlineCode",{parentName:"p"},"Substitutions"),"のnamespaceにあるクラスの配列が入ってる。",Object(a.b)("inlineCode",{parentName:"p"},".env"),"のvalueに設定できるものとして、"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"コマンドの出力結果"),Object(a.b)("li",{parentName:"ol"},"変数展開")),Object(a.b)("p",null,"がある。\n1 は ",Object(a.b)("inlineCode",{parentName:"p"},"Dotenv::Substitutions::Command"),"で処理し、2 は",Object(a.b)("inlineCode",{parentName:"p"},"Dotenv::Substitutions::Variable"),"で処理する。  あー、実際にはそうなるように値を設定しているのかな？  "),Object(a.b)("p",null,"Substitutions.constants のところでクラス名が定数だということがわかった。  "),Object(a.b)("h2",null,"rails.rb"),Object(a.b)("p",null,"デフォルトでは、",Object(a.b)("inlineCode",{parentName:"p"},"before_configuration"),"のときに、",Object(a.b)("inlineCode",{parentName:"p"},".env"),"を読み込む。",Object(a.b)("inlineCode",{parentName:"p"},"dotenv"),"と違い、ファイル名は",Object(a.b)("inlineCode",{parentName:"p"},".env.local"),",",Object(a.b)("inlineCode",{parentName:"p"},".env.#{Rails.env}"),"もデフォルトで読み込み対象となる。"),Object(a.b)("p",null,"それと、上述の",Object(a.b)("inlineCode",{parentName:"p"},"Active Support Instrumentation"),"をspringによるファイル変更時のENV再設定に利用しているっぽい。この通知の仕組み？をもうちょっと掘り下げてみようかな。"),Object(a.b)("h1",null,"終わりに"),Object(a.b)("p",null,"英語が堪能は方は",Object(a.b)("a",Object.assign({parentName:"p"},{href:"http://blog.mah-lab.com/2014/08/15/dotenv/"}),"こちら"),"が参考になるかも。全然内容が頭の中に入ってこなかったのでもっとリスニング練習しよう。"))}p.isMDXComponent=!0},Bl7J:function(e,t,n){"use strict";var a=n("dwav"),b=n("q1tI"),l=n.n(b),i=n("Wbzz"),r=function(e){var t=e.siteTitle;return l.a.createElement("header",{style:{background:"white",marginBottom:"1.45rem"}},l.a.createElement("div",{style:{margin:"0 auto",maxWidth:960,padding:"1.45rem 1.0875rem"}},l.a.createElement("h1",{style:{margin:0}},l.a.createElement(i.Link,{to:"/",style:{color:"black",textDecoration:"none"}},t))))};r.defaultProps={siteTitle:""};var p=r;n("8ypT"),t.a=function(e){var t=e.children,n=a.data;return l.a.createElement(l.a.Fragment,null,l.a.createElement(p,{siteTitle:n.site.siteMetadata.title}),l.a.createElement("div",{style:{margin:"0 auto",maxWidth:960,padding:"0 1.0875rem 1.45rem"}},l.a.createElement("main",null,t),l.a.createElement("footer",null,"© ",(new Date).getFullYear(),", Built with"," ",l.a.createElement("a",{href:"https://www.gatsbyjs.org"},"Gatsby"),"by ",n.site.siteMetadata.author)))}},dwav:function(e){e.exports=JSON.parse('{"data":{"site":{"siteMetadata":{"title":"jangajan.com","author":"@ta1kt0me"}}}}')}}]);
//# sourceMappingURL=component---src-pages-2015-02-17-gem-reading-dotenv-md-9e626c949c0e21e5e22a.js.map