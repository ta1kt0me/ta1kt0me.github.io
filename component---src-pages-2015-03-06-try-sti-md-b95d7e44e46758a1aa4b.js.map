{"version":3,"sources":["webpack:///./src/pages/2015-03-06-try-sti.md","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent","Header","siteTitle","style","background","marginBottom","margin","maxWidth","padding","to","color","textDecoration","defaultProps","Layout","children","data","site","siteMetadata","title","Date","getFullYear","href","author"],"mappings":"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","file":"component---src-pages-2015-03-06-try-sti-md-b95d7e44e46758a1aa4b.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jangajan.com/jangajan.com/src/components/layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`Single Table Inheritance(STI)とは`}</h1>\n    <p>{`単一テーブル継承というデザインパターンです。テーブルベースの継承階層を表現しています。Ruby同様、継承元は一つのテーブルだけです。`}<br parentName=\"p\"></br>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"http://www.martinfowler.com/eaaCatalog/singleTableInheritance.html\"\n      }}>{`こちら`}</a>{`に具体的なイメージがあります。`}<br parentName=\"p\"></br>{`\n`}{`早速RailsでSTIをどうやるのか調べてみます。`}</p>\n    {\n      /* more */\n    }\n    <h1>{`環境`}</h1>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`tool`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`version`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`ruby`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`2.2.0`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`rails`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`4.2.0`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h1>{`試す`}</h1>\n    <p>{`まずは準備をします。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`$ bundle exec rails new sti_type --no-test-framework --skip-bundle\n$ bundle exec rails g model user name:string age:integer type:string\n$ bundle exec rake db:migrate\n`}</code></pre>\n    <p>{`RailsでのSTIではmodelの `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{` というカラムが重要な役割を果たします。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\",\n        \"metastring\": \"app/models/guest.rb\",\n        \"app/models/guest.rb\": true\n      }}>{`class Guest < User; end\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\",\n        \"metastring\": \"app/models/host.rb\",\n        \"app/models/host.rb\": true\n      }}>{`class Host < User; end\n`}</code></pre>\n    <p>{`継承ツリーとしてはこんな感じになります。`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`ActiveRecord::Base\n        |\n       User\n   _____|_____\n  |           |\nGuest        Host\n`}</code></pre>\n    <p>{`これで一通りの準備が整いました。 `}<inlineCode parentName=\"p\">{`rails console`}</inlineCode>{` で動作を確認してみます。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`$ bundle exec rails c\n> Guest.create(name: 'Mark', age: 18)\n> Host.create(name: 'Yamada', age: 50)\n\n> pp User.all\n[#<Guest:0x007f84c1279a00\n  id: 1,\n  name: \"Mark\",\n  age: 18,\n  type: \"Guest\",\n  created_at: Thu, 05 Mar 2015 19:43:24 UTC +00:00,\n  updated_at: Thu, 05 Mar 2015 19:43:24 UTC +00:00>,\n #<Host:0x007f84c1279870\n  id: 2,\n  name: \"Yamada\",\n  age: 50,\n  type: \"Host\",\n  created_at: Thu, 05 Mar 2015 19:44:02 UTC +00:00,\n  updated_at: Thu, 05 Mar 2015 19:44:02 UTC +00:00>]\n\n> pp Guest.all\n[#<Guest:0x007f84c2b54b10\n  id: 1,\n  name: \"Mark\",\n  age: 18,\n  type: \"Guest\",\n  created_at: Thu, 05 Mar 2015 19:43:24 UTC +00:00,\n  updated_at: Thu, 05 Mar 2015 19:43:24 UTC +00:00>]\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`type`}</inlineCode>{` に、自分のクラス名がGuestだったら'Guest'と入ります。 `}<inlineCode parentName=\"p\">{`Guest`}</inlineCode>{` だけの属性を集めたい場合は `}<inlineCode parentName=\"p\">{`Guest.all`}</inlineCode>{` とすることで取得できます。`}</p>\n    <h1><inlineCode parentName=\"h1\">{`type`}</inlineCode>{`以外のカラムにクラス情報を格納したい`}</h1>\n    <p>{`なにがしかの理由で `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{` は使えない場合、 `}<inlineCode parentName=\"p\">{`self.inheritance_column`}</inlineCode>{` を使うことで、別のカラムをクラス名を格納するカラムに指定することができます。\n例えば、 `}<inlineCode parentName=\"p\">{`role`}</inlineCode>{` というカラムを使いたい場合です。`}</p>\n    <h2>{`準備`}</h2>\n    <p>{`汚いですが前のサンプルをそのまま使います。`}<br parentName=\"p\"></br>{`\n`}<inlineCode parentName=\"p\">{`role`}</inlineCode>{`というカラムを追加します。`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$ bundle exec rails g migration AddRoleToUser\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\",\n        \"metastring\": \"db/migrate/20150305201347_add_role_to_user.rb\",\n        \"db/migrate/20150305201347_add_role_to_user.rb\": true\n      }}>{`class AddRoleToUser < ActiveRecord::Migration\n  def change\n    add_column :users, :role, :string\n  end\nend\n`}</code></pre>\n    <p>{`データを綺麗にしたいのでDB作り直します。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`$ bundle exec rake db:setup\n$ bundle exec rake db:migrate\n`}</code></pre>\n    <p>{`大事なのはここだけです。 `}<inlineCode parentName=\"p\">{`self.inheritance_column`}</inlineCode>{` に `}<inlineCode parentName=\"p\">{`role`}</inlineCode>{` を指定します。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\",\n        \"metastring\": \"app/models/user.rb\",\n        \"app/models/user.rb\": true\n      }}>{`class User < ActiveRecord::Base\n  self.inheritance_column = :role\nend\n`}</code></pre>\n    <h2>{`確認`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`> Guest.create(name: 'Bob', age: 1000)\n> Host.create(name: 'Tanaka', age: 100)\n> pp User.all\n[#<Guest:0x007fe248c19c60\n  id: 3,\n  name: \"Bob\",\n  age: 1000,\n  type: nil,\n  created_at: Thu, 05 Mar 2015 20:23:55 UTC +00:00,\n  updated_at: Thu, 05 Mar 2015 20:23:55 UTC +00:00,\n  role: \"Guest\">,\n #<Host:0x007fe248c19ad0\n  id: 4,\n  name: \"Tanaka\",\n  age: 100,\n  type: nil,\n  created_at: Thu, 05 Mar 2015 20:24:10 UTC +00:00,\n  updated_at: Thu, 05 Mar 2015 20:24:10 UTC +00:00,\n  role: \"Host\">]\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`type`}</inlineCode>{` ではなく、 `}<inlineCode parentName=\"p\">{`role`}</inlineCode>{` を使用していることが確認できました。`}</p>\n    <h1>{`注意点`}</h1>\n    <p>{`注意しなければいけなそうな点は、こんな感じでしょうか。`}</p>\n    <ul>\n      <li parentName=\"ul\">{`子クラス(`}<inlineCode parentName=\"li\">{`Guest`}</inlineCode>{` や `}<inlineCode parentName=\"li\">{`Host`}</inlineCode>{`)ごとに特別のカラムが欲しい場合、 `}<inlineCode parentName=\"li\">{`users`}</inlineCode>{` に追加する必要があり、`}<inlineCode parentName=\"li\">{`nil`}</inlineCode>{`を許容しなければいけない`}<ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Guest`}</inlineCode>{` で使うが `}<inlineCode parentName=\"li\">{`Host`}</inlineCode>{` では使用しないケースがあるから`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`子クラスごとに、カラムの型を変えることはできない`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: `white`,\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `black`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n          author\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: 960,\n          padding: `0 1.0875rem 1.45rem`,\n        }}\n      >\n        <main>{children}</main>\n        <footer>\n          © {new Date().getFullYear()}, Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n          by {data.site.siteMetadata.author}\n        </footer>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}