{"version":3,"sources":["webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./src/pages/2014-09-03-unix-process-in-ruby.md"],"names":["Header","siteTitle","style","background","marginBottom","margin","maxWidth","padding","to","color","textDecoration","defaultProps","Layout","children","data","site","siteMetadata","title","Date","getFullYear","href","author","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-2014-09-03-unix-process-in-ruby-md-5a67705aa7150ad115b5.js","sourcesContent":["import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: `white`,\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `black`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n          author\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: 960,\n          padding: `0 1.0875rem 1.45rem`,\n        }}\n      >\n        <main>{children}</main>\n        <footer>\n          © {new Date().getFullYear()}, Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n          by {data.site.siteMetadata.author}\n        </footer>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jangajan.com/jangajan.com/src/components/layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`積読消化シリーズです。`}<br parentName=\"p\"></br>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"http://tatsu-zine.com/books/naruhounix\"\n      }}>{`なるほどUnixプロセス ― Rubyで学ぶUnixの基礎`}</a><br parentName=\"p\"></br>{`\n`}{`UnixでのパイプをRubyで表すとどうなるか。`}</p>\n    {\n      /* more */\n    }\n    <h1>{`Rubyで扱うパイプ`}</h1>\n    <h2>{`パイプとは`}</h2>\n    <p>{`パイプとは、「単方向のデータの流れ」です。`}<br parentName=\"p\"></br>{`\n`}{`パイプでは、２つのプロセス(A,B)で、ストリームを介して、一方通行に通信します。`}<br parentName=\"p\"></br>{`\n`}{`(ストリームは最後の方に補足します。データを溜めておく場所のイメージ)`}</p>\n    <h2>{`単一プロセスでのパイプ`}</h2>\n    <p>{`一つのプロセスでの、パイプを表現すると以下の通りです。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`p IO.pipe #=> [#<IO:fd 7>, #<IO:fd 8>]\nreader, writer = IO.pipe\n# reader => #<IO:fd 7>\n# writer => #<IO:fd 8>\n\nwriter.write(\"書き込みました。\")\nwriter.close\nputs reader.read # =>書き込みました。\n`}</code></pre>\n    <p>{`reader(A)、writer(B)とした場合、`}<inlineCode parentName=\"p\">{`B => A`}</inlineCode>{`というデータの流れは可能ですが、`}<inlineCode parentName=\"p\">{`A => B`}</inlineCode>{`はできません。`}<br parentName=\"p\"></br>{`\n`}<inlineCode parentName=\"p\">{`writer.write`}</inlineCode>{`でストリームに情報を書き込みます。`}<br parentName=\"p\"></br>{`\n`}<inlineCode parentName=\"p\">{`reader.read`}</inlineCode>{`でストリームに書き込まれた情報を読み込みます。  `}</p>\n    <h3>{`メモ`}</h3>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`reader.read`}</inlineCode>{`の前に、`}<inlineCode parentName=\"li\">{`writer.close`}</inlineCode>{`をする`}<ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`reader.read`}</inlineCode>{`は区切り文字が見つかるまでストリームを読み込み続けます`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`writer.close`}</inlineCode>{`することで、ストリームへの書き込みが終了させ、区切り文字を設定します`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`writer.close`}</inlineCode>{`で閉じたストリームを更新することはできない`}</li>\n    </ul>\n    <h2>{`親子プロセスでのパイプ`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`reader, writer = IO.pipe\n# reader => #<IO:fd 7>\n# writer => #<IO:fd 8>\n\n# forkにより子プロセスを生成\nfork do\n  reader.close\n  10.times do\n    writer.write \"Another one bite the dust\\\\n\"\n  end\nend\n\nwriter.close\nprint reader.read\n# => Another one bite the dust\n# Another one bite the dust\n# Another one bite the dust\n# Another one bite the dust\n# Another one bite the dust\n# Another one bite the dust\n# Another one bite the dust\n# Another one bite the dust\n# Another one bite the dust\n# Another one bite the dust\n`}</code></pre>\n    <p>{`親プロセス、子プロセスでは、それぞれ使用しないIOインスタンスをcloseしています。`}<br parentName=\"p\"></br>{`\n`}{`これは、子プロセスが親のファイルディクリプタを複製して利用するためです。`}<br parentName=\"p\"></br>{`\n`}{`ファイルディスクリプタというのは、ストリームの出入り口をイメージすると分かりやすいかもしれません。`}<br parentName=\"p\"></br>{`\n`}{`writerやreaderでwrite/readするためのデータの取り出し口ですね。  `}</p>\n    <ul>\n      <li parentName=\"ul\">{`親プロセスでは、write処理は行わないため、`}<inlineCode parentName=\"li\">{`writer.close`}</inlineCode>{`をします。  `}</li>\n      <li parentName=\"ul\">{`forkした子プロセスでは、read処理は行わないため、`}<inlineCode parentName=\"li\">{`reader.close`}</inlineCode>{`をします。`}<br parentName=\"li\"></br>\n        {`これで、利用しないファイルディクリプタに影響を与えなくなります。`}</li>\n    </ul>\n    <h3>{`親子プロセス両方でreader.close`}</h3>\n    <p>{`forkした子プロセスがwriteする前に、親プロセスで`}<inlineCode parentName=\"p\">{`reader.close`}</inlineCode>{`をすると、どうなるでしょうか。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`reader, writer = IO.pipe\n\nfork do\n  reader.close\n  10.times do\n    writer.write \"Another one bite the dust\\\\n\"\n    # => \\`write': Broken pipe (Errno::EPIPE)が発生\n  end\nend\n\nreader.close # この行を追加\nwriter.close\nprint reader.read\n`}</code></pre>\n    <p>{`親子でreader.closeをすると、書き込んだ情報の出力先がなくなります。`}<br parentName=\"p\"></br>{`\n`}{`そのため、子プロセスで書き込みをするとエラーが発生します。`}</p>\n    <h2>{`補足:ストリーム`}</h2>\n    <p>{`スラッシュドットの以下の記事がイメージしやすかったです。\n`}<a parentName=\"p\" {...{\n        \"href\": \"http://slashdot.jp/journal/160355/TCP%E3%81%A8UDP%E3%81%AE%E9%81%95%E3%81%84\"\n      }}>{`gatekeeperの日記： TCPとUDPの違い`}</a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`ストリーム型というのは１個のデーターをためておく場所（ストリーム）があって、\nストリームの性質としては最初に入れたデーターが最初に出てくる。（要はFIFOだな）\n...\nそれがどういうことになるかというと、ストリーム型では何回かに分けて書き込んだデーターを一気に読み込んだり、\n一気に読み込んだり、 逆に一度に書き込んだデーターを細切れで読み出したりできる。\nつまり、読み書きの境界はストリームに入った時点で保存されない。`}</p>\n    </blockquote>\n    <p>{`ストリームはデータを溜めておく場所で、明示的に終了したよって宣言しないと、データの区切りが分からないものなんですね。`}<br parentName=\"p\"></br>{`\n`}<inlineCode parentName=\"p\">{`close`}</inlineCode>{`することで、データの境界を設定します。`}<br parentName=\"p\"></br>{`\n`}{`それまでは好きなだけ`}<inlineCode parentName=\"p\">{`write`}</inlineCode>{`でデータを溜め込みます。`}<br parentName=\"p\"></br>{`\n`}{`しかし、`}<inlineCode parentName=\"p\">{`read`}</inlineCode>{`するためには、`}<inlineCode parentName=\"p\">{`close`}</inlineCode>{`でデータの区切りを宣言しないといけません。`}<br parentName=\"p\"></br>{`\n`}{`宣言しない限り`}<inlineCode parentName=\"p\">{`read`}</inlineCode>{`でのデータの読み込み処理は完了しないんですね。`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}