{"version":3,"sources":["webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./src/pages/2015-08-18-docker-rails-with-mysql.md"],"names":["Header","siteTitle","style","background","marginBottom","margin","maxWidth","padding","to","color","textDecoration","defaultProps","Layout","children","data","site","siteMetadata","title","Date","getFullYear","href","author","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"6IAIMA,EAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OACb,4BACEC,MAAO,CACLC,WAAW,QACXC,aAAa,YAGf,yBACEF,MAAO,CACLG,OAAO,SACPC,SAAU,IACVC,QAAQ,sBAGV,wBAAIL,MAAO,CAAEG,OAAQ,IACnB,kBAAC,OAAD,CACEG,GAAG,IACHN,MAAO,CACLO,MAAM,QACNC,eAAe,SAGhBT,OAWXD,EAAOW,aAAe,CACpBV,UAAU,IAGGD,Q,UCWAY,IAtCA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACVC,EAAI,OAWV,OACE,oCACE,kBAAC,EAAD,CAAQb,UAAWa,EAAKC,KAAKC,aAAaC,QAC1C,yBACEf,MAAO,CACLG,OAAO,SACPC,SAAU,IACVC,QAAQ,wBAGV,8BAAOM,GACP,sCACK,IAAIK,MAAOC,cADhB,mBAGE,uBAAGC,KAAK,4BAAR,UAHF,MAIMN,EAAKC,KAAKC,aAAaK,Y,sNCnC9B,IAAMC,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,yGAEA,+BAAc,+BAAGC,WAAW,KAAQ,CAChC,KAAQ,iDADE,OAAd,KAMA,mDACA,yBACE,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,QAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,UADX,aAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,QAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,UADX,UAIF,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,SAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,UADX,UAIF,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,UAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,UADX,UAIF,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,SAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,UADX,aAMN,oCACA,uBAAK,kCAAMA,WAAW,OAAU,IAA3B,uQAQL,qBAAG,+BAAGA,WAAW,KAAQ,CACrB,KAAQ,iDADT,iDAGH,uCACA,6EACF,+BAAGA,WAAW,KAAQ,CAChB,KAAQ,2CADd,2CAGE,uBAAK,kCAAMA,WAAW,OAAU,IAA3B,8LAQL,2CACA,gEACO,0BAAYA,WAAW,KAAvB,uBADP,oEAGE,+BAAGA,WAAW,KAAQ,CACpB,KAAQ,oCADV,qBAHF,cAMA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,8QAiBL,wDAAuC,0BAAYA,WAAW,KAAvB,oCAAvC,iBAAsI,0BAAYA,WAAW,KAAvB,qCAAtI,0CACA,sCACA,uBAAK,kCAAMA,WAAW,OAAU,IAA3B,wOAeL,6BAAY,0BAAYA,WAAW,KAAvB,MAAZ,wDAAmH,0BAAYA,WAAW,KAAvB,UAAnH,yBAA+L,0BAAYA,WAAW,KAAvB,gBAA/L,WACA,iCACA,+CACA,uBAAK,kCAAMA,WAAW,OAAU,IAA3B,kHAKL,+BACA,uBAAK,kCAAMA,WAAW,OAAU,IAA3B,mFAQTJ,EAAWK,gBAAiB,G","file":"component---src-pages-2015-08-18-docker-rails-with-mysql-md-291374b1b68411335093.js","sourcesContent":["import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: `white`,\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `black`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n          author\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: 960,\n          padding: `0 1.0875rem 1.45rem`,\n        }}\n      >\n        <main>{children}</main>\n        <footer>\n          © {new Date().getFullYear()}, Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n          by {data.site.siteMetadata.author}\n        </footer>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jangajan.com/jangajan.com/src/components/layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`docker周りが賑わっているので簡単な初期構築。\nまずは、docker-composeを使ったmysqlのRailsアプリケーションの環境を構築してみます。`}</p>\n    <p>{`ソースコードは`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/suburi/docker-mysql-rails\"\n      }}>{`こちら`}</a>{`。`}</p>\n    {\n      /* more */\n    }\n    <p>{`今回はRailsアプリケーション作成済みの前提です。`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`tool`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`version`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Ruby`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`2.2.2`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Rails`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`4.2.3`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`docker`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`1.8.1`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`mysql`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`5.6.26`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2>{`ツールのインストール`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`brew install Caskroom/cask/virtualbox\n# docker-swarmは今回は使わない\nbrew install docker docker-machine docker-compose docker-swarm\n# この下は順番が怪しい\ndocker-machine create --driver virtualbox default\neval $(docker-machine env default)\ndocker-machine start default\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://docs.docker.com/machine/get-started/\"\n      }}>{`https://docs.docker.com/machine/get-started/`}</a></p>\n    <h2>{`Dockerfileの作成`}</h2>\n    <p>{`公式にDockerでRails環境を構築する手順があるのですが、Rubyのバージョン以外全て一緒です。\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.docker.com/compose/rails/\"\n      }}>{`https://docs.docker.com/compose/rails/`}</a></p>\n    <pre><code parentName=\"pre\" {...{}}>{`FROM ruby:2.2.2\nRUN apt-get update -qq && apt-get install -y build-essential libpq-dev\nRUN mkdir /myapp\nWORKDIR /myapp\nADD Gemfile /myapp/Gemfile\nRUN bundle install\nADD . /myapp\n`}</code></pre>\n    <h2>{`docker-composeの作成`}</h2>\n    <p>{`上記のサンプルと同様、dbとwebの2台構成にしています。\nmysqlの場合、`}<inlineCode parentName=\"p\">{`MYSQL_ROOT_PASSWORD`}</inlineCode>{`という環境変数は、必須項目となります。\nlatestのバージョンは利用するタイミングによって変わる可能性があります。\n詳しくは`}<a parentName=\"p\" {...{\n        \"href\": \"https://hub.docker.com/_/mysql/\"\n      }}>{`Docker Hub のmysql`}</a>{`を確認してください。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`db:\n  image: mysql:latest\n  environment:\n    - MYSQL_ROOT_PASSWORD=root\nweb:\n  build: .\n  command: bundle exec rails s -p 3000 -b '0.0.0.0'\n  volumes:\n    - .:/myapp\n    - ./tools/mysql:/etc/mysql/conf.d\n  ports:\n    - \"3000:3000\"\n  links:\n    - db\n`}</code></pre>\n    <p>{`my.cnfはカスタマイズしたものを利用したいので、リポジトリに`}<inlineCode parentName=\"p\">{`\\${RAILS_ROOT}/tools/mysql/my.cnf`}</inlineCode>{`という設定ファイルを作成し、`}<inlineCode parentName=\"p\">{`- ./tools/mysql:/etc/mysql/conf.d`}</inlineCode>{`の行を追加してください。特にカスタマイズする必要がなければこの行は不要です。`}</p>\n    <h2>{`database接続設定`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`default: &default\n  adapter: mysql2\n  encoding: utf8\n  reconnect: false\n  pool: 5\n  host: db\n  port: 3306\n  username: root\n  password: root\n  timeout: 5000\n\ndevelopment:\n  <<: *default\n  database: app_development\n`}</code></pre>\n    <p>{`hostは`}<inlineCode parentName=\"p\">{`db`}</inlineCode>{`という名前になります。docker-compose.ymlのdbのキーと同じになりますね。adapterを`}<inlineCode parentName=\"p\">{`mysql2`}</inlineCode>{`にしているので、Gemfileにも忘れずに、`}<inlineCode parentName=\"p\">{`gem 'mysql2'`}</inlineCode>{`を追加します。`}</p>\n    <h2>{`migrate`}</h2>\n    <p>{`ここまでが完了したら、アプリ起動まで後少し。`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`cd \\${RAILS_ROOT}\ndocker-compose build\ndocker-compose run web db:create\ndocker-compose run web db:migrate\n`}</code></pre>\n    <h2>{`アプリ起動`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`docker-compose up\n# 別ターミナルで\nopen http://$(docker-machine ip default):3000\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}