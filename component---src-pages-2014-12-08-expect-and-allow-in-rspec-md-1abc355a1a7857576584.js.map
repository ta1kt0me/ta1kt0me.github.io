{"version":3,"sources":["webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./src/pages/2014-12-08-expect-and-allow-in-rspec.md"],"names":["Header","siteTitle","style","background","marginBottom","margin","maxWidth","padding","to","color","textDecoration","defaultProps","Layout","children","data","site","siteMetadata","title","Date","getFullYear","href","author","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-2014-12-08-expect-and-allow-in-rspec-md-1abc355a1a7857576584.js","sourcesContent":["import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: `white`,\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `black`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n          author\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: 960,\n          padding: `0 1.0875rem 1.45rem`,\n        }}\n      >\n        <main>{children}</main>\n        <footer>\n          © {new Date().getFullYear()}, Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n          by {data.site.siteMetadata.author}\n        </footer>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jangajan.com/jangajan.com/src/components/layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p><a parentName=\"p\" {...{\n        \"href\": \"http://www.adventar.org/calendars/582\"\n      }}>{`よちよち.rb Advent Calendar 2014`}</a>{` 8日目の記事です。`}<br parentName=\"p\"></br>{`\n`}{`昨日は、bonbon0605さんの`}<a parentName=\"p\" {...{\n        \"href\": \"http://genius.hateblo.jp/entry/2014/12/07/093454\"\n      }}>{`2014年に読んだり積んだりした本とその思い出を振り返ります`}</a>{`、でした。`}<br parentName=\"p\"></br>{`\n`}{`Ruby初学者がワンステップレベルアップする時に参考となる良書を紹介していただきました！`}</p>\n    <p>{`さて、今日はRspecのとあるメソッドから学んだ、mockとstubの違いについて書きます。  mockとstubの違いは、少し前に参加したよちよち.rbで疑問のまま終わってしまっていました。    `}</p>\n    {\n      /* more */\n    }\n    <p>{`最近になってRubyとRailsの仕事に関わっているのですが、Rspecに苦戦しています。`}<br parentName=\"p\"></br>{`\n`}{`Rspecを使っている時に、次の２つのメソッドに出会いました。`}</p>\n    <ul>\n      <li parentName=\"ul\">{`allow(object).to receive(:hoge).and_return('fuga')  `}<a parentName=\"li\" {...{\n          \"href\": \"https://relishapp.com/rspec/rspec-mocks/v/3-1/docs/basics/allowing-messages\"\n        }}>{`参考`}</a></li>\n      <li parentName=\"ul\">{`expect(object).to receive(:hoge).and_return('fuga') `}<a parentName=\"li\" {...{\n          \"href\": \"https://relishapp.com/rspec/rspec-mocks/v/3-1/docs/basics/expecting-messages\"\n        }}>{`参考`}</a></li>\n    </ul>\n    <p>{`この使い分けを知る過程でstubとmockの違いが自分の中でイメージできてきました。  `}</p>\n    <p>{`まずは、上記２つのメソッドの使い方を非常に単純な例に落とし込んでみます。`}</p>\n    <p>{`上記はメソッドはどちらも、`}<inlineCode parentName=\"p\">{`object.hoge`}</inlineCode>{`ってメソッドを呼び出すと、戻り値が`}<inlineCode parentName=\"p\">{`fuga`}</inlineCode>{`となります。`}<br parentName=\"p\"></br>{`\n`}{`さて、どう違うのか、試してみます。`}</p>\n    <h1>{`事前準備`}</h1>\n    <p>{`問題を単純化します。(逆にわかりづらいかもしれないし、ソースコード減らしたかったのであまりいい書き方ではありません)`}<br parentName=\"p\"></br>{`\n`}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`と`}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`を返すだけのprivateメソッドとそのラッパーメソッドを用意します。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`class MockAndStub\n  def always_true\n    return truthy\n  end\n\n  def always_false\n    return falsey\n  end\n\n  private\n  def truthy\n    true\n  end\n\n  def falsey\n    false\n  end\nend\n`}</code></pre>\n    <p>{`それと、テストクラスです。`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`describe MockAndStub do\n  let(:obj) { MockAndStub.new }\n  \n  # publicメソッドの戻り値が正しいことを確認\n  context 'do not use stub and mock' do\n    it { expect(obj.always_true).to be_truthy }\n    it { expect(obj.always_false).to be_falsey }\n  end\nend\n`}</code></pre>\n    <p>{`準備ができました。まずは`}<inlineCode parentName=\"p\">{`allow`}</inlineCode>{`から見ていきましょう。`}</p>\n    <h1>{`allow(object).to receive(:hoge).and_return('fuga')`}</h1>\n    <p><inlineCode parentName=\"p\">{`allow`}</inlineCode>{`はstubとして働きます。`}<br parentName=\"p\"></br>{`\n`}<inlineCode parentName=\"p\">{`allow`}</inlineCode>{`を使うと、上述の説明どおり、`}<inlineCode parentName=\"p\">{`object.hoge`}</inlineCode>{`というメソッドを呼び出すと、`}<inlineCode parentName=\"p\">{`fuga`}</inlineCode>{`が返ってきます。  `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`  ...\n  context 'use stub' do\n    # 1. fail\n    before(:each) { allow(obj).to receive(:truthy).and_return(false) }\n    it { expect(obj.always_true).to be_truthy }\n\n    # 2. success\n    before(:each) { allow(obj).to receive(:falsey).and_return(true) }\n    it { expect(obj.always_false).to be_truthy }    \n  end\n\n  context 'use stub, but not use' do\n    # 3. success\n    before(:each) { allow(obj).to receive(:falsey).and_return(true) }\n    it { expect(obj.always_true).to be_truthy }\n  end\n  ...\n`}</code></pre>\n    <h2>{`1. fail`}</h2>\n    <p>{`１のパターンのテストはfailします。`}<br parentName=\"p\"></br>{`\n`}<inlineCode parentName=\"p\">{`allow(obj).to receive(:truthy).and_return(false)`}</inlineCode>{`とすると、`}<inlineCode parentName=\"p\">{`obj`}</inlineCode>{`が`}<inlineCode parentName=\"p\">{`:truthy`}</inlineCode>{`というメソッドコールを受け取ったら、必ず`}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`が返ってきます。`}<br parentName=\"p\"></br>{`\n`}<inlineCode parentName=\"p\">{`always_true`}</inlineCode>{`は内部で`}<inlineCode parentName=\"p\">{`:truthy`}</inlineCode>{`を呼び出しているので、戻り値は`}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`となります。`}<br parentName=\"p\"></br>{`\n`}{`よって、`}<inlineCode parentName=\"p\">{`obj.always_true`}</inlineCode>{`は`}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`なので、failします。`}</p>\n    <h2>{`2. success`}</h2>\n    <p>{`今度はsuccessです。`}<inlineCode parentName=\"p\">{`:falsey`}</inlineCode>{`は`}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`を返すと設定しているので、`}<inlineCode parentName=\"p\">{`obj.always_false`}</inlineCode>{`は`}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`となります。`}</p>\n    <h2>{`3. success`}</h2>\n    <p>{`次はテストに関係無いメソッドをstub化した場合です。これも、関係ないのでsuccessになります。`}</p>\n    <p>{`上記のように、`}<inlineCode parentName=\"p\">{`A: allow`}</inlineCode>{`はメソッドコールがあった時に指定した値を利用してテストすることができます。  `}</p>\n    <h1>{`expect(object).to receive(:hoge).and_return('fuga')`}</h1>\n    <p>{`続いて`}<inlineCode parentName=\"p\">{`expect`}</inlineCode>{`で、こちらはmockです。`}<br parentName=\"p\"></br>{`\n`}<inlineCode parentName=\"p\">{`allow`}</inlineCode>{`と`}<inlineCode parentName=\"p\">{`expect`}</inlineCode>{`の違いは、メソッドコールの検証の有無です。`}<inlineCode parentName=\"p\">{`expect`}</inlineCode>{`では`}<inlineCode parentName=\"p\">{`receive`}</inlineCode>{`で指定したメソッドが呼び出されていない場合、failします。  `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`  ...\n  context 'use mock' do\n    context 'use mock, and not use' do\n      # 4. fail\n      before(:each) { expect(obj).to receive(:falsey).and_return(true) }\n      it { expect(obj.always_true).to be_truthy }\n    end\n\n    context 'use mock, and use' do\n      # 5. success\n      before(:each) { expect(obj).to receive(:falsey).and_return(true) }\n      it { expect(obj.always_false).to be_truthy }\n    end\n  end\n  ...\n`}</code></pre>\n    <h2>{`4. fail`}</h2>\n    <p><inlineCode parentName=\"p\">{`receive`}</inlineCode>{`で指定したメソッドを呼び出さない場合です。`}<br parentName=\"p\"></br>{`\n`}{`itのブロック自体は正しいため、beforeの`}<inlineCode parentName=\"p\">{`expect`}</inlineCode>{`を`}<inlineCode parentName=\"p\">{`allow`}</inlineCode>{`に変えるか、`}<inlineCode parentName=\"p\">{`before`}</inlineCode>{`自体を消すとsuccessになります。`}</p>\n    <h2>{`5. success`}</h2>\n    <p><inlineCode parentName=\"p\">{`receive`}</inlineCode>{`で指定したメソッドを呼び出しています。`}<br parentName=\"p\"></br>{`\n`}{`値を`}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`に変更した上で、`}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`になっていることを確認しているので、successとなります。`}</p>\n    <h1>{`まとめ`}</h1>\n    <p>{`allowのexpectの違いはメソッドコールの検査になります。これを踏まえた上で、下の記事を読むとなるほど！と思うことができました。  `}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://techracho.bpsinc.jp/hachi8833/2014_07_10/17971\"\n        }}>{`http://techracho.bpsinc.jp/hachi8833/2014_07_10/17971`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://aligach.net/diary/20110109.html\"\n        }}>{`http://aligach.net/diary/20110109.html`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://d.hatena.ne.jp/takihiro/20081023/1224762895\"\n        }}>{`http://d.hatena.ne.jp/takihiro/20081023/1224762895`}</a></li>\n    </ul>\n    <p>{`つまり、stubとmockの違いは、インターフェースの検査(メソッドコールのチェック)をするかしないか、ということですね。  `}</p>\n    <p>{`ところで、2つの違いはわかったけれど、「どう使い分ければいいのか」が実はもっと大事です。`}<br parentName=\"p\"></br>{`\n`}{`ただ、これはテストに依存するため、確認すべきことは何か、を意識しながら切り分ける必要があります。`}<br parentName=\"p\"></br>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"http://d.hatena.ne.jp/devbankh/\"\n      }}>{`Martin Fowlerの\"Mocks Aren’t Stubs\"の翻訳記事`}</a>{`があって、非常に長い上に全容を理解しきれていないのですが、`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`振る舞いの結びつきを意識しなければいけないか`}</p>\n    </blockquote>\n    <p>{`という点が判断材料になるかと思います。`}<br parentName=\"p\"></br>{`\n`}{`あと、`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`モックオブジェクトはXPコミュニティから出てきたものだ。また、XPの主な特徴の一つは、テストドリブン開発を重要視していることだ。テストドリブン開発では、テストを書くことで推進される反復を通じてシステム設計も進んでいく。\nそういったわけで、モックオブジェクトの支持者達が相互作用テストの設計における効果についてことさら語るのも驚くことではない。このスタイルでは、主要なオブジェクトに対する最初のテストを書くから `}{`[それらのオブジェクトの]`}{` 振る舞いの開発を始めることになる。`}</p>\n    </blockquote>\n    <p>{`とあるので、TDDするならmock使うでいいと思います。  `}</p>\n    <p>{`ひとまず、色々試してみて、気になることがあれば、また何か書くかもしれません。`}</p>\n    <h1>{`最後に`}</h1>\n    <p>{`そして、今日は`}<a parentName=\"p\" {...{\n        \"href\": \"http://yochiyochirb.doorkeeper.jp/events/18227\"\n      }}>{`よちよち.rb 第48回 \"よちよちもくもく会\"`}</a>{`です(予定があって行けなくて残念)  `}</p>\n    <p>{`プログラミング未経験でも参加できる一番初心者に優しいRubyの勉強会、もといコミュニティです。`}<br parentName=\"p\"></br>{`\n`}{`後一枠余っているので、試しに参加して楽しんでみてください。`}<br parentName=\"p\"></br>{`\n`}{`当日キャンセルがちょこっと出たりすることが多いので、満席でもキャンセル待ちにしておくと、いいことがあるかもしれません。  `}</p>\n    <p>{`明日はまだ決まっていません...(紹介したかった...) # TODO:誰か現れたら更新するかも`}<br parentName=\"p\"></br>{`\n`}{`きっと今日参加する誰かが書いてくれるはずです。`}<br parentName=\"p\"></br>{`\n`}{`楽しみにお待ち下さい。  `}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}