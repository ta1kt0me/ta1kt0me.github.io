{"version":3,"sources":["webpack:///./src/pages/2015-02-17-gem-reading-dotenv.md","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent","Header","siteTitle","style","background","marginBottom","margin","maxWidth","padding","to","color","textDecoration","defaultProps","Layout","children","data","site","siteMetadata","title","Date","getFullYear","href","author"],"mappings":"kRAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,qBAAG,+BAAGC,WAAW,KAAQ,CACrB,KAAQ,uCADT,UAAH,wBAMA,sCACA,yCACA,+BACA,iDAAgC,+BAAGA,WAAW,KAAQ,CAClD,KAAQ,uDADoB,OAAhC,iBAGA,gCACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,cACb,WAAc,UACd,SAAW,IAHV,uCAOL,+BAAc,0BAAYA,WAAW,KAAvB,QAAd,eACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,OACd,QAAQ,IAHP,qBAOL,6BAAY,0BAAYA,WAAW,KAAvB,QAAZ,cAA2E,0BAAYA,WAAW,KAAvB,eAA3E,YAA+I,0BAAYA,WAAW,KAAvB,eAA/I,MAA6M,0BAAYA,WAAW,KAAvB,KAA7M,wCAAmS,0BAAYA,WAAW,KAAvB,UAAnS,+BAAqX,kBAAIA,WAAW,MAApY,oBACc,0BAAYA,WAAW,KAAvB,KADd,gBAC4E,0BAAYA,WAAW,KAAvB,KAD5E,YAEA,+BACA,gCACA,iDACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBACb,WAAc,UACd,SAAW,IAHV,gGAQL,0CAAyB,kBAAIA,WAAW,MAAxC,KACF,0BAAYA,WAAW,KAAvB,UADE,qBACsE,0BAAYA,WAAW,KAAvB,gBADtE,yBACwJ,0BAAYA,WAAW,KAAvB,UADxJ,oDAEA,mCACA,gFAA+D,0BAAYA,WAAW,KAAvB,6BAA/D,+BAAoK,kBAAIA,WAAW,MAAnL,kDAC4C,0BAAYA,WAAW,KAAvB,QAD5C,oBAEA,uCAAsB,0BAAYA,WAAW,KAAvB,cAAtB,cAA2F,0BAAYA,WAAW,KAAvB,kCAA3F,kCACA,qBAAG,0BAAYA,WAAW,KAAvB,UAAH,eAAqE,0BAAYA,WAAW,KAAvB,UAArE,yBAAiJ,+BAAGA,WAAW,KAAQ,CACnK,KAAQ,uDADqI,SAAjJ,4DAGA,wCACA,qBAAG,0BAAYA,WAAW,KAAvB,uBAAH,IAAuE,0BAAYA,WAAW,KAAvB,QAAvE,SAAiI,0BAAYA,WAAW,KAAvB,QAAjI,yBAA2M,0BAAYA,WAAW,KAAvB,SAA3M,OAAoQ,0BAAYA,WAAW,KAAvB,UAApQ,YAAmU,0BAAYA,WAAW,KAAvB,OAAnU,WAA8X,0BAAYA,WAAW,KAAvB,SAA9X,cAA8b,0BAAYA,WAAW,KAAvB,aAA9b,UAA8f,0BAAYA,WAAW,KAAvB,uBAA9f,IAAkkB,0BAAYA,WAAW,KAAvB,cAAlkB,SAAkoB,0BAAYA,WAAW,KAAvB,QAAloB,mBACA,kCACA,6BAAY,0BAAYA,WAAW,KAAvB,QAAZ,WAAwE,0BAAYA,WAAW,KAAvB,QAAxE,oCAA6J,kBAAIA,WAAW,MAA5K,KACF,0BAAYA,WAAW,KAAvB,mBADE,sBACgF,0BAAYA,WAAW,KAAvB,iBADhF,4BACsK,0BAAYA,WAAW,KAAvB,QADtK,sBAEA,sBACE,kBAAIA,WAAW,MAAf,aACA,kBAAIA,WAAW,MAAf,SAEF,kCACE,0BAAYA,WAAW,KAAvB,kCADF,WACwF,0BAAYA,WAAW,KAAvB,mCADxF,wCAEA,2EACA,kCACA,gCAAe,0BAAYA,WAAW,KAAvB,wBAAf,QAAwF,0BAAYA,WAAW,KAAvB,QAAxF,SAAkJ,0BAAYA,WAAW,KAAvB,UAAlJ,aAAkN,0BAAYA,WAAW,KAAvB,cAAlN,IAA6Q,0BAAYA,WAAW,KAAvB,qBAA7Q,qBACA,+BAAc,0BAAYA,WAAW,KAAvB,kCAAd,kEACA,8BACA,gCAAe,+BAAGA,WAAW,KAAQ,CACjC,KAAQ,+CADG,OAAf,+CAOJJ,EAAWK,gBAAiB,G,mFC7FtBC,EAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OACb,4BACEC,MAAO,CACLC,WAAW,QACXC,aAAa,YAGf,yBACEF,MAAO,CACLG,OAAO,SACPC,SAAU,IACVC,QAAQ,sBAGV,wBAAIL,MAAO,CAAEG,OAAQ,IACnB,kBAAC,OAAD,CACEG,GAAG,IACHN,MAAO,CACLO,MAAM,QACNC,eAAe,SAGhBT,OAWXD,EAAOW,aAAe,CACpBV,UAAU,IAGGD,Q,UCWAY,IAtCA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACVC,EAAI,OAWV,OACE,oCACE,kBAAC,EAAD,CAAQb,UAAWa,EAAKC,KAAKC,aAAaC,QAC1C,yBACEf,MAAO,CACLG,OAAO,SACPC,SAAU,IACVC,QAAQ,wBAGV,8BAAOM,GACP,sCACK,IAAIK,MAAOC,cADhB,mBAGE,uBAAGC,KAAK,4BAAR,UAHF,MAIMN,EAAKC,KAAKC,aAAaK,Y","file":"component---src-pages-2015-02-17-gem-reading-dotenv-md-9e626c949c0e21e5e22a.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jangajan.com/jangajan.com/src/components/layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/bkeepers/dotenv\"\n      }}>{`dotenv`}</a>{`というGemを知ったので覗いてみました。`}</p>\n    {\n      /* more */\n    }\n    <h1>{`about dotevn`}</h1>\n    <p>{`読む前にどんなものか簡単に確認。`}</p>\n    <h2>{`これなに？`}</h2>\n    <p>{`環境変数 ENV をファイル管理できるGemです。`}<a parentName=\"p\" {...{\n        \"href\": \"http://qiita.com/closer/items/f8d8ba00ae86d7051764\"\n      }}>{`こちら`}</a>{`の記事が参考になりました。`}</p>\n    <h2>{`どう使うの？`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\",\n        \"metastring\": \"Gemfile\",\n        \"Gemfile\": true\n      }}>{`# 後でbundle install\ngem 'dotenv'\n`}</code></pre>\n    <p>{`デフォルトでは`}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{`というファイルの中に、`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yml\",\n        \"metastring\": \".env\",\n        \".env\": true\n      }}>{`HOGE=1\nFUGA=2\n`}</code></pre>\n    <p>{`と書いて、`}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{`を読み込むための命令 `}<inlineCode parentName=\"p\">{`Dotenv.load`}</inlineCode>{` を実行すると、 `}<inlineCode parentName=\"p\">{`ENV['HOGE']`}</inlineCode>{` が `}<inlineCode parentName=\"p\">{`1`}</inlineCode>{` を返すようになります。環境変数をわざわざexportコマンドを使ったり、`}<inlineCode parentName=\"p\">{`.zshrc`}</inlineCode>{`といった設定ファイルに書かなくても使えるようになります。`}<br parentName=\"p\"></br>{`\n`}{`fixtureを見た感じ`}<inlineCode parentName=\"p\">{`=`}</inlineCode>{`じゃなくて、YAMLっぽく`}<inlineCode parentName=\"p\">{`:`}</inlineCode>{`も使えそう。  `}</p>\n    <h1>{`読んでみる`}</h1>\n    <h2>{`2つのGem`}</h2>\n    <p>{`このGemからは2つのGemを利用できます。  `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\",\n        \"metastring\": \"Gemfile\",\n        \"Gemfile\": true\n      }}>{`source 'https://rubygems.org'\ngemspec :name => 'dotenv'\ngemspec :name => 'dotenv-rails'\n`}</code></pre>\n    <p>{`gemspecファイルも2つあった。`}<br parentName=\"p\"></br>{`\n`}<inlineCode parentName=\"p\">{`dotenv`}</inlineCode>{`というGemはこの機能のベース部分。`}<inlineCode parentName=\"p\">{`dotenv-rails`}</inlineCode>{`というGemは、Railsを利用するときに、`}<inlineCode parentName=\"p\">{`dotenv`}</inlineCode>{`を自動で有効にしてくれるラッパーです。それと、このGemにはCLIのスクリプトも包含しています。`}</p>\n    <h2>{`dotenv.rb`}</h2>\n    <p>{`ここが外部から呼び出すインターフェースのメソッド(load, load!, overload)を定義しています。`}<inlineCode parentName=\"p\">{`module Dotenv extend self`}</inlineCode>{`として、これらをmoduleの特異メソッドにしています。`}<br parentName=\"p\"></br>{`\n`}{`環境変数を定義するファイルをこのメソッドの引数として渡せばいいが、引数なしの場合は `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` がデフォルト値となります。  `}</p>\n    <p>{`まだ分かっていないのですが、 `}<inlineCode parentName=\"p\">{`instrument`}</inlineCode>{` というメソッドは、 `}<inlineCode parentName=\"p\">{`Active Support Instrumentation`}</inlineCode>{` という機能を使っている。  この機能はRails限定。  `}</p>\n    <p><inlineCode parentName=\"p\">{`reduce`}</inlineCode>{`が使われているんだけど、`}<inlineCode parentName=\"p\">{`inject`}</inlineCode>{` とどう使い分けするのかなって疑問に思ったら`}<a parentName=\"p\" {...{\n        \"href\": \"http://magazine.rubyist.net/?0038-MapAndCollect#l4\"\n      }}>{`こんな記事`}</a>{`がありました。smalltalkとlispの考え方の違いか〜...実際にはaliasだから使う人の好みが出そう。`}</p>\n    <h2>{`environment.rb`}</h2>\n    <p><inlineCode parentName=\"p\">{`Dotenv::Environment`}</inlineCode>{`は`}<inlineCode parentName=\"p\">{`Hash`}</inlineCode>{`の子クラス。`}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{`内のkey,value情報を自身に格納して、`}<inlineCode parentName=\"p\">{`apply`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`apply!`}</inlineCode>{` を呼び出すことで`}<inlineCode parentName=\"p\">{`ENV`}</inlineCode>{`に設定している。`}<inlineCode parentName=\"p\">{`apply`}</inlineCode>{`メソッドの呼び出しは、`}<inlineCode parentName=\"p\">{`dotenv.rb`}</inlineCode>{`で行っている。`}<inlineCode parentName=\"p\">{`Dotenv::Environment`}</inlineCode>{`の`}<inlineCode parentName=\"p\">{`initialize`}</inlineCode>{`の一部として`}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{`の読み込みとパースをやってる。`}</p>\n    <h2>{`parse.rb`}</h2>\n    <p>{`大事なのは`}<inlineCode parentName=\"p\">{`call`}</inlineCode>{`メソッド。ここで`}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{`の内容がパースされる。正規表現弱いんでこのあたりは宿題...orz`}<br parentName=\"p\"></br>{`\n`}<inlineCode parentName=\"p\">{`@@substitutions`}</inlineCode>{`というクラス変数があるんだけどここには`}<inlineCode parentName=\"p\">{`Substitutions`}</inlineCode>{`のnamespaceにあるクラスの配列が入ってる。`}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{`のvalueに設定できるものとして、`}</p>\n    <ol>\n      <li parentName=\"ol\">{`コマンドの出力結果`}</li>\n      <li parentName=\"ol\">{`変数展開`}</li>\n    </ol>\n    <p>{`がある。\n1 は `}<inlineCode parentName=\"p\">{`Dotenv::Substitutions::Command`}</inlineCode>{`で処理し、2 は`}<inlineCode parentName=\"p\">{`Dotenv::Substitutions::Variable`}</inlineCode>{`で処理する。  あー、実際にはそうなるように値を設定しているのかな？  `}</p>\n    <p>{`Substitutions.constants のところでクラス名が定数だということがわかった。  `}</p>\n    <h2>{`rails.rb`}</h2>\n    <p>{`デフォルトでは、`}<inlineCode parentName=\"p\">{`before_configuration`}</inlineCode>{`のときに、`}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{`を読み込む。`}<inlineCode parentName=\"p\">{`dotenv`}</inlineCode>{`と違い、ファイル名は`}<inlineCode parentName=\"p\">{`.env.local`}</inlineCode>{`,`}<inlineCode parentName=\"p\">{`.env.#{Rails.env}`}</inlineCode>{`もデフォルトで読み込み対象となる。`}</p>\n    <p>{`それと、上述の`}<inlineCode parentName=\"p\">{`Active Support Instrumentation`}</inlineCode>{`をspringによるファイル変更時のENV再設定に利用しているっぽい。この通知の仕組み？をもうちょっと掘り下げてみようかな。`}</p>\n    <h1>{`終わりに`}</h1>\n    <p>{`英語が堪能は方は`}<a parentName=\"p\" {...{\n        \"href\": \"http://blog.mah-lab.com/2014/08/15/dotenv/\"\n      }}>{`こちら`}</a>{`が参考になるかも。全然内容が頭の中に入ってこなかったのでもっとリスニング練習しよう。`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: `white`,\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `black`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n          author\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: 960,\n          padding: `0 1.0875rem 1.45rem`,\n        }}\n      >\n        <main>{children}</main>\n        <footer>\n          © {new Date().getFullYear()}, Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n          by {data.site.siteMetadata.author}\n        </footer>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}